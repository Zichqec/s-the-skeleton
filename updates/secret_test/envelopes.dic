nowhour
{
	if hour12 == 0; 12
	else; hour12
}

nowmin //Adding a 0 to the minute if it's under 10
{
	if minute < 10; "0%(minute)"
	else; "%(minute)"
}

nowsec //Adding a 0 to the second if it's under 10
{
	if second < 10; "0%(second)"
	else; "%(second)"
}

CanGetWeather
{
	if UserInfo.location != ""; 1
	else; 0
}

HasWeatherData
{
	//if Info.http_code == "200"
	if Weather.condition != "" && Info.error_code == ""; 1
	else; 0
}

version
{
	"Weather Station v%(version_num)"
}

version_num
{
	"0.0.2"
}

CurrentWeatherTags
{
	"is_day,temp_f,temp_c,wind_mph,wind_kph,wind_dir,wind_degree,pressure_in,pressure_mb,precip_in,precip_mm,humidity,cloud,feelslike_f,feelslike_c,vis_miles,vis_km,uv,gust_mph,gust_kph,co,no2,o3,so2,pm2_5,pm10,us-epa-index,gb-defra-index"
}

ForecastDayTags
{
	"maxtemp_f,maxtemp_c,mintemp_f,mintemp_c,avgtemp_f,avgtemp_c,maxwind_mph,maxwind_kph,totalprecip_in,totalprecip_mm,avgvis_miles,avgvis_km,avghumidity,daily_will_it_rain,daily_chance_of_rain,daily_will_it_snow,daily_chance_of_snow"
}

ForecastAstroTags
{
	"sunrise,sunset,moonrise,moonset,moon_phase,moon_illumination"
}

ForecastHourTags
{
	"time,is_day,temp_f,temp_c,wind_mph,wind_kph,wind_dir,wind_degree,pressure_in,pressure_mb,precip_in,precip_mm,humidity,cloud,feelslike_f,feelslike_c,windchill_f,windchill_c,heatindex_f,heatindex_c,dewpoint_f,dewpoint_c,will_it_rain,chance_of_rain,will_it_snow,chance_of_snow,vis_miles,vis_km,gust_mph,gust_kph,uv"
}

MoonIcon
{
	_phase = Forecast.0.Astro.moon_phase
	
	"\_b[img/moon_0"
	--
	if _phase == "New Moon"; "1"
	elseif _phase == "Waxing Crescent"; "2"
	elseif _phase == "First Quarter"; "3"
	elseif _phase == "Waxing Gibbous"; "4"
	elseif _phase == "Full Moon"; "5"
	elseif _phase == "Waning Gibbous"; "6"
	elseif _phase == "Last Quarter"; "7"
	elseif _phase == "Waning Crescent"; "8"
	else; "0"
	--
	",inline,--option=use_self_alpha]"
}


//Pulls out data from between XML tags
ExtractXML
{
	_output = IARRAY
	_split = SPLIT(_argv[0],"<%(_argv[1])>") //Split by the starting tag
	_split[0] = IARRAY //Remove the first element because we don't need it
	foreach _split; _element //For each starting tag found, split off everything after the ending tag
	{
		_output ,= SPLIT(_element,"</%(_argv[1])>")[0] //Add contents to an array
	}
	LOGGING("OUTPUT: ",_output)
	LOGGING("TYPE: ",GETTYPE(_output))
	_output
}
