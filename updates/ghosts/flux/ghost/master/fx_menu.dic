OpenSakuraMenu
{
	if AutoUpdates[3] == 1 || AutoUpdates[4] == 1 || AutoUpdates[5] == 1  //If an update is available, the user will be notified when they try to open the menu
	{
		"\0%(b)"
		--
		if language == "Placeholder" //TRANSLATORS: If the user tries to open the menu and an update is available, they will be given this dialogue once a day
		{
			
		}
		elseif language == "Polski"
		{
			"[Aktualizacje są dostępne dla:]\n\n\![]"
			--
			if AutoUpdates[3] == 1; "[Playera FLUX]\n\![]"
			--
			if AutoUpdates[4] == 1; "[Skorupy '%(nowshell)']\n\![]"
			--
			if AutoUpdates[5] == 1; "[Balona '%(SHIORI3FW.BalloonName)']\n"
			--
			"\_q\n\n\![*]\q[Pobierz teraz,OnStartUpdates]\n/
			\![*]\q[Może potem,UpdateLater]\n\n/
			\![*]\q[Wyłącz auto-aktualizacje,UpdateOff]\e"
		}
		else //English
		{
			//"[An update is available.\w8 Do you want to download it?]" //TODO JAPANESE - Have to update this
			"[Updates are available for:]\n\n\![]"
			--
			if AutoUpdates[3] == 1; "[FLUX Player]\n\![]"
			--
			if AutoUpdates[4] == 1; "['%(nowshell)' shell]\n\![]"
			--
			if AutoUpdates[5] == 1; "['%(SHIORI3FW.BalloonName)' balloon]\n"
			--
			"\_q\n\![*]\q[Download updates now,OnStartUpdates]\n/
			\![*]\q[Maybe later,UpdateLater]\n\n/
			\![*]\q[Turn off auto updates,UpdateOff]\e"
		}
	}
	else //Normal menu opening
	{
		OnMenuRun
	}
}

Select.UpdateLater //If the user decides to update later
{
	AutoUpdates[1] = 1
	AutoUpdates[3] = 0
	AutoUpdates[4] = 0
	AutoUpdates[5] = 0
	
	"\0%(b)"
	--
	if language == "Placeholder" //TRANSLATORS: This is if the user decides not to update right away
	{
		
	}
	elseif language == "Polski"
	{
		"[Będę ci przypominiać raz dziennie.]\e"
	}
	else //English
	{
		"[You will be reminded once a day.]\e"
	}
}

Select.UpdateOff //If the user no longer wants to be notified about updates
{
	AutoUpdates[0] = 0
	AutoUpdates[1] = 1
	AutoUpdates[3] = 0
	AutoUpdates[4] = 0
	AutoUpdates[5] = 0
	
	"\0%(b)"
	--
	if language == "Placeholder" //TRANSLATORS: This is if the user decides they don't want update notifications anymore
	{
		
	}
	elseif language == "Polski"
	{
		"[Auto-aktualizacje wyłączone,\w4 Możesz ję włączyć spowrotem w ustawieniach.]\e"
	}
	else //English
	{
		"[Auto Update checks turned off,\w4 you can turn them on again in the Config menu.]\e"
	}
}

OnMenuRun //Main menu
{
	_currentsong = SPLITPATH(NowPlaying[0])[2]
	_currentsong = REPLACE(_currentsong,"||",",")
	
	"\0%(bb)\_q\![set,autoscroll,disable]"
	--
	if language == "Placeholder" //TRANSLATORS: This is the main menu, use _currentsong for the currently playing song. If you need different names for things like the seasons or day of the week, you'll have to do it with local variables and if checks here, so that shells can still access that info normally. If you're unsure how to do this, talk to me and I'll help you set it up
	{
		
	}
	elseif language == "Polski"
	{
		if NowPlaying[0] == ""//If no song is playing
		{
			"[Odtwarzacz jest nieaktywny..]"
		}
		elseif NowPlaying[2] != "" //If a song is paused
		{
			"[Wstrzymane: \_a[OnMusicMenu]%(_currentsong)\_a]"
		}
		else //If a song is playing
		{
			"[Obecnie gra: \_a[OnMusicMenu]%(_currentsong)\_a]"
		}
		--
		"\n\n\![*]\q[Sterowanie muzyką,OnMusicMenu]\n"
		--
		if lastTalk != ""
		{
			"\n\![*]\q[Powtórz ostatni dialog,OnLastTalk]"
		}
		--
		if ISFUNC("OnCustom_RandomTalk") && CustomFuncs[0] == 1; "\n\![*]\q[Powiedz coś,OnAiTalk,Menu]\n"
		--
		"\n\![*]\q[Zmiana skorupy,OnShellMenu]\n"
		--
		if ARRAYSIZE(availabledressups) > 0; "\![*]\q[Ubrania,OnDressupMenu]\n"
		--
		if ISFUNC("OnCustom_Menu") && CustomFuncs[0] == 1; "\n%(OnCustom_Menu)\n"
		--
		"\n\![*]\q[Ustawienia,OnConfigMenu]\n\n\![*]\q[Zamknij,OnCancel]"
		--
		if debug > 1 //%(debug = 1) in script input to show the debug options
		{
			"     \![*]\q[Test Variable,OnTestVar]"
		}
		--
		if debug > 0 //%(debug = 1) in script input to show the debug options
		{
			if CustomFuncs[0] == 1; "\n\n\![*]\q[Przeładuj funkcje skorupy,OnGetCustomShellDialogue]"
			else; "\n\nSpecjalne funkcje/dialogi skorupy są wyłączone"
			--
			if ISFUNC("OnCustom_TestFunc") && CustomFuncs[0] == 1; "  \![*]\q[Test funkcji specjalnych,OnCustom_TestFunc]"
		}
		--
		"\n\n\n[half]\f[height,-2]"
		--
		//"\n%(wd) %(nowhour):%(nowmin) %(ap), %(month)/%(day)/%(year) - %(season)\n"
		--
		"Czas pracy: %(runtime[0]):%(runmin)"
		--
		"\nFLUX v%(ghostver)"
		--
		if ISFUNC("shellver"); "     %(nowshell) v%(shellver)"
		--
		"\e FLUX main menu"
	}
	else //English
	{
		if NowPlaying[0] == ""//If no song is playing
		{
			"[Player is idle.]"
		}
		elseif NowPlaying[2] != "" //If a song is paused
		{
			"[Paused: \_a[OnMusicMenu]%(_currentsong)\_a]"
		}
		else //If a song is playing
		{
			"[Currently playing: \_a[OnMusicMenu]%(_currentsong)\_a]"
		}
		--
		"\n\n\![*]\q[Music Controls,OnMusicMenu]\n"
		--
		if lastTalk != ""
		{
			"\n\![*]\q[Repeat last dialogue,OnLastTalk]"
		}
		--
		if ISFUNC("OnCustom_RandomTalk") && CustomFuncs[0] == 1; "\n\![*]\q[Say something,OnAiTalk,Menu]\n"
		--
		"\n\![*]\q[Change shells,OnShellMenu]\n"
		--
		if ARRAYSIZE(availabledressups) > 0; "\![*]\q[Dressups,OnDressupMenu]\n"
		--
		if ISFUNC("OnCustom_Menu") && CustomFuncs[0] == 1; "\n%(OnCustom_Menu)\n"
		--
		"\n\![*]\q[Config,OnConfigMenu]\n\n\![*]\q[Close,OnCancel]"
		--
		if debug > 1
		{
			"  \![*]\q[Test Variable,OnTestVar]"
		}
		--
		if debug > 0 //%(debug = 1) in script input to show the debug options
		{
			if CustomFuncs[0] == 1; "\n\n\![*]\q[Reload Shell Functions,OnGetCustomShellDialogue]"
			else; "\n\nCustom shell functions/dialogue are disabled"
			--
			if ISFUNC("OnCustom_TestFunc") && CustomFuncs[0] == 1; "  \![*]\q[Custom Test Function,OnCustom_TestFunc]"
		}
		
		--
		"\n\n\n[half]\f[height,-2]"
		--
		//"\n%(wd) %(nowhour):%(nowmin) %(ap), %(month)/%(day)/%(year) - %(season)\n"
		--
		"Runtime: %(runtime[0]):%(runmin)"
		--
		"\nFLUX v%(ghostver)"
		--
		if ISFUNC("shellver") && CustomFuncs[0] == 1; "     %(nowshell) v%(shellver)"
		--
		"\e FLUX main menu"
	}
}

OnLastTalk //Repeats the last thing the ghost said
{
	"%(lastTalk)\e"
}

//----------Config Menu----------
OnConfigMenu //I moved changing name/pronouns/birthday over to Nameteach, because they're info about the user
{
	if deleteshitai[1] == ""; {deleteshitai[0] = 0; deleteshitai[1] = onoff[1]}
	if AutoUpdates[2] == ""; {AutoUpdates[0] = 1; AutoUpdates[2] = onoff[0]}
	if CustomFuncs[1] == ""; {CustomFuncs[0] = 1; CustomFuncs[1] = onoff[0]}
	if birthday[0] == "" || birthday[2] == ""; {birthday = IARRAY; birthday[0] = "???"}
	if gender == ""; gender = "undef"
	
	_uninstbtn = ""; if deleteshitai[0] == 1; _uninstbtn = onoff[0]; else; _uninstbtn = onoff[1]
	_cstfncbtn = ""; if CustomFuncs[0] == 1; _cstfncbtn = onoff[0]; else; _cstfncbtn = onoff[1]
	_atoupdbtn = ""; if AutoUpdates[0] == 1; _atoupdbtn = onoff[0]; else; _atoupdbtn = onoff[1]
	
	
	"\![close,inputbox,OnNameTeach]\![close,inputbox,OnUserBornMonth]\![close,inputbox,OnUserBornDay]"
	--
	if language == "Placeholder" //TRANSLATORS: The config menu. I imagine the pronoun system is going to get tricky between languages, talk to me about this and we can work something out. It's important to be able to pick them, though, because shells aren't necessarily going to be translated and might use these envelopes. If your language doesn't have pronouns, you could put something like 'masculine', 'feminine', or 'neutral' in their place.
	{
		
	}
	elseif language == "Polski"
	{
		//This is here in case the variables get erased. The buttons will be set to default so the user has something to click. This has happened to my users before and resetting them is a painful process. Do not remove these.
		if username == ""; username = "Użytkownik"
		if hemisphere == ""; {hemisphere = 0}
		if talkrate == ""; {talkrate = "every 5 minutes"; aitalkinterval = 300}
		if talkoption == ""; {talkoption = 0}
		--
		"\_q%(bb)/
		Twoje imię: \_a[OnChangeName]%(username)\_a\n/
		Twoje zaimki: \_a[OnChangePronoun]%(Capitalize(heshe))/%(Capitalize(himher))/%(Capitalize(hisher))\_a\n"
		--
		if birthday[0] == "???"; "Twoje urodziny: \_a[OnChangeBirthday]???\_a\n"
		else; "Twoje urodziny: \_a[OnChangeBirthday]%(GetDaySuffix(birthday[5],language)) %(MonthName(birthday[4],language))\_a\n"
		--
		"Twoja półkula: \_a[OnToggleHemisphere]%(nowhemisphere)\_a\n/
		Język: \_a[OnLanguageMenu]%(language)\_a\n"
		--
		if SHIORI3FW.BalloonName == "Notes"
		{
			if balloonmode == 1; "\f[anchorfontcolor,150,150,150]"
			--
			"\_a[OnBalloonModeToggle,Dark]Tryb ciemny\_a"
			--
			"\f[default]  "
			--
			if balloonmode != 1; "\f[anchorfontcolor,150,150,150]"
			--
			"\_a[OnBalloonModeToggle,Light]Tryb jasny\_a"
			--
			"\f[default]\n"
		}
		--
		"\nCzęstotliwość rozmowy: \_a[OnChangeTalk]%(nowtalkrate)\_a\n/
		Mów \_a[OnToggleTalkOption]%(nowtalkopt)\_a\n\n/
		Automatyczne sprawdzanie aktualizacji \_a[OnToggleUpdate]%(_atoupdbtn)\_a\n/
		\![*]\q[Sprawdź aktualizacje FLUX,UpdateCheck]\n/
		\![*]\q[Sprawdź aktualizacje skorupy,UpdateShell]\n/
		Specjalne funkcje/dialogi skorupy \_a[OnToggleCustomFuncs]%(_cstfncbtn)\_a\n\n/
		\![*]\q[Zgłoś błąd,BugReport]\n\n/
		Włącz odinstalowywanie? \_a[OnToggleUninstall]%(_uninstbtn)\_a\n\n/
		\![*]\q[Powrót do menu,OnMenuRun]\e"
	}
	else //English
	{
		//This is here in case the variables get erased. The buttons will be set to default so the user has something to click. This has happened to my users before and resetting them is a painful process. Do not remove these.
		if username == ""; username = "User"
		if hemisphere == ""; {hemisphere = 0}
		if talkrate == ""; {talkrate = "every 5 minutes"; aitalkinterval = 300}
		if talkoption == ""; {talkoption = 0}
		--
		"\_q%(bb)/
		Your name: \_a[OnChangeName]%(username)\_a\n/
		Your pronouns: \_a[OnChangePronoun]%(Capitalize(heshe))/%(Capitalize(himher))/%(Capitalize(hisher))\_a\n"
		--
		if birthday[0] == "???"; "Your birthday: \_a[OnChangeBirthday]???\_a\n"
		else; "Your birthday: \_a[OnChangeBirthday]%(MonthName(birthday[4],language)) %(GetDaySuffix(birthday[5],language))\_a\n"
		--
		"Your hemisphere: \_a[OnToggleHemisphere]%(nowhemisphere)\_a\n/
		Language: \_a[OnLanguageMenu]%(language)\_a\n"
		--
		if SHIORI3FW.BalloonName == "Notes"
		{
			if balloonmode == 1; "\f[anchorfontcolor,150,150,150]"
			--
			"\_a[OnBalloonModeToggle,Dark]Dark mode\_a"
			--
			"\f[default]  "
			--
			if balloonmode != 1; "\f[anchorfontcolor,150,150,150]"
			--
			"\_a[OnBalloonModeToggle,Light]Light mode\_a"
			--
			"\f[default]\n"
		}
		--
		//TODO Japanese - Need to update this button from Auto FLUX updates
		"\nTalk rate: \_a[OnChangeTalk]%(nowtalkrate)\_a\n/
		Talk \_a[OnToggleTalkOption]%(nowtalkopt)\_a\n\n/
		Auto update checks \_a[OnToggleUpdate]%(_atoupdbtn)\_a\n/
		\![*]\q[Check for FLUX updates,UpdateCheck]\n/
		\![*]\q[Check for shell updates,UpdateShell]\n/
		Custom Shell Functions/Dialogue \_a[OnToggleCustomFuncs]%(_cstfncbtn)\_a\n\n/
		\![*]\q[Report a bug,BugReport]\n\n/
		Enable Uninstall? \_a[OnToggleUninstall]%(_uninstbtn)\_a\n\n/
		\![*]\q[Back to the menu,OnMenuRun]\e"
	}
}

OnToggleHemisphere
{
	if hemisphere != 0 //Switching to northern
	{
		hemisphere = 0
	}
	else //Switching to southern
	{
		hemisphere = 1
	}
	--
	OnConfigMenu
}

OnLanguageMenu
{
	"\0%(bb)\_q\![set,autoscroll,disable]"
	--
	if language == "Placeholder" //TRANSLATORS: This is the same as the language menu in OnFirstBoot. Add your language, and make the first argument be the name of your language as it will be stored in the language variable. This bit up here is specifically the blurb at the top of the menu.
	{
		
	}
	elseif language == "Polski"
	{
		"[Proszę wybrać język dla odtwarzacza FLUX. Proszę zauważyć, że nie ma to wpływu na język skorupy.]"
	}
	else //English
	{
		"[Please choose a language for FLUX player. Note that this does not affect the language of shells.]"
	}
	--
	"\n\n/
	\![*]\q[English,OnLanguage,English]\n/
	\![*]\q[Polski,OnLanguage,Polski]"
	--
	if language == "Placeholder" //TRANSLATORS: A cancel button under the language menu, and also a button that leads to documentation for translating FLUX.
	{
		
	}
	elseif language == "Polski"
	{
		"\n\n\![Przetłumacz FLUX,OnTranslateDocument]/
		\![*]\q[Powrót do ustawień,OnConfigMenu]\e"
	}
	else //English
	{
		"\n\n\![*]\q[Translate FLUX,OnTranslateDocument]/
		\n\![*]\q[Back to Config,OnConfigMenu]\e"
	}
}

OnLanguage
{
	language = reference0
	OnConfigMenu
}

OnTranslateDocument
{
	"\C\![open,file,translating_flux.txt]"
}

OnChangeTalk
{
	if language == "Placeholder" //TRANSLATORS: The menu for changing the talk rate. Make sure to leave the numbers in the second argument, those are what actually sends the info to the next function
	{
		
	}
	elseif language == "Polski"
	{
		"\0%(bb)\_q[Jak często powinny być wypowiadane losowe dialogi? Zauważ, że nie wszystkie skorupy zawierają losowe dialogi.]\n\n/
		\![*]\q[co 30 sekund,OnTalkRate,Thirty,30]\n/
		\![*]\q[co minute,OnTalkRate,Minute,60]\n/
		\![*]\q[co 3 minuty,OnTalkRate,ThreeMin,180]\n/
		\![*]\q[co 5 minut,OnTalkRate,FiveMin,300]\n/
		\![*]\q[Nie mów.,OnTalkRate,None,0]\n\n/
		\![*]\q[Anuluj,OnConfigMenu]\e"
	}
	else
	{
		"\0%(bb)\_q[How often should random dialogue be said? Note that not all shells include random dialogue.]\n\n/
		\![*]\q[Every 30 seconds,OnTalkRate,Thirty,30]\n/
		\![*]\q[Every minute,OnTalkRate,Minute,60]\n/
		\![*]\q[Every 3 minutes,OnTalkRate,ThreeMin,180]\n/
		\![*]\q[Every 5 minutes,OnTalkRate,FiveMin,300]\n/
		\![*]\q[Don't speak,OnTalkRate,None,0]\n\n/
		\![*]\q[Nevermind,OnConfigMenu]\e"
	}
}

OnTalkRate
{
	aitalkinterval = TOINT(reference1) //this changes the talk rate, in seconds
	
	if reference0 == "Thirty" //don't touch these
	{
		talkrate = "every 30 seconds"
	}
	elseif reference0 == "Minute"
	{
		talkrate = "every minute"
	}
	elseif reference0 == "ThreeMin"
	{
		talkrate = "every 3 minutes"
	}
	elseif reference0 == "FiveMin"
	{
		talkrate = "every 5 minutes"
	}
	
	if language == "Placeholder" //TRANSLATORS: This function actually sets the dialogue rate. Set up nowtalkrate below, and you can use that to display which option was chosen.
	{
		
	}
	elseif language == "Polski"
	{
		if reference0 == "None"
		{
			"\0%(bb)[Nie będzie żadnych dialogów.]"
		}
		else
		{
			"\0%(bb)[Dialog będzie wypowiadany %(nowtalkrate).]"
		}
		--
		"\n\n\![*]\q[Powrót do ustawień,OnConfigMenu]\n\![*]\q[Close,OnCancel]\e"
	}
	else //English
	{
		if reference0 == "None"
		{
			"\0%(bb)[No dialogue will be said.]"
		}
		else
		{
			"\0%(bb)[Dialogue will be said %(nowtalkrate).]"
		}
		--
		"\n\n\![*]\q[Back to config,OnConfigMenu]\n\![*]\q[Close,OnCancel]\e"
	}
}

nowtalkrate
{
	if language == "Placeholder" //TRANSLATORS: Envelope for the talk rate, affects the display in the menu
	{
		
	}
	elseif language == "Polski"
	{
		if talkrate == "every 30 seconds"
		{
			"co 30 sekund" //this displays the talk rate in the menu
		}
		elseif talkrate == "every minute"
		{
			"co minute"
		}
		elseif talkrate == "every 3 minutes"
		{
			"co 3 minuty"
		}
		elseif talkrate == "every 5 minutes"
		{
			"co 5 minut"
		}
		else //Never
		{
			"nigdy"
		}
	}
	else //English
	{
		if talkrate == "every 30 seconds"
		{
			"every 30 seconds"
		}
		elseif talkrate == "every minute"
		{
			"every minute"
		}
		elseif talkrate == "every 3 minutes"
		{
			"every 3 minutes"
		}
		elseif talkrate == "every 5 minutes"
		{
			"every 5 minutes"
		}
		else //Never
		{
			"never"
		}
	}
}

OnToggleUpdate
{	
	if AutoUpdates[0] != 1
	{
		AutoUpdates[0] = 1
		AutoUpdates[2] = onoff[0]
	}
	else
	{
		AutoUpdates[0] = 0
		AutoUpdates[2] = onoff[1]
	}
	--
	OnConfigMenu
}

OnToggleCustomFuncs
{
	if CustomFuncs[0] != 1
	{
		CustomFuncs[0] = 1
		CustomFuncs[1] = onoff[0]
		OnGetCustomShellDialogue
	}
	else
	{
		CustomFuncs[0] = 0
		CustomFuncs[1] = onoff[1]
		OnGetCustomShellDialogue
	}
	--
	OnConfigMenu
}

OnBalloonModeToggle
{
	if reference0 == "Light"
	{
		balloonmode = 1
	}
	else
	{
		balloonmode = 0
	}
	--
	OnConfigMenu
}

OnToggleUninstall
{
	if deleteshitai[0] != 1
	{
		deleteshitai[0] = 1
		deleteshitai[1] = onoff[0]
	}
	else
	{
		deleteshitai[0] = 0
		deleteshitai[1] = onoff[1]
	}
	--
	OnConfigMenu
}

OnToggleTalkOption
{
	if talkoption == 1 //Talk only while playing music
	{
		talkoption = 2
	}
	elseif talkoption == 2 //Talk only while not playing music
	{
		talkoption = 0
	}
	else //Talk any time
	{
		talkoption = 1
	}
	--
	OnConfigMenu
}

nowtalkopt
{
	if language == "Placeholder" //TRANSLATORS: Set the dialogue you want to show for the talk options in the config menu here. There's an option for talking only while FLUX is playing music, one for talking only when FLUX is NOT playing music, and one for talking at any time
	{
		
	}
	elseif language == "Polski"
	{
		if talkoption == 1 //Talk only while playing music
		{
			"tylko podczas grania muzyki"
		}
		elseif talkoption == 2 //Talk only while not playing music
		{
			"tylko gdy nie grania muzyki"
		}
		else //Talk any time
		{
			"kiedykolwiek"
		}
	}
	else //English
	{
		if talkoption == 1 //Talk only while playing music
		{
			"only while playing music"
		}
		elseif talkoption == 2 //Talk only while not playing music
		{
			"only while not playing music"
		}
		else //Talk any time
		{
			"any time"
		}
	}
}

Select.BugReport
{
	if language == "Placeholder" //TRANSLATORS: The bug report option. If you want to allow people to potentially contact you about errors in your translation, go ahead and mention that here and give a url/means of contacting you.
	{
		
	}
	elseif language == "Polski"
	{
		"\0%(b)[Błędy w mechanice odtwarzacza FLUX można zgłaszać do \_a[https://zichqec.github.io/s-the-skeleton/index.html]Zichqec\_a,\w4 za pośrednictwem jednego z jej mediów społecznościowych.]\n\n\w8\w8[Błędy w skorupie, którą aktualnie używasz, '%(nowshell)',\w4 powinny być zgłaszane do jej twórcy,\w4 \_a[%(shellauthor[1])]%(shellauthor[0])\_a.]\n\n\w8\w8[Wszelkie literówki w polskim tłumaczeniue dla FLUXa mogą być zgłaszane do \_a[https://zdzisiu.github.io/Ukagaka/]Zdzicha\_a przez Discorda.]"
		--
		"\n\n\![*]\q[Powrót do ustawień,OnConfigMenu]\n\![*]\q[Zamknij,OnCancel]\e"
	}
	else //English
	{
		"\0%(b)[Bugs with FLUX player's mechanics can be reported to \_a[https://zichqec.github.io/s-the-skeleton/index.html]Zichqec\_a,\w4 via any of her social medias.]\n\n\w8\w8[Bugs in the shell you're currently running, '%(nowshell)',\w4 should be reported to it's dev,\w4 \_a[%(shellauthor[1])]%(shellauthor[0])\_a.]\n\n\w8\w8[Any typos in the English menus/generic dialogue for FLUX can be reported to \_a[https://zichqec.github.io/s-the-skeleton/index.html]Zichqec\_a.]"
		--
		"\n\n\![*]\q[Back to Config,OnConfigMenu]\n\![*]\q[Close,OnCancel]\e"
	}
}

Select.UpdateCheck //Starts an update check
{
	"\![updatebymyself]\e"
}

onoff
{
	//TRANSLATORS: This is for the on/off toggles in the config menu and such! Put your equivalent for On, then a comma, then your equivalent for Off. If this doesn't work for your language for some reason, let me know and we can work something out.
	if language == "Placeholder"
	{
		
	}
	elseif language == "Polski"
	{
		"On,Off"
	}
	else //English
	{
		"On,Off"
	}
}

//-----------Shell and Dressups-----------
On_installedshellname //Gathers available shells
{
	ShellList = IARRAY
	foreach reference; _shell
	{
		ShellList ,= _shell
	}
}

OnShellMenu //Menu to display all the shells
{
	_display = ""
	for _i = 0; _i < ARRAYSIZE(ShellList); _i++
	{
		if ShellList[_i] == nowshell; _display += "\![*]"
		_display += "\q[%(ShellList[_i]),OnSwitchShell,%(ShellList[_i])]\n"
	}
	--
	if ARRAYSIZE(ShellList) > 16; "\0%(bbb)"
	else; "\0%(bb)"
	--
	"\*\_q\![set,autoscroll,0]"
	--
	if language == "Placeholder" //TRANSLATORS: The shell menu. If you're interested in translating the documentation for how to create a FLUX shell, do let me know and I could set it up to open the language-specific documentation
	{
		
	}
	elseif language == "Polski"
	{
		"\![*]\q[Pobierz więcej skorup,OnShellUrl]"
		--
		"\n\![*]\q[Stwórz własną skorupę,OnCustomShell]"
		--
		"\n\![*]\q[Losowa skorupa,OnRandomShell]"
		--
		if ARRAYSIZE(ShellList) > 19; "\n\n[half]\![*]\q[Powrót do menu,OnMenuRun]"
		--
		"\n\n%(_display)" //Displays the available shells
		--
		"\n\n[half]\![*]\q[Powrót do menu,OnMenuRun]"
		--
		"\n\![*]\q[Zamknij,OnCancel]\e"
	}
	else //English
	{
		"\![*]\q[Download more shells,OnShellUrl]"
		--
		"\n\![*]\q[Make your own shell,OnCustomShell]"
		--
		"\n\![*]\q[Random Shell,OnRandomShell]"
		--
		if ARRAYSIZE(ShellList) > 19; "\n\n[half]\![*]\q[Back to menu,OnMenuRun]"
		--
		"\n\n%(_display)" //Displays the available shells
		--
		"\n\n[half]\![*]\q[Back to menu,OnMenuRun]"
		--
		"\n\![*]\q[Close,OnCancel]\e"
	}
}

OnShellUrl //Directs the user to my website where I will link any shells I know of
{
	"\C\j[https://zichqec.github.io/s-the-skeleton/flux.html]"
}

OnCustomShell //Opens the documentation file
{
	"\C\![open,file,make_your_own_shell]"
}

OnSwitchShell //Changing shells
{
	"\![get,property,OnGetCoords,currentghost.scope(0).rect]\![change,shell,%(reference0),--option=raise-event]"
}

OnRandomShell
{
	"\![get,property,OnGetCoords,currentghost.scope(0).rect]\![change,shell,random,--option=raise-event]"
}

OnDressupMenu //Menu for dressups
{
	_display = "" //Initializing variables
	_currentcharacters = IARRAY
	_currentcategories = IARRAY
	_items = 0
	if ARRAYSIZE(dressupcharacters) == 1; {reference0 = dressupcharacters[0]}
	
	foreach availabledressups; _dressup //For every dressup that the ghost has
	{
		_character = _dressup[0,"|"]
		_category = _dressup[1,"|"] //Gather the character, name, and category of the current dressup
		_name = _dressup[2,"|"]
		
		if reference0 == "" && ASEARCH(_character,_currentcharacters) == -1
		{
			_currentcharacters ,= _character //Add the character to the list
			if language == "Placeholder" //TRANSLATORS: If the shell has more than 1 character, they'll have options to select which character they want to dress up. Character 0 is the Sakura, Character 1 is the Kero, etc. This \__q tag is a lot like an anchor tag, the displayed name of the option is between the \__q[] and \__q. The _character variable is the current character number
			{
				
			}
			elseif language == "Polski"
			{
				_display += "\__q[OnDressupMenu,%(_character)]Postać %(_character)\__q\n"
			}
			else //English
			{
				_display += "\__q[OnDressupMenu,%(_character)]Character %(_character)\__q\n"
			}
		}
		elseif _character == reference0 && reference1 == "" && ASEARCH(_category,_currentcategories) == -1 //If the user is not in a submenu AND we haven't logged this category yet
		{
			_currentcategories ,= _category //Add the category to a list
			if ASUB("%(_character)|%(_category)|",currentdressups) != -1; _display += "\![*]" //If a dressup in this category is on, add a menu choice marker to it
			_display += "\__q[OnDressupMenu,%(_character),%(_category)]%(_category)\__q\n" //Make a menu option for it
		}
		elseif _character == reference0 && _category == reference1 //Otherwise, if the user IS in a submenu, AND this item matches the current submenu category
		{
			_items++
			_pos = ASEARCH("%(_character)|%(_category)|%(_name)",currentdressups) //See if the name of this item is in the name of dressups currently being used
			if _pos != -1; _display += "\![*]"
			_display += "\__q[OnChangeDesign,%(_character),%(_category),%(_name)]%(_name)\__q\n"
		}
	}
	--
	"\0\*\_q\![set,autoscroll,0]"
	--
	if language == "Placeholder" //TRANSLATORS: This is the top of the dressup menu. It looks a bit complicated, but most of it is just back buttons tbh.
	{
		
	}
	elseif language == "Polski"
	{
		if reference0 == "" //Top level
		{
			if ARRAYSIZE(_currentcharacters) > 16; "\0%(bbb)"
			else; "\0%(bb)"
			--
			"Postacie:"
			--
			if ARRAYSIZE(_currentcharacters) > 22; "\n\n\![*]\q[Powrót do menu,OnMenuRun]"
		}
		elseif reference1 == "" //After a character is chosen
		{
			if ARRAYSIZE(_currentcategories) > 16; "\0%(bbb)"
			else; "\0%(bb)"
			--
			if ARRAYSIZE(dressupcharacters) == 1; "Kategorie:\n\n"
			else; "Kategorie dla %(reference0):\n\n" //Note: This is when the user clicks into a character submenu. So this is the same as the "Character %(_character)" translation above
			--
			"\![*]\q[Losowe ubrania,OnRandomDressup,%(reference0)]"
			--
			if ARRAYSIZE(_currentcategories) > 22
			{
				if ARRAYSIZE(dressupcharacters) == 1; "\n\![*]\q[Powrót do menu,OnMenuRun]"
				else; "\n\![*]\q[Powrót,OnDressupMenu]"
			}
		}
		else //After a category is chosen
		{
			if _items > 16; "\0%(bbb)"
			else; "\0%(bb)"
			--
			if ARRAYSIZE(dressupcharacters) == 1; "Kategoria: %(reference1)"
			else; "Postać %(reference0) %(reference1):"
			--
			if _items > 22; "\n\n\![*]\q[Powrót,OnDressupMenu,%(reference0)]"
		}
	}
	else //English
	{
		if reference0 == "" //Top level
		{
			if ARRAYSIZE(_currentcharacters) > 16; "\0%(bbb)"
			else; "\0%(bb)"
			--
			"Characters:"
			--
			if ARRAYSIZE(_currentcharacters) > 22; "\n\n\![*]\q[Back to Menu,OnMenuRun]"
		}
		elseif reference1 == "" //After a character is chosen
		{
			if ARRAYSIZE(_currentcategories) > 16; "\0%(bbb)"
			else; "\0%(bb)"
			--
			if ARRAYSIZE(dressupcharacters) == 1; "Categories:\n\n"
			else; "Character %(reference0) categories:\n\n" //Note: This is when the user clicks into a character submenu. So this is the same as the "Character %(_character)" translation above
			--
			"\![*]\q[Random Dressups,OnRandomDressup,%(reference0)]"
			--
			if ARRAYSIZE(_currentcategories) > 22
			{
				if ARRAYSIZE(dressupcharacters) == 1; "\n\![*]\q[Back to Menu,OnMenuRun]"
				else; "\n\![*]\q[Back,OnDressupMenu]"
			}
		}
		else //After a category is chosen
		{
			if _items > 16; "\0%(bbb)"
			else; "\0%(bb)"
			--
			if ARRAYSIZE(dressupcharacters) == 1; "Category: %(reference1)"
			else; "Character %(reference0) %(reference1):"
			--
			if _items > 22; "\n\n\![*]\q[Back,OnDressupMenu,%(reference0)]"
		}
	}
	--
	"\n\n%(_display)\n" //The actual display of the items in the current submenu
	--
	if language == "Placeholder" //TRANSLATORS: This is the bottom of the dressup menu, much simpler thankfully
	{
		
	}
	elseif language == "Polski"
	{
		if reference0 == ""
		{
			"\![*]\q[Powrót do menu,OnMenuRun]\n\![*]\q[Close,Cancel]\e"
		}
		elseif reference1 == ""
		{
			if ARRAYSIZE(dressupcharacters) == 1; "\![*]\q[Powrót do menu,OnMenuRun]"
			else; "\![*]\q[Powrót,OnDressupMenu]"
			--
			"\n\![*]\q[Zamknij,Cancel]\e"
		}
		else
		{
			"\![*]\q[Powrót,OnDressupMenu,%(reference0)]\n\![*]\q[Zamknij,Cancel]\e"
		}
	}
	else //English
	{
		if reference0 == ""
		{
			"\![*]\q[Back to Menu,OnMenuRun]\n\![*]\q[Close,Cancel]\e"
		}
		elseif reference1 == ""
		{
			if ARRAYSIZE(dressupcharacters) == 1; "\![*]\q[Back to Menu,OnMenuRun]"
			else; "\![*]\q[Back,OnDressupMenu]"
			--
			"\n\![*]\q[Close,Cancel]\e"
		}
		else
		{
			"\![*]\q[Back,OnDressupMenu,%(reference0)]\n\![*]\q[Close,Cancel]\e"
		}
	}
}

OnChangeDesign
{
	"\0\_q\![bind,%(reference1),%(reference2)] \![raise,OnDressupMenu,%(reference0),%(reference1)]"
}

OnRandomDressup
{
	_command = ""
	foreach currentdressups; _dressup //Gets the data for all current dressups and removes them
	{
		if _dressup[0,"|"] != TOSTR(reference0); continue
		_category = _dressup[1,"|"]
		_name = _dressup[2,"|"]
		_command += "\![bind,%(_category),%(_name),0]"
	}
	"\p[%(reference0)]%(_command)\![done    removing]" //removes all current dressups
	--
	_currentcategories = IARRAY
	foreach availabledressups; _dressup //For every dressup that the ghost has - This breaks up the big list of all the dressups into categories
	{
		if _dressup[0,"|"] != TOSTR(reference0); continue
		_category = _dressup[1,"|"] //Gather the name and category of the current dressup
		_name = _dressup[2,"|"]
		
		_index = ASUB("%(_category)|",_currentcategories)
		if _index == -1 //If the user is not in a submenu AND we haven't logged this category yet
		{
			_adding = _category + "|"
			if _dressup[3,"|"] == "mustselect" || _dressup[4,"|"] == "mustselect"; _adding += "!-!mustselect!-!" + "|" //Add the category to a list
			if _dressup[3,"|"] == "multiple" || _dressup[4,"|"] == "multiple"; _adding += "!-!multiple!-!" + "|" //Add the category to a list
			_adding += _name
			_currentcategories ,= _adding
			
		}
		else
		{
			_currentcategories[_index] += "|" + _name
		}
		
	}
	--
	_command = ""
	_skipchance = 3
	foreach _currentcategories; _category //Picks a random dressup from every category
	{
		_temp = REPLACE(_category,"|",",") //Changes to comma delimiter
		_temp = SPLIT(_temp,",") //Makes _temp into a general purpose array
		_currentctg = _temp[0] //Gets the name of the category
		
		_loops = 1 //Always do the loop at least once, I suppose this is what a do-while loop is for haha
		_multiple = 0
		_mustselect = 0
		
		if _temp[1] == "!-!multiple!-!" || _temp[2] == "!-!multiple!-!" //If it's a multiple option, mark it as such and up the number of loops to be 1 for every dressup available
		{
			_multicheck = 1
			_loops = ARRAYSIZE(_temp) - 2
		}
		if _temp[1] == "!-!mustselect!-!" || _temp[2] == "!-!mustselect!-!" //If it's a mustselect, mark it as such. If it's also a multiple, reduce the number of times the loop is run, because this is taking up a slot of the array and we don't want to count it
		{
			_mustselect = 1
			if _multicheck == 1; _loops--
		}
		
		if _temp[2] == "!-!mustselect!-!" || _temp[2] == "!-!multiple!-!" ; _temp[2] = IARRAY //Erase these flags if they're present
		if _temp[1] == "!-!mustselect!-!" || _temp[1] == "!-!multiple!-!" ; _temp[1] = IARRAY
		_temp[0] = IARRAY //Erase the category name
		
		for _i = 0; _i < _loops; _i++ //Run the loop as determined above
		{
			if RAND(_skipchance) != 0 //If it decides it should skip
			{
				if _i == 0 //If it's at the start of the category, skip the whole category
				{
					if _mustselect == 0; break
				}
				else //Otherwise, skip just this one
				{
					continue
				}
			}
			
			toadd = ANY(_temp) //If it doesn't skip, set toadd to any dressup on the array
			_num = LSO //LSO is a function that gets the element number ANY chose
			_temp[_num] = IARRAY //Erase the dressup that was chosen
			
			if toadd == ""; continue //If it's empty, skip
			_command += "\![bind,%(_currentctg),%(toadd),1]" //Otherwise, add to the command
		}
	}
	"%(_command)"
	--
	ERASEVAR('toadd')
	"%(bb) \![raise,OnDressupMenu,%(reference0)]"
}

OnNotifyDressupInfo
{
	availabledressups = IARRAY //This one is to display the dressup menu
	currentdressups = IARRAY //This one is so we can display which dressups are currently in use
	dressupcharacters = IARRAY //A list of all the characters with dressups available
	
	foreach reference; _dressup //if you just write reference, you get all the references, apparently? Which is super useful
	{
		//Ok, so here's the deal. When it lists the dressups, the amount of options that can be specified _varies._ It can be empty, 1, 2, or 3. To the best of my knowledge. SO. This inner loop starts at 3 (because elements 0 1 and 2 are static), checks to see if the next element has a keyword, and skips it if it does. Then when it finds the on/off indicator, it breaks the loop. IT DIDNT HAVE TO BE THIS WAY.
		_onoff = 0
		_must = 0
		_mult = 0
		for _i = 3; _i < ARRAYSIZE(_dressup); _i++
		{
			if _dressup[_i] == "default" || _dressup[_i] == ""; continue
			elseif _dressup[_i] == "mustselect" {_must = 1; continue}
			elseif _dressup[_i] == "multiple" {_mult = 1; continue}
			else; _onoff = _dressup[_i]; break
		}
		_toadd = _dressup[0] + "|" + _dressup[1] + "|" + _dressup[2]
		if _must == 1; _toadd += "|mustselect"
		if _mult == 1; _toadd += "|multiple"
		availabledressups ,= _toadd
		if _onoff == 1; currentdressups ,= _dressup[0] + "|" + _dressup[1] + "|" + _dressup[2]
		
		if ASEARCH(_dressup[0],dressupcharacters) == -1; dressupcharacters ,= _dressup[0]
	}
}

ASUB //ASEARCH but for substrings
{
	_array = _argv //Takes in all the elements of the array
	_array[0] = IARRAY //erases _argv[0] since that's the string we're searching for
	for _i = 0; _i < ARRAYSIZE(_array); _i++
	{
		if _argv[0] _in_ _array[_i]
		{
			_i
			return
		}
	}
	-1
}



OnTestVar
{
	//_f = FRENAME("/../../converted_shells/ralseifleleshell - Copy.nar","/../../converted_shells/ralseifleleshell - Copy.zip")
	//_i = FUNCTIONEX("zarc.dll","unzip","../../converted_shells/ralseifleleshell.zip","../../converted_shells/it_works_omg/")
	//_i = FUNCTIONEX("zarc.dll","zip","../../converted_shells/IT_WORKS_OMG.zip","../../converted_shells/it_works_omg")
	//_i = FUNCTIONEX("zarc.dll","zip","../../IT_WORKS_OMG.zip","../../shell/master/surfacetable.txt")
	//_i
}