AiTalk
{
	if talkoption[0] == 0 || (talkoption[0] == 1 && NowPlaying[0] != "") || (talkoption[0] == 2 && NowPlaying[0] == "") || reference0 == "Hotkey" || reference0 == "Menu"
	{
		if mikireflag == 0
		{
			if CHAIN.IDName == ""
			{
				lastTalk = RandomTalk
			}
			else
			{
				lastTalk = ChainTalk
			}
		}
		else
		{ 
			lastTalk = MikireTalk
		}
		--
		lastTalk
	}
}

//nonoverlap means that all possible dialogue candidates will be chosen at least once before any dialogues are repeated. Note that anything within brackets counts as a single dialogue candidate! This causes the probability issues mentioned in the YAYA tips file, and also, if you separate your RandomTalk into different modes or something, you'll have to make them separate functions if you still want to use nonoverlap!
RandomTalk
{
	
	if ISFUNC("Custom_RandomTalk")
	{
		if SHIORI3FW.BalloonName == "Notes"; "%(b)"
		--
		Custom_RandomTalk
	}
}

//-----------Timekeeping systems and related dialogue-----------

OnMinuteChange
{
	if minute == 0 //Top of the hour notifications
	{
		if language == "Placeholder" //TRANSLATORS: Top of the hour notifications
		{
			
		}
		else //English
		{
			if hour == 0
			{
				AutoUpdates[1] = 0
				if day == 1 && month == 1
				{
					if ISFUNC("Custom_NewYear"); Custom_NewYear
					else; "\0%(bb)[Happy new year!]\e"
				}
				else
				{
					"\0%(bb)[It's midnight.]\e"
				}
			}
			elseif hour == 12
			{
				"\0%(bb)[It's noon.]\e"
			}
			else
			{
				"\0%(bb)[It's %(hour12) o'clock.]\e"
			}
		}
	}
	elseif mikireflag == 1 //If the ghost is off the screen, it will run the off screen dialogue every minute
 	{
 		MikireTalk
	}
	--
	if AutoUpdates[0] == 1 && AutoUpdates[1] == 0 //Once a day the ghost will check for updates if the user has auto updates on
	{
		AutoUpdates[1] = 1
		"\![updatebymyself,checkonly]"
	}
	
}

OnSecondChange
{
	if runtime[2] >= 59
	{
		runtime[2] = 0
		runtime[1]++
		if runtime[1] >= 59
		{
			runtime[1] = 0
			runtime[0]++
			totalhours++
		}
	}
	else
	{
		runtime[2]++
	}
	if NowPlaying[0] != "" && NowPlaying[2] == ""
	{
		if playtime[2] >= 59
	{
		playtime[2] = 0
		playtime[1]++
		if playtime[1] >= 59
		{
			playtime[1] = 0
			playtime[0]++
		}
	}
	else
	{
		playtime[2]++
	}
	}
	if InstalledShellName != "" //If the user installed a shell that's supposed to be only FLELE compatible
	{
		"\0\s[0]\*[Successfully installed '%(InstalledShellName)'.]\n\n"
		--
		"\![*]\q[Change to %(InstalledShellName),OnChangeToShell,%(InstalledShellName)]\n\n/
		\![*]\q[Close,OnCancel]\![raise,OnDialogueVars,InstalledNewShell]\e"
		ERASEVAR("DraggedFile")
	}
	elseif mikireflag == 0 && reference1 == 1 //Dialogue for putting them off the screen. You could make this a unique line if you wanted, and have MikireTalk be for if they continue to be offscreen
	{
		MikireTalk
	}
	elseif mikireflag == 1 && reference1 == 0 //Dialogue for coming back on the screen
	{
		EndMikireTalk
	}
	elseif reference2 == 1 //This is for if your Sakura and Kero are overlapping. \4 will move the speaking character away from the other character.
	{
		
	}
	elseif ARRAYSIZE(waitingcommuS) > 0 && second % 5 == 0 //Every 5 seconds, check if the balloon is closed and a communication is waiting, and if so trigger a response
	{
		_b = BalloonCheck
		if _b == 0; WaitingCommu
	}
	mikireflag = reference1 //reference1 is if the ghost is offscreen or not
}

MikireTalk //Off the screen dialogue. Ctrl Shift F12 will bring characters back onto the screen
{
	if language == "Placeholder" //TRANSLATORS: If FLUX is off screen
	{
		
	}
	else //English
	{
		"\0%(bb)[FLUX player is off screen.\w8\w8 You can bring it back with Ctrl-Shift-F12.]\e"
	}
}

EndMikireTalk //Being brought back on the screen.
{
	if language == "Placeholder" //TRANSLATORS: Bringing FLUX back on screen
	{
		
	}
	else //English
	{
		"\0%(bb)[FLUX player is back on screen.]\e"
	}
}

OnSurfaceRestore //OnSurfaceRestore happens around 30 seconds after the ghost's last dialogue. reference0 here stores the number of the previous surface, so you can have them comment when they change back if you like.
{
	if NowPlaying[0] == "" || NowPlaying[2] != "" //If no song is playing
	{
		"%(NonSingingSurfaces)\e"
	}
	else //If a song is playing
	{
		"%(SingingSurfaces)\e"
	}
}

NonSingingSurfaces
{
	if ISFUNC("Custom_NonSingingSurfaces"); Custom_NonSingingSurfaces
	else; "\1\s[-1]\0\s[0]"
}

SingingSurfaces
{
	if ISFUNC("Custom_SingingSurfaces"); Custom_SingingSurfaces
	else; "\1\s[-1]\0\s[25]"
}