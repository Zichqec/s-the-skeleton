OnMusicMenu //Main music menu display; this displays the list of songs and the controls
{
	if MusicSettings[0] == ""; MusicSettings[0] = 100 //Volume
	if MusicSettings[1] == ""; MusicSettings[1] = 100 //Speed
	if MusicSettings[2] == ""; MusicSettings[2] = 0 //Balance
	if MusicSettings[3] == ""; MusicSettings[3] = 0 //Play mode - 0 for loop playlist, 1 for shuffle playlist, 2 for loop song, 3 for play one song
	
	if _argv[0] != "manual" && BalloonCheck; "\C" //only working for hotkeys atm but that's worth it... will try to deal with this later. Ugh.
	--
	//MusicSettings[4] is the 'stop after current' option
	_display = "" //Initialize variables
	//_balloonlines = nowballoon[1] / 2 //This gets what the middle line of the balloon is
	//if NowPlaying[1] < _balloonlines; _display += "\![set,autoscroll,disable]"
	_currentsong = IARRAY
	for _i = 0; _i < ARRAYSIZE(CurrentPlaylist); _i++ //Runs once for every song in the playlist
	{
		_song = CurrentPlaylist[_i]
		_song = SPLITPATH(_song)[2] //Picks out just the name of the file, no extension
		//_song = REPLACE(_song,"%(C_BYTE1)","\,") //Add back in any escape characters
		//_song = REPLACE(_song,"]","\]") //Same as above
		_path = CurrentPlaylist[_i]
		//_path = REPLACE(CurrentPlaylist[_i],"]","\]")
		//if _i - _balloonlines == TOINT(NowPlaying[1]); _display += "\![set,autoscroll,disable]"
		
		_display += "\q[(x),OnRemoveSong,%(_i)] " //Add the (x) button
		//_display += "(\q[^,OnScootSong,%(_i),-]"
		//_display += "\q[v,OnScootSong,%(_i),+]) "
		if _i == NowPlaying[1] //If this is the song that's playing right now
		{
			_display += "\f[bold,1]\f[italic,1]" //Make it bold
			_currentsong[0] = _song //Saves the song name into _currentsong[0]
			_currentsong[1] = CurrentPlaylist[_i] //Saves the song path into _currentsong[1]
		}
		_display += "\_a[OnPlaySong,%(CHR(34))%(_path)%(CHR(34)),%(_i),frommenu]%(_song)\_a\n" //Add song to list
		if _i == NowPlaying[1]; _display += "\f[default]" //Reset the bold if it was applied
	}
	
	_removed = ""
	if language == "Placeholder" //TRANSLATORS: This label is for the now playing display, if the song the user is currently listening to has been removed from the playlist
	{
		_removed = ""
	}
	elseif language == "Deutsch"
	{
		_removed = "(Aus Playliste entfernt)"
	}
	elseif language == "Русский"
	{
		_removed = "(Удалено из плейлиста)"
	}
	elseif language == "Français"
	{
		_removed = "(Supprimé de la playlist)"
	}
	elseif language == "Polski"
	{
		_removed = "(Usunięto z listy odtwarzania)"
	}
	else //English
	{
		_removed = "(Removed from playlist)"
	}
	
	if _currentsong[0] == ""; {_currentsong[0] = _removed; _currentsong[1] = NowPlaying[0]} //,"]","\]")}
	--
	if ARRAYSIZE(CurrentPlaylist) > 12; "\0%(bbb)"
	else; "\0%(bb)"
	--
	"\_q\*\![set,autoscroll,disable]\c"
	--
	//TRANSLATORS: These are the buttons at the top of the music player menu. There are also some buttons at the bottom
	if language == "Placeholder"
	{
		
	}
	elseif language == "Deutsch"
	{
		"\![*]\q[Zurück,OnMenuRun]  \![*]\q[Fenster schließen,script: \e]\n"
		--
		"\![*]\q[Einstellungen und Info,OnMusicSettings]  \![*]\q[Lieder bewegen,OnScootSongMenu]\n\n[half]"
	}
	elseif language == "Русский"
	{
		"\![*]\q[Назад,OnMenuRun]  \![*]\q[Закрыть,script: \e]\n"
		--
		"\![*]\q[Настройки и Информация,OnMusicSettings]  \![*]\q[Двигаться песни,OnScootSongMenu]\n\n[half]"
	}
	elseif language == "Français"
	{
		"\![*]\q[Retour,OnMenuRun]  \![*]\q[Fermer la fenêtre,script: \e]\n"
		--
		"\![*]\q[Paramètres et Infos,OnMusicSettings]  \![*]\q[Déplacer des musiques,OnScootSongMenu]\n\n[half]"
	}
	elseif language == "Polski"
	{
		"\![*]\q[Powrót,OnMenuRun]  \![*]\q[Zamknij,script: \e]\n"
		--
		"\![*]\q[Ustawienia i informacje,OnMusicSettings]  \![*]\q[Przenieś utwory,OnScootSongMenu]\n\n[half]"
	}
	else //English
	{
		"\![*]\q[Back,OnMenuRun]  \![*]\q[Close window,script: \e]\n"
		--
		"\![*]\q[Settings and Info,OnMusicSettings]  \![*]\q[Move songs,OnScootSongMenu]\n\n[half]"
	}
	--
	if NowPlaying[0] == "" //TRANSLATORS: This is if no song is loaded in. The text will be grayed out until a song is chosen. _g can be used to make the text gray and _d will put it back to default
	{
		_g = "\f[color,150,150,150]"
		_d = "\f[default]"
		if language == "Placeholder"
		{
			
		}
		elseif language == "Deutsch"
		{
			"%(_g)<<<   \![*]Pause       %(_d)\![*]\q[Start,OnPlaySong,,,playbutton,1]    %(_g)>>>%(_d)\n\n[half]"
		}
		elseif language == "Русский"
		{
			"%(_g)<<<   \![*]Пауза       %(_d)\![*]\q[Играть,OnPlaySong,,,playbutton,1]    %(_g)>>>%(_d)\n\n[half]"
		}
		elseif language == "Français"
		{
			"%(_g)<<<   \![*]Pause       %(_d)\![*]\q[Lire,OnPlaySong,,,playbutton,1]    %(_g)>>>%(_d)\n\n[half]"
		}
		elseif language == "Polski"
		{
			"%(_g)<<<   \![*]Pauza       %(_d)\![*]\q[Graj,OnPlaySong,,,playbutton,1]    %(_g)>>>%(_d)\n\n[half]"
		}
		else //English
		{
			"%(_g)<<<   \![*]Pause       %(_d)\![*]\q[Play,OnPlaySong,,,playbutton,1]    %(_g)>>>%(_d)\n\n[half]"
		}
	}
	else //TRANSLATORS: This else is if a song is loaded. The pause button will change to say resume if a song is currently paused.
	{
		if language == "Placeholder"
		{
			
		}
		elseif language == "Deutsch"
		{
			"\q[<<<,OnPrevSong]   "
			--
			if NowPlaying[2] != ""; "\![*]\q[Fortsetzen,OnPauseSong,resume,menu]"
			else; "\![*]\q[Pause,OnPauseSong,pause,menu]   "
			--
			"    \![*]\q[Stop,OnStopSong]    \q[>>>,OnNextSong]\n\n[half]"
		}
		elseif language == "Русский"
		{
			"\q[<<<,OnPrevSong]   "
			--
			if NowPlaying[2] != ""; "\![*]\q[Возобновлять,OnPauseSong,resume,menu]"
			else; "\![*]\q[Пауза,OnPauseSong,pause,menu]   "
			--
			"    \![*]\q[Стоп,OnStopSong]    \q[>>>,OnNextSong]\n\n[half]"
		}
		elseif language == "Français"
		{
			"\q[<<<,OnPrevSong]   "
			--
			if NowPlaying[2] != ""; "\![*]\q[Reprendre,OnPauseSong,resume,menu]"
			else; "\![*]\q[Pause,OnPauseSong,pause,menu]   "
			--
			"    \![*]\q[Stop,OnStopSong]    \q[>>>,OnNextSong]\n\n[half]"
		}
		elseif language == "Polski"
		{
			"\q[<<<,OnPrevSong]   "
			--
			if NowPlaying[2] != ""; "\![*]\q[Wznów,OnPauseSong,resume,menu]"
			else; "\![*]\q[Pauza,OnPauseSong,pause,menu]   "
			--
			"    \![*]\q[Zatrzymaj,OnStopSong]    \q[>>>,OnNextSong]\n\n[half]"
		}
		else
		{
			"\q[<<<,OnPrevSong]   "
			--
			if NowPlaying[2] != ""; "\![*]\q[Resume,OnPauseSong,resume,menu]"
			else; "\![*]\q[Pause,OnPauseSong,pause,menu]   "
			--
			"    \![*]\q[Stop,OnStopSong]    \q[>>>,OnNextSong]\n\n[half]"
		}
	}
	--
	if language == "Placeholder" //TRANSLATORS: The currently playing song display. _currentsong[0] is the title of the song that should be displayed, _currentsong[1] needs to be in the anchor
	{
		
	}
	elseif language == "Deutsch"
	{
		"Jetzt läuft:"
	}
	elseif language == "Русский"
	{
		"Сейчас играет:"
	}
	elseif language == "Français"
	{
		"Actuellement jouée :"
	}
	elseif language == "Polski"
	{
		"Teraz gra:"
	}
	else //English
	{
		"Now playing:"
	}
	--
	if NowPlaying[0] != ""; " \_a[OnSongLocation,%(CHR(34))%(_currentsong[1])%(CHR(34))]%(_currentsong[0])\_a\f[default]"
	--
	"\n\n[half]%(_display)\n"
	--
	if language == "Placeholder" //TRANSLATORS: These buttons are the same as at the top of the music menu, but it's just the first two.
	{
		
	}
	elseif language == "Deutsch"
	{
		"\![*]\q[Zurück,OnMenuRun]  \![*]\q[Fenster schließen,script: \e]"
	}
	elseif language == "Русский"
	{
		"\![*]\q[Назад,OnMenuRun]  \![*]\q[Закрыть Окно,script: \e]"
	}
	elseif language == "Français"
	{
		"\![*]\q[Retour,OnMenuRun]  \![*]\q[Fermer la fenêtre,script: \e]"
	}
	elseif language == "Polski"
	{
		"\![*]\q[Powrót,OnMenuRun]  \![*]\q[Zamknij,script: \e]"
	}
	else //English
	{
		"\![*]\q[Back,OnMenuRun]  \![*]\q[Close window,script: \e]"
	}
	--
	"\e music player main menu" //This line does not need translated! This is so FLUX can tell if the user is currently in the menu
}

OnPlaySong //Function that actually plays the songs, nothing needs translated in here
{
	_old = NowPlaying
	NowPlaying[2] = "" //Clearing the paused song if there was one
	if MusicSettings[0] == ""; MusicSettings[0] = 100 //Volume
	if MusicSettings[1] == ""; MusicSettings[1] = 100 //Speed
	if MusicSettings[2] == ""; MusicSettings[2] = 0 //Balance
	if MusicSettings[3] == ""; MusicSettings[3] = 0 //Play mode
	if MusicSettings[4] != ""; MusicSettings[4] = "" //Reset 'stop after current' setting
	
	if IsMinimized //If it's minimized, set the reference values needed to the info sent from the arguments
	{
		reference0 = _argv[0]
		reference1 = _argv[1]
	}
	
	if ARRAYSIZE(CurrentPlaylist) > 0
	{
		if NowPlaying[0] == "" && (reference2 == "hotspot" || reference2 == "hotkey" || reference2 == "playbutton") //If no song was playing and this is coming from the hotspot or hotkey or menu
		{
			if TOINT(NowPlaying[1]) == -1
			{
				if MusicSettings[3] == 1 //If it's set to shuffle
				{
					ShuffledPlaylist = ShufflePlaylist(RAND(ARRAYSIZE(CurrentPlaylist)),CurrentPlaylist)
					NowPlaying[1] = TOINT(ShuffledPlaylist[0])
				}
				else //If it's not shuffling
				{
					NowPlaying[1] = 0
				}
			}
			reference1 = TOINT(NowPlaying[1])
			reference0 = CurrentPlaylist[reference1]
		}

		NowPlaying[0] = reference0 //Name of the current song
		if reference1 == "justadded"; NowPlaying[1] = ARRAYSIZE(CurrentPlaylist) - 1 //Position of the current song
		else; NowPlaying[1] = TOINT(reference1) //Position of the current song
		
		if reference2 == "frommenu" //If the user started a new song manually, shuffle the shuffled playlist again
		{
			ShuffledPlaylist = ShufflePlaylist(NowPlaying[1],CurrentPlaylist)
		}
		//if TOSTR(reference3) == "1"; 
		"\C\_l[0,0]" //If the balloon is currently open, keep it open
		--
		UpdateTooltips
		--
		//if _old[0] == "" || _old[2] != ""; "%(SingingSurfaces)" //TODO this is where that bug with the next/prev buttons starting music not playing singing animations probably is. Maybe want to fix by not letting next/prev start a song??? Dunno, that feels wrong
		//????? They??? Already can't start a song???? I have........ no idea. Really weird. Marking this as fixed but I will keep an eye out in case it comes up again.
		"%(SingingSurfaces)" //Idk why I was using the other system... This works fine????? Maybe I added stuff to it idk
		--
		_send = ""
		_send += "%(OnNotifySongInfo)" //Start the singing animations if they weren't already started
		--
		_send += "\![sound,stop]" //Stop anything that might be playing
		--
		_path = reference0
		//_path = REPLACE(reference0,"%(C_BYTE1)","\,")
		//_path = REPLACE(_path,"]","\]")
		
		_send += "\![sound,play,%(CHR(34))%(_path)%(CHR(34)),--volume=%(MusicSettings[0]),--rate=%(MusicSettings[1]),--balance=%(MusicSettings[2]),--sound-only=true]" //Play new song
		
		LOGGING("====================================================================")
		LOGGING("====================================================================")
		LOGGING("====================================================================")
		if IsMinimized
		{
			LOGGING("Sent with ValueNotify")
			SHIORI3FW.MakeValueNotify(_send)
		}
		else
		{
			LOGGING("Sent normally")
			_send
		}
	}
	else
	{
		_menu = ""
		if "music player main menu" _in_ SHIORI3FW.LastTalk; _menu = "music player main menu"
		elseif "FLUX main menu" _in_ SHIORI3FW.LastTalk; _menu = "FLUX main menu"
		elseif "__Music_Settings_Menu__" _in_ SHIORI3FW.LastTalk; _menu = "settingsmenu"
		
		"\![raise,OnStopSong,nosong,%(_menu)]\e"
	}
	--
	if reference2 == "frommenu" || reference2 == "nextprev" || reference4 == "menuopen" || reference2 == "playbutton"; "\![raise,OnMusicMenu]" //If music menu is already open, reopen it so that it highlights the correct song properly
	elseif reference4 == "mainmenu"; "\![raise,OnMenuRun]"
	elseif reference4 == "settingsmenu"; "\![raise,OnMusicSettings]"
	--
	"\e"
}

OnStopSong //Stopping a song
{
	NowPlaying[0] = "" //song name
	//NowPlaying[1] = -1 //song position
	NowPlaying[2] = "" //Clearing paused song
	
	_b = BalloonCheck
	_m = MenuCheck
	if _m == 1 && _b == 1; "\C\![sound,stop]"
	else; "\![sound,stop]"
	--
	"%(NonSingingSurfaces)%(OnNotifySongInfo)%(UpdateTooltips)" //Stop the singing animations
	--
	if reference0 == "reload"
	{
		""
	}
	elseif "music player main menu" _in_ SHIORI3FW.LastTalk || reference1 == "music player main menu"
	{
		"\![raise,OnMusicMenu]"
	}
	elseif "FLUX main menu" _in_ SHIORI3FW.LastTalk || reference1 == "FLUX main menu"
	{
		"\![raise,OnMenuRun]"
	}
	elseif "__Music_Settings_Menu__" _in_ SHIORI3FW.LastTalk || reference1 == "settingsmenu"
	{
		"\![raise,OnMusicSettings]"
	}
	else
	{
		"\e"
	}
}

OnPauseSong //Pausing or unpausing a song
{
	if (reference2 == "hotkey" || reference2 == "hotspot") && TOSTR(reference3) == "1" || reference1 == "menu"; "\C" //If this was from the hotkey and the balloon is open, keep it open
	--
	if reference0 == "resume" //Unpausing
	{
		//_resume = REPLACE(NowPlaying[2],"%(C_BYTE1)","\,")
		//_resume = REPLACE(_resume,"]","\]")
		NowPlaying[2] = ""
		"%(SingingSurfaces)\![sound,resume]" //,%(CHR(34))%(_resume)%(CHR(34))]"
		//Poor translation on Ukadoc, don't need song name here
	}
	else //Pausing
	{
		NowPlaying[2] = NowPlaying[0] //Store the song in NowPlaying[2] to show it's paused
		//_pause = REPLACE(NowPlaying[2],"%(C_BYTE1)","\,")
		//_pause = REPLACE(_pause,"]","\]")
		"%(NonSingingSurfaces)\![sound,pause]" //",%(CHR(34))%(_pause)%(CHR(34))]"
	}
	--
	"%(OnNotifySongInfo)%(UpdateTooltips)"
	--
	if reference2 == "hotkey" || reference2 == "hotspot" //If this was done via the hotkey
	{
		if reference4 == "menuopen" //If the music menu was open, call it again so it updates
		{
			"\![raise,OnMusicMenu]"
		}
		elseif reference4 == "mainmenu"
		{
			"\![raise,OnMenuRun]"
		}
	}
	elseif reference1 == "menu" //If this was done via the menu, call it again so it updates
	{
		"\![raise,OnMusicMenu]"
	}
}

OnNextSong //The user pressed a hotkey or menu option to go to the next song
{
	_debug = ""
	NowPlaying[2] = ""
	_inmenu = reference4 //If the music menu was open
	_from = "nextprev" //Sent to OnPlaySong
	_m = MenuCheck
	if _m; "\C"
	//if reference2 == "hotkey" {_from = "hotkey"; if _m == 1; {"\C"}}
	//elseif reference2 == "hotspot" {_from = "hotspot"; if _m == 1; {"\C"}}
	_b = BalloonCheck
	--
	_next = 0
	--
	"\![sound,stop]"
	--
	if ARRAYSIZE(CurrentPlaylist) > 0
	{
		if MusicSettings[3] == 1
		{
			ShuffledPlaylist = ACYCLE('+',ShuffledPlaylist)
			_next = ShuffledPlaylist[0]
		}
		else //Looping the list normally
		{
			if TOINT(NowPlaying[1]) >= (ARRAYSIZE(CurrentPlaylist) - 1) //If this was the last song on the list
			{
				_next = 0
				_debug = "to beginning"
			}
			else //If there are more songs to go
			{
				_next = TOINT(NowPlaying[1]) + 1
				_debug = "forward"
			}
		}
		NowPlaying[0] = CurrentPlaylist[_next] //song name
		NowPlaying[1] = TOINT(_next) //song position
		--
		"\![raise,OnPlaySong,%(CHR(34))%(CurrentPlaylist[_next])%(CHR(34)),%(_next),%(_from),%(_b),%(_inmenu)]\e %(_debug)"
	}
	else
	{
		_menu = ""
		if "music player main menu" _in_ SHIORI3FW.LastTalk; _menu = "music player main menu"
		elseif "FLUX main menu" _in_ SHIORI3FW.LastTalk; _menu = "FLUX main menu"
		elseif "__Music_Settings_Menu__" _in_ SHIORI3FW.LastTalk; _menu = "settingsmenu"
		
		"\![raise,OnStopSong,nosong,%(_menu)]\e"
	}
	--
	"%(_flickerprevention)"
}

OnPrevSong //The user pressed a hotkey or menu option to go to the previous song
{
	NowPlaying[2] = ""
	_inmenu = reference4 //If the music menu was open
	_from = "nextprev" //Sent to OnPlaySong
	if MenuCheck; "\C"
	//if reference2 == "hotkey" {_from = "hotkey"; "\C"}
	_b = BalloonCheck
	--
	
	_next = 0
	--
	"\![sound,stop]"
	--
	if ARRAYSIZE(CurrentPlaylist) > 0
	{
		if MusicSettings[3] == 1
		{
			ShuffledPlaylist = ACYCLE('-',ShuffledPlaylist)
			_next = ShuffledPlaylist[0]
		}
		else //Looping the list normally
		{
			if TOINT(NowPlaying[1]) <= 0 //If this was the last song on the list
			{
				_next = ARRAYSIZE(CurrentPlaylist) - 1
			}
			else //If there are more songs to go
			{
				_next = TOINT(NowPlaying[1]) - 1
			}
		}
		NowPlaying[0] = CurrentPlaylist[_next] //song name
		NowPlaying[1] = TOINT(_next) //song position
		--
		"\![raise,OnPlaySong,%(CHR(34))%(CurrentPlaylist[_next])%(CHR(34)),%(_next),%(_from),%(_b),%(_inmenu)]\e"
	}
	else
	{
		_menu = ""
		if "music player main menu" _in_ SHIORI3FW.LastTalk; _menu = "music player main menu"
		elseif "FLUX main menu" _in_ SHIORI3FW.LastTalk; _menu = "FLUX main menu"
		elseif "__Music_Settings_Menu__" _in_ SHIORI3FW.LastTalk; _menu = "settingsmenu"
		
		"\![raise,OnStopSong,nosong,%(_menu)]\e"
	}
	--
	"%(_flickerprevention)"
}

OnRemoveSong //Removing a song from the current playlist
{
	//if CurrentPlaylist[reference0] == NowPlaying[2]; NowPlaying[2] = "" //If the song being removed was the paused song, clear it
	if NowPlaying[2] != "" && reference0 == NowPlaying[1]; NowPlaying[2] = "" //If the song being removed was the paused song, clear it
	
	CurrentPlaylist[reference0] = IARRAY //Clear the song that we want to remove
	if reference0 < TOINT(NowPlaying[1]); NowPlaying[1] = TOINT(NowPlaying[1]) - 1
	elseif reference0 == TOINT(NowPlaying[1]); NowPlaying[1] = -1
	if NowPlaying[0] == CurrentPlaylist[reference0] //If the song being removed is being played, remove it from the shuffle list
	{
		ShuffledPlaylist = ShufflePlaylist('|removed|',CurrentPlaylist) //Send a placeholder for the song that was already removed, and shuffle the playlist
	}
	else //If another song is playing
	{
		ShuffledPlaylist = ShufflePlaylist(NowPlaying[1],CurrentPlaylist) //Shuffle with the current song as 1
	}
	--
	"%(OnNotifySongInfo)\![raise,OnMusicMenu]"
}

OnScootSongMenu
{
	_g = "\f[color,150,150,150]"
	_d = "\f[default]"
	_display = "" //Initialize variables
	_currentsong = IARRAY
	for _i = 0; _i < ARRAYSIZE(CurrentPlaylist); _i++ //Runs once for every song in the playlist
	{
		_song = CurrentPlaylist[_i]
		_song = SPLITPATH(_song)[2] //Picks out just the name of the file, no extension
		//_display += "\q[(x),OnRemoveSong,%(_i)]" //Add the (x) button
		if !(_i == 0)
		{
			_display += "\q[▲▲,OnMoveSong,%(_i),Top]  "
			_display += "\f[bold,1]\q[△,OnScootSong,%(_i),-]\f[bold,default] "
		}
		else
		{
			_display += "%(_g)"
			_display += "▲▲  "
			_display += "\f[bold,1]△\f[bold,default] "
			_display += "%(_d)"
		}
		
		if _i == NowPlaying[1] //If this is the song that's playing right now
		{
			_display += "\f[bold,1]" //Make it bold
			_currentsong[0] = _song //Saves the song name into _currentsong[0]
			_currentsong[1] = CurrentPlaylist[_i] //Saves the song path into _currentsong[1]
		}
		_display += "\_a[OnBlank]%(SHIORI3FW.MakeShortText(_song,28))\_a " //Add song to list
		if _i == NowPlaying[1]; _display += "\f[default]" //Reset the bold if it was applied
		if SHIORI3FW.BalloonName == "Notes"; _display += "\_l[240]"
		if !(_i == (ARRAYSIZE(CurrentPlaylist) - 1))
		{
			_display += "\f[bold,1]\q[▽,OnScootSong,%(_i),+]\f[bold,default]  "
			_display += "\q[▼▼,OnMoveSong,%(_i),End]\n"
		}
		else
		{
			_display += "%(_g)"
			_display += "\f[bold,1]▽\f[bold,default]  "
			_display += "▼▼\n"
			_display += "%(_d)"
		}
	}
	if reference0 == "moved"; "\C\![lock,balloonrepaint]\c"
	--
	if ARRAYSIZE(CurrentPlaylist) > 12; "\0%(bbb)"
	else; "\0%(bb)"
	--
	"\_q\![set,autoscroll,disable]\*"
	--
	_button = ""
	if language == "Placeholder"; _button = "" //TRANSLATORS: Back button for the menu where you can move songs in the playlist. This will be used both above and below the list
	elseif language == "Deutsch"; _button = "Zurück"
	elseif language == "Русский"; _button = "Назад"
	elseif language == "Français"; _button = "Retour"
	elseif language == "Polski"; _button = "Powrót"
	else; _button = "Back" //English

	"\![*]\q[%(_button),OnMusicMenu]\n\n"
	--
	"%(_display)\n\n"
	--
	"\![*]\q[%(_button),OnMusicMenu]\![unlock,balloonrepaint]\e"
}

OnMoveSong
{
	_temp = CurrentPlaylist[reference0]
	if reference1 == "Top"
	{
		_temparray = CurrentPlaylist
		_temparray[reference0] = IARRAY
		CurrentPlaylist = IARRAY
		CurrentPlaylist ,= _temp
		foreach _temparray; _song
		{
			CurrentPlaylist ,= _song
		}
		if reference0 == NowPlaying[1]
		{
			NowPlaying[1] = 0
		}
		else
		{
			NowPlaying[1] = TOINT(NowPlaying[1]) + 1
		}
	}
	else //End
	{
		CurrentPlaylist[reference0] = IARRAY
		CurrentPlaylist ,= _temp
		if reference0 == NowPlaying[1]
		{
			NowPlaying[1] = TOINT(ARRAYSIZE(CurrentPlaylist)) - 1
		}
		else
		{
			NowPlaying[1] = TOINT(NowPlaying[1]) - 1
		}
	}
	ShuffledPlaylist = ShufflePlaylist(NowPlaying[1],CurrentPlaylist)
	--
	"\C\![raise,OnScootSongMenu,moved]"
}

OnScootSong //Moving a song in the playlist
{
	CurrentPlaylist = ASCOOTEX(TOINT(reference0),reference1,CurrentPlaylist)
	if reference0 == NowPlaying[1]
	{
		if reference1 == "+"
		{
			NowPlaying[1] = TOINT(NowPlaying[1]) + 1
		}
		else //-
		{
			NowPlaying[1] = TOINT(NowPlaying[1]) - 1
		}
	}
	elseif (reference0 + 1) == NowPlaying[1] && reference1 == "+"
	{
		NowPlaying[1] = TOINT(NowPlaying[1]) - 1
	}
	elseif (reference0 - 1) == NowPlaying[1] && reference1 == "-"
	{
		NowPlaying[1] = TOINT(NowPlaying[1]) + 1
	}
	
	ShuffledPlaylist = ShufflePlaylist(NowPlaying[1],CurrentPlaylist)
	--
	"\C\![raise,OnScootSongMenu,moved]"
}

OnSongLocation
{
	_path = SPLITPATH(reference0)[0] + SPLITPATH(reference0)[1]
	_path = ERASE(_path,STRLEN(_path) - 1,1) //Erases the last \
	
	"\![open,file,%(_path)]\![raise,OnMusicMenu]"
}

OnSoundStop //When a song ends on its own
{
	LOGGING("====================================================================")
	LOGGING("OnSoundStop")
	if MusicSettings[5] == 1
	{
		LOGGING("===============SHELL IS BEING CHANGED, RESUMING AFTERWARDS...")
		MusicSettings[5] = 2
		return
	}
	_inmenu = ""
	if "music player main menu" _in_ SHIORI3FW.LastTalk; _inmenu = "menuopen" //Check if menu is open
	elseif "FLUX main menu" _in_ SHIORI3FW.LastTalk; _inmenu = "mainmenu"
	elseif "__Music_Settings_Menu__" _in_ SHIORI3FW.LastTalk; _inmenu = "settingsmenu"
	NowPlaying[2] = "" //Clear paused song if there somehow was one
	_b = BalloonCheck; if _b == 1; "\C\_l[0,0]"
	--
	if MusicSettings[3] == 3  //If it's set to play one song and then stop
	{
		NowPlaying[0] = "" //song name
		//NowPlaying[1] = -1 //song position
		MusicSettings[4] = IARRAY
		--
		"%(NonSingingSurfaces)\e"
	}
	else //If another song needs to play
	{
		_next = 0
		--
		if MusicSettings[3] == 1 //Shuffle and loop
		{
			ShuffledPlaylist = ACYCLE('+',ShuffledPlaylist)
			_next = ShuffledPlaylist[0]
		}
		elseif MusicSettings[3] == 2 //Loop one song
		{
			_next = TOINT(NowPlaying[1])
		}
		else //Loop playlist
		{
			if TOINT(NowPlaying[1]) >= (ARRAYSIZE(CurrentPlaylist) - 1) //If it was the last song on the list
			{
				_next = 0
			}
			else
			{
				_next = TOINT(NowPlaying[1]) + 1
			}
		}
		NowPlaying[0] = CurrentPlaylist[_next] //Song name
		NowPlaying[1] = TOINT(_next) //Song index
		--
		//If it's set to stop after the current song, make sure it stops. Down here so the index number still advances if you're not set to loop a single song
		if MusicSettings[4] == "stop after playback"
		{
			NowPlaying[0] = "" //song name
			MusicSettings[4] = IARRAY
			--
			"%(UpdateTooltips)"
			--
			"%(NonSingingSurfaces)"
			--
			if _inmenu == "menuopen"; "\![raise,OnMusicMenu]"
			elseif _inmenu == "mainmenu"; "\![raise,OnMenuRun]"
			elseif _inmenu == "settingsmenu"; "\![raise,OnMusicSettings]"
			else; "\e"
		}
		else
		{
			if IsMinimized
			{
				OnPlaySong(CurrentPlaylist[_next],_next)
			}
			else
			{
				"%(SingingSurfaces)\![raise,OnPlaySong,%(CHR(34))%(CurrentPlaylist[_next])%(CHR(34)),%(_next),,%(_b),%(_inmenu)]"
			}
		}
	}
}

OnSoundError
{
	_playnext = 0
	if !(MusicSettings[3] == 2 || MusicSettings[3] == 3 || MusicSettings[4] == "stop after playback" || ARRAYSIZE(CurrentPlaylist) <= 1); _playnext = 1 //If it IS able to play another song
	
	"\0%(b)\f[anchorstyle,none]"
	--
	if _playnext == 0
	{
		NowPlaying[0] = "" //song name
		//NowPlaying[1] = -1 //song position
		NowPlaying[2] = "" //Clearing paused song
	}
	if IsMinimized && !_playnext; SHIORI3FW.MakeValueNotify("%(OnNotifySongInfo)")
	else; "%(OnNotifySongInfo)"
	--
	if ISFUNC("OnCustom_ActionSurfaces") && CustomFuncs[0] == 1; "\![embed,OnCustom_ActionSurfaces,Error]"
	else; "\s[6]"
	--
	if language == "Placeholder" //TRANSLATORS: If a song gives an error, this is the message that will display. I don't know what all the possible error messages can be, and it says it's determined by the sound playback engine, so I'm not going to ask for those to be translated. reference2 here is the file that gave the error, and reference3 is the error message
	{
		
	}
	elseif language == "Deutsch"
	{
		"[Die Datei \_a[OnBlank]\_?%(reference2)\_?\_a konnte nicht abgespielt werden; '%(reference3)']"
		--
		//If it's able to play another song
		if _playnext; "\n\n\w8\w8[Nächstes Lied wird gestartet...]"
	}
	elseif language == "Русский"
	{
		"[Не могу играть файл \_a[OnBlank]\_?%(reference2)\_?\_a; '%(reference3)']"
		--
		//If it's able to play another song
		if _playnext; "\n\n\w8\w8[Начинает следущую песню...]"
	}
	//TODO FRENCH
	elseif language == "Polski"
	{
		"[Nie można odtworzyć pliku \_a[OnBlank]\_?%(reference2)\_?\_a; '%(reference3)']"
		--
		//If it's able to play another song
		if _playnext; "\n\n\w8\w8[Rozpoczynanie następnego utworu...]"
	}
	else //English
	{
		"[Cannot play file \_a[OnBlank]\_?%(reference2)\_?\_a; '%(reference3)']"
		--
		//If it's able to play another song
		if _playnext; "\n\n\w8\w8[Starting next song...]"
	}
	--
	LOGGING("====================================================================")
	LOGGING("_playnext: ",_playnext)
	if _playnext
	{
		"\_w[1000]"
		--
		"\![raise,OnSoundStop]"
	}
}

OnMusicSettings //Settings menu
{
	_mode = TOINT(MusicSettings[3])
	_vol = MusicSettings[0]
	_speed = MusicSettings[1]
	_bal = MusicSettings[2]
	"\C\![lock,balloonrepaint]\c\0\_q\*%(bb)"
	--
	if language == "Placeholder" //TRANSLATORS: this is the settings menu. I'll put notes for each individual block of the english version, for what parts you need to translate
	{
		
	}
	elseif language == "Deutsch"
	{
		if _mode == 1; _mode = "Playlist shuffeln und wiederholen"
		elseif _mode == 2; _mode = "Ein Lied auf Wiederholung spielen"
		elseif _mode == 3; _mode = "Ein einzelnes Lied spielen"
		else; _mode = "Playlist wiederholen"
		
		"/
		Wiedergabemodus:\n \![*]\q[%(_mode),OnPlaybackType]\n\n[half]/
		Lautstärke: \![*]\q[%(_vol),OnMusicSet,Volume]\n/
		Geschwindigkeit: \![*]\q[%(_speed),OnMusicSet,Speed]\n/
		Balance: \![*]\q[%(_bal),OnMusicSet,Balance]\n\n"
		--
		"\q[Wiedergabe nach derzeitigem Lied anhalten,OnStopAfterPlayback]"
		--
		if MusicSettings[4] == "stop after playback"; " \![*]"
		--
		"\n\n/
		\![*]\q[Aktuelle Playlist speichern,OnSavePlaylist]\n/
		\![*]\q[Playlist laden,OnLoadPlaylist]\n/
		\![*]\q[Aktuelle Playlist leeren,OnClearPlaylist]\n\n/
		\![*]\q[Hotkeys ändern,OnHotkeys]\n\n/
		\![*]\q[Wie füge ich ein Lied hinzu?,OnMusicInfo,addsong]\n/
		\![*]\q[Warum erzeugen manche Lieder einen Fehler?,OnMusicInfo,error]\n/
		\![*]\q[Wo werden meine Playlisten gespeichert?,OnMusicInfo,playlistsave]"
		--
		"\n\n\![*]\q[Zurück zum Musikmenü,OnMusicMenu]"
	}
	elseif language == "Русский"
	{
		if _mode == 1; _mode = "Перетасуй и Играй по Кругу" 
		elseif _mode == 2; _mode = "Играй Одна Песня по Кругу"
		elseif _mode == 3; _mode = "Играй Одна Песня"
		else; _mode = "Играй Плейлист по Кругу"
		
		"/
		Режим: \![*]\q[%(_mode),OnPlaybackType]\n\n[half]/
		Громкость: \![*]\q[%(_vol),OnMusicSet,Volume]\n/
		Скорость: \![*]\q[%(_speed),OnMusicSet,Speed]\n/
		Balans: \![*]\q[%(_bal),OnMusicSet,Balance]\n\n"
		--
		"\q[Стоп после эта песня,OnStopAfterPlayback]"
		--
		if MusicSettings[4] == "stop after playback"; " \![*]"
		--
		"\n\n/
		\![*]\q[Сохранить этот плейлист,OnSavePlaylist]\n/
		\![*]\q[Загрузить плейлист,OnLoadPlaylist]\n/
		\![*]\q[Отчистить этот плейлист,OnClearPlaylist]\n\n/
		\![*]\q[Изменить горячие клавиши,OnHotkeys]\n\n/
		\![*]\q[Как добавить песня?,OnMusicInfo,addsong]\n/
		\![*]\q[Почему какие-то песни отдают мне ошибка?,OnMusicInfo,error]\n/
		\![*]\q[Где сохраненно плейлисты?,OnMusicInfo,playlistsave]"
		--
		"\n\n\![*]\q[Назад в меню музыкы,OnMusicMenu]"
	}
	elseif language == "Français"
	{
		if _mode == 1; _mode = "Mélangée et en Boucle"
		elseif _mode == 2; _mode = "Boucler sur une Musique"
		elseif _mode == 3; _mode = "Lire Une Musique"
		else; _mode = "Playlist en Boucle"
		
		"/
		Mode de lecture : \![*]\q[%(_mode),OnPlaybackType]\n\n[half]/
		Volume : \![*]\q[%(_vol),OnMusicSet,Volume]\n/
		Vitesse : \![*]\q[%(_speed),OnMusicSet,Speed]\n/
		Balance : \![*]\q[%(_bal),OnMusicSet,Balance]\n\n"
		--
		"\q[Arrêter après la musique actuelle,OnStopAfterPlayback]"
		--
		if MusicSettings[4] == "stop after playback"; " \![*]"
		--
		"\n\n/
		\![*]\q[Sauvegarder la playlist actuelle,OnSavePlaylist]\n/
		\![*]\q[Charger une playlist,OnLoadPlaylist]\n/
		\![*]\q[Vider la playlist actuelle,OnClearPlaylist]\n\n/
		\![*]\q[Changer les raccourcis,OnHotkeys]\n\n/
		\![*]\q[Comment ajouter une musique ?,OnMusicInfo,addsong]\n/
		\![*]\q[Pourquoi certaines musiques donnent une erreur ?,OnMusicInfo,error]\n/
		\![*]\q[Où sont sauvegardées les playlists ?,OnMusicInfo,playlistsave]"
		--
		"\n\n\![*]\q[Retour au menu des musiques,OnMusicMenu]"
	}
	elseif language == "Polski"
	{
		if _mode == 1; _mode = "Miksuj i Zapętl" 
		elseif _mode == 2; _mode = "Zapętl Jedną Piosenkę"
		elseif _mode == 3; _mode = "Zagraj Jedną Piosenkę"
		else; _mode = "Zapętlij Playlistę"
		
		"/
		Tryb odtwarzania: \![*]\q[%(_mode),OnPlaybackType]\n\n[half]/
		Głośność: \![*]\q[%(_vol),OnMusicSet,Volume]\n/
		Prędkość: \![*]\q[%(_speed),OnMusicSet,Speed]\n/
		Balans: \![*]\q[%(_bal),OnMusicSet,Balance]\n\n"
		--
		"\q[Zatrzymaj po bieżącym utworze,OnStopAfterPlayback]"
		--
		if MusicSettings[4] == "stop after playback"; " \![*]"
		--
		"\n\n/
		\![*]\q[Zapisz bieżącą playlistę,OnSavePlaylist]\n/
		\![*]\q[Wczytaj playlistę,OnLoadPlaylist]\n/
		\![*]\q[Wyczyść bieżącą listę odtwarzania,OnClearPlaylist]\n\n/
		\![*]\q[Zmień skróty,OnHotkeys]\n\n/
		\![*]\q[Jak dodać piosenkę?,OnMusicInfo,addsong]\n/
		\![*]\q[Dlaczego w niektórych utworach pojawia się error?,OnMusicInfo,error]\n/
		\![*]\q[Gdzie są zapisywane playlisty?,OnMusicInfo,playlistsave]"
		--
		"\n\n\![*]\q[Powrót do menu muzycznego,OnMusicMenu]"
	}
	else //English
	{
		if _mode == 1; _mode = "Shuffle and Loop" //TRANSLATORS: Do translate these! They're labels for the play type
		elseif _mode == 2; _mode = "Loop One Song"
		elseif _mode == 3; _mode = "Play One Song"
		else; _mode = "Loop Playlist"
		
		//TRANSLATORS: Don't translate inside the \q tags here, just translate the local variables above
		"/
		Play mode: \![*]\q[%(_mode),OnPlaybackType]\n\n[half]/
		Volume: \![*]\q[%(_vol),OnMusicSet,Volume]\n/
		Speed: \![*]\q[%(_speed),OnMusicSet,Speed]\n/
		Balance: \![*]\q[%(_bal),OnMusicSet,Balance]\n\n"
		--
		//TRANSLATORS: All the options after this point can be translated normally
		"\q[Stop after current song,OnStopAfterPlayback]"
		--
		if MusicSettings[4] == "stop after playback"; " \![*]" //TRANSLATORS: Leave this bit alone
		--
		"\n\n/
		\![*]\q[Save current playlist,OnSavePlaylist]\n/
		\![*]\q[Load playlist,OnLoadPlaylist]\n/
		\![*]\q[Clear current playlist,OnClearPlaylist]\n\n/
		\![*]\q[Change Hotkeys,OnHotkeys]\n\n/
		\![*]\q[How do I add a song?,OnMusicInfo,addsong]\n/
		\![*]\q[Why do some songs give an error?,OnMusicInfo,error]\n/
		\![*]\q[Where are playlists saved?,OnMusicInfo,playlistsave]"
		--
		"\n\n\![*]\q[Back to music menu,OnMusicMenu]"
	}
	--
	"\![unlock,balloonrepaint]\e __Music_Settings_Menu__"
}

OnPlaybackType //Changing the playback type
{
	"\0\_q%(bb)"
	--
	if language == "Placeholder" //TRANSLATORS: These should match the _mode labels above
	{
		
	}
	elseif language == "Deutsch"
	{
		"/
		\![*]\q[Playlist wiederholen,OnPlaybackTypeChange,0]\n/
		\![*]\q[Playlist shuffeln und wiederholen,OnPlaybackTypeChange,1]\n/
		\![*]\q[Ein Lied auf Wiederholung spielen,OnPlaybackTypeChange,2]\n/
		\![*]\q[Ein einzelnes Lied spielen,OnPlaybackTypeChange,3]\n/
		"
		--
		"\n\n\![*]\q[Zurück zu Musik-Einstellungen,OnMusicSettings]\e"
	}
	elseif language == "Русский"
	{
		"/
		\![*]\q[Играй Плейлист по Кругу,OnPlaybackTypeChange,0]\n/
		\![*]\q[Перетасуй и Играй по Кругу,OnPlaybackTypeChange,1]\n/
		\![*]\q[Играй Одна Песня по Кругу,OnPlaybackTypeChange,2]\n/
		\![*]\q[Играй Одна Песня,OnPlaybackTypeChange,3]\n/
		"
		--
		"\n\n\![*]\q[Назад в Настроек Музыки,OnMusicSettings]\e"
	}
	elseif language == "Français"
	{
		"/ 
		\![*]\q[Playlist en Boucle,OnPlaybackTypeChange,0]\n/
		\![*]\q[Mélangée et en Boucle,OnPlaybackTypeChange,1]\n/
		\![*]\q[Boucler sur une Musique,OnPlaybackTypeChange,2]\n/
		\![*]\q[Lire Une Musique,OnPlaybackTypeChange,3]\n/
		"
		--
		"\n\n\![*]\q[Retour aux paramètres des musiques,OnMusicSettings]\e"
	}
	elseif language == "Polski"
	{
		"/
		\![*]\q[Zapętl Playlistę,OnPlaybackTypeChange,0]\n/
		\![*]\q[Miksuj i Zapętl,OnPlaybackTypeChange,1]\n/
		\![*]\q[Zapętl Jedną Piosenkę,OnPlaybackTypeChange,2]\n/
		\![*]\q[Zagraj Jedną Piosenkę,OnPlaybackTypeChange,3]\n/
		"
		--
		"\n\n\![*]\q[Powrót do ustawień muzycznych,OnMusicSettings]\e"
	}
	else //English
	{
		"/
		\![*]\q[Loop Playlist,OnPlaybackTypeChange,0]\n/
		\![*]\q[Shuffle and Loop,OnPlaybackTypeChange,1]\n/
		\![*]\q[Loop One Song,OnPlaybackTypeChange,2]\n/
		\![*]\q[Play One Song,OnPlaybackTypeChange,3]\n/
		"
		--
		"\n\n\![*]\q[Back to music settings,OnMusicSettings]\e"
	}
}

OnPlaybackTypeChange //Actually making the change
{
	MusicSettings[3] = TOINT(reference0)
	if TOINT(reference0) == 1 //If the user set it to shuffle, shuffle the playlist
	{
		ShuffledPlaylist = ShufflePlaylist(NowPlaying[1],CurrentPlaylist)
	}
	OnMusicSettings
}

OnMusicSet //Bringing up input boxes
{
	"\0%(bb)\_q"
	--
	if reference0 == "Balance"; "\![open,inputbox,OnMusicBalance,-1]"
	elseif reference0 == "Speed"; "\![open,sliderinput,OnMusicSpeed,-1,100,1,300]"
	else; "\![open,sliderinput,OnMusicVolume,-1,100,1,100]"
	--
	if language == "Placeholder" //TRANSLATORS: Leave the reference0 parts alone, just translate the dialogues. These are for changing the options like volume, balance, and speed
	{
		
	}
	elseif language == "Deutsch"
	{
		if reference0 == "Balance"
		{
			"[Gib einen Balance-Wert ein. 0 ist mittig, -100 ist ganz auf der linken Seite, 100 ist ganz auf der rechten Seite der Lautsprecher.]"
		}
		elseif reference0 == "Speed"
		{
			"[Wähle eine Geschwindigkeit. 100 ist normal.]"
		}
		else //volume
		{
			"[Wähle eine Lautstärke. 100 ist der Standardwert.]"
		}
		--
		"\n\n\![*]\q[Abbrechen,OnCloseMusicSet,%(reference0)]\e"
	}
	elseif language == "Русский"
	{
		if reference0 == "Balance"
		{
			"[Напиши номер равновесие. 0 - в центре, -100 - в самой левой стороне, 100 в самой справой стороне.]"
		}
		elseif reference0 == "Speed"
		{
			"[Выбирать скорость. 100 - обычный.]"
		}
		else //volume
		{
			"[Выбирать громкость. 100 - обычный.]"
		}
		--
		"\n\n\![*]\q[Отменить,OnCloseMusicSet,%(reference0)]\e"
	}
	elseif language == "Français" //TODO FRENCH I adjusted this and I hope it's correct lol
	{
		if reference0 == "Balance"
		{
			"[Entre une valeur de balance. 0 est le centre, -100 est tout à gauche, 100 est tout à droite.]" //La balance sera mise à jour dès que la prochaine musique commencera.
		}
		elseif reference0 == "Speed"
		{
			"[Choisis une vitesse. 100 est normale.]" //La vitesse sera mise à jour dès que la prochaine musique commencera.
		}
		else //volume
		{
			//TODO FRENCH is this correct? Doesn't match the above...
			"[Choisis un volume. 100 is the default.]" //Le volume sera mise à jour dès que la prochaine musique commencera.
		}
		--
		"\n\n\![*]\q[Annuler,OnCloseMusicSet,%(reference0)]\e"
	}
	elseif language == "Polski"
	{
		if reference0 == "Balance"
		{
			"[Wprowadzić wartość balansu. 0 oznacza środek, -100 oznacza skrajnie w lewo, 100 oznacza skrajnie w prawo.]"
		}
		elseif reference0 == "Speed"
		{
			"[Wybierz prędkość. 100 to prędkość normalna.]"
		}
		else //volume
		{
			"[Wybierz głośność. 100 jest wartością domyślną.]"
		}
		--
		"\n\n\![*]\q[Anuluj,OnCloseMusicSet,%(reference0)]\e"
	}
	else //English
	{
		if reference0 == "Balance"
		{
			"[Type a balance value. 0 is center, -100 is all the way to the left, 100 is all the way to the right.]"
		}
		elseif reference0 == "Speed"
		{
			"[Pick a speed. 100 is normal.]"
		}
		else //volume
		{
			"[Pick a volume. 100 is the default.]"
		}
		--
		"\n\n\![*]\q[Cancel,OnCloseMusicSet,%(reference0)]\e"
	}
}

OnMusicBalance
{
	MusicSettings[2] = TOINT(reference0)
	if TOINT(reference0) > 100; MusicSettings[2] = 100
	if TOINT(reference0) < -100; MusicSettings[2] = -100
	if Singing; "\![sound,option,%(CHR(34))%(NowPlaying[0])%(CHR(34)),--balance=%(MusicSettings[2])]"
	--
	OnMusicSettings
}

OnMusicSpeed
{
	MusicSettings[1] = reference0
	if Singing; "\![sound,option,%(CHR(34))%(NowPlaying[0])%(CHR(34)),--rate=%(MusicSettings[1])]"
	--
	OnMusicSettings
}

OnMusicVolume
{
	MusicSettings[0] = reference0
	if Singing; "\![sound,option,%(CHR(34))%(NowPlaying[0])%(CHR(34)),--volume=%(MusicSettings[0])]"
	--
	OnMusicSettings
}

OnCloseMusicSet //If the user cancels the changes, this'll close the input boxes
{
	"\C\![close,inputbox,OnMusic%(reference0)]"
	--
	OnMusicSettings
}

OnStopAfterPlayback //Toggles the stop after playback function
{
	if MusicSettings[4] != "stop after playback"
	{
		MusicSettings[4] = "stop after playback"
	}
	else
	{
		MusicSettings[4] = IARRAY
	}
	--
	OnMusicSettings
}

OnHotkeys
{
	if reference1 != ""; Hotkeys[reference0] = reference1
	
	_msg = ""
	if language == "Placeholder" //TRANSLATORS: This function is for setting hotkeys. Set _msg to the text that should display in the menu when a key is not bound to anything
	{
		
	}
	elseif language == "Deutsch"
	{
		_msg = "Hier klicken"
	}
	elseif language == "Русский"
	{
		_msg = "Нажмите, чтобы ставить клавиша"
	}
	elseif language == "Français"
	{
		_msg = "Clique pour ajouter une touche"
	}
	elseif language == "Polski"
	{
		_msg = "Kliknij, aby ustawić przycisk"
	}
	else //English //Note to self, the options for Russian, French, and Polish above were all missing here. But, the same text was translated below, so I grabbed them from there. What could possibly go wrong (somehow this will go horribly wrong)
	{
		_msg = "Click to set a key"
	}
	
	if Hotkeys[1] == ""; Hotkeys[1] = _msg //Play/pause
	if Hotkeys[2] == ""; Hotkeys[2] = _msg //Next
	if Hotkeys[3] == ""; Hotkeys[3] = _msg //Previous
	if Hotkeys[4] == ""; Hotkeys[4] = _msg //Stop
	if Hotkeys[5] == ""; Hotkeys[5] = _msg //Menu
	
	Hotkeys[0] = "" //For passing parameters
	
	_playpause = Hotkeys[1]
	_next = Hotkeys[2]
	_prev = Hotkeys[3]
	_stop = Hotkeys[4]
	_menu = Hotkeys[5]

	"\0%(bb)\_q\*"
	--
	if language == "Placeholder" //TRANSLATORS: This is the menu for picking which hotkey to set
	{
		
	}
	elseif language == "Deutsch"
	{
		"[Klicke auf einen Hotkey um ihn zu ändern, klicke auf das (x) um ihn zu löschen.]\n\n"
		--
		"\q[(x),OnUnsetHotkey,1] Start/Pause: \_a[OnChangeHotkey,1]%(_playpause)\_a\n/
		\q[(x),OnUnsetHotkey,2] Nächstes Lied: \_a[OnChangeHotkey,2]%(_next)\_a\n/
		\q[(x),OnUnsetHotkey,3] Vorheriges Lied: \_a[OnChangeHotkey,3]%(_prev)\_a\n/
		\q[(x),OnUnsetHotkey,4] Lied anhalten: \_a[OnChangeHotkey,4]%(_stop)\_a\n/
		\q[(x),OnUnsetHotkey,5] Menü öffnen: \_a[OnChangeHotkey,5]%(_menu)\_a\n/
		\n\n\![*]\q[Zurück zu Musik-Einstellungen,OnMusicSettings]\e"
	}
	elseif language == "Русский"
	{
		"[Нажми на кнопку чтобы изменить его, или на (x), чтобы отчистить.]\n\n"
		--
		"\q[(x),OnUnsetHotkey,1] Играй/Пауза: \_a[OnChangeHotkey,1]%(_playpause)\_a\n/
		\q[(x),OnUnsetHotkey,2] Следующая песня: \_a[OnChangeHotkey,2]%(_next)\_a\n/
		\q[(x),OnUnsetHotkey,3] Последняя песня: \_a[OnChangeHotkey,3]%(_prev)\_a\n/
		\q[(x),OnUnsetHotkey,4] Перестать песня: \_a[OnChangeHotkey,4]%(_stop)\_a\n/
		\q[(x),OnUnsetHotkey,5] Открыть меню: \_a[OnChangeHotkey,5]%(_menu)\_a\n/
		\n\n\![*]\q[Назад в Настроек Музыки,OnMusicSettings]\e"
	}
	elseif language == "Français"
	{
		"[Clique sur une touche pour la changer, clique sur (x) pour la retirer.]\n\n"
		--
		"\q[(x),OnUnsetHotkey,1] Play/Pause: \_a[OnChangeHotkey,1]%(_playpause)\_a\n/
		\q[(x),OnUnsetHotkey,2] Next song: \_a[OnChangeHotkey,2]%(_next)\_a\n/
		\q[(x),OnUnsetHotkey,3] Previous song: \_a[OnChangeHotkey,3]%(_prev)\_a\n/
		\q[(x),OnUnsetHotkey,4] Stop song: \_a[OnChangeHotkey,4]%(_stop)\_a\n/
		\q[(x),OnUnsetHotkey,5] Open menu: \_a[OnChangeHotkey,5]%(_menu)\_a\n/
		\n\n\![*]\q[Retour aux Paramètres des Musiques,OnMusicSettings]\e"
	}
	elseif language == "Polski"
	{
		"[Kliknij na klawisz skrótu, aby go zmienić, kliknij na (x), aby go wyłączyć.]\n\n"
		--
		"\q[(x),OnUnsetHotkey,1] Odtwarzanie/Pauza: \_a[OnChangeHotkey,1]%(_playpause)\_a\n/
		\q[(x),OnUnsetHotkey,2] Następny utwór: \_a[OnChangeHotkey,2]%(_next)\_a\n/
		\q[(x),OnUnsetHotkey,3] Poprzedni utwór: \_a[OnChangeHotkey,3]%(_prev)\_a\n/
		\q[(x),OnUnsetHotkey,4] Zatrzymaj utwór: \_a[OnChangeHotkey,4]%(_stop)\_a\n/
		\q[(x),OnUnsetHotkey,5] Otwórz menu: \_a[OnChangeHotkey,5]%(_menu)\_a\n/
		\n\n\![*]\q[Powrót do ustawień muzycznych,OnMusicSettings]\e"
	}
	else //English
	{
		"[Click a hotkey to change it, click the (x) to unset it.]\n\n"
		--
		"\q[(x),OnUnsetHotkey,1] Play/Pause: \_a[OnChangeHotkey,1]%(_playpause)\_a\n/
		\q[(x),OnUnsetHotkey,2] Next song: \_a[OnChangeHotkey,2]%(_next)\_a\n/
		\q[(x),OnUnsetHotkey,3] Previous song: \_a[OnChangeHotkey,3]%(_prev)\_a\n/
		\q[(x),OnUnsetHotkey,4] Stop song: \_a[OnChangeHotkey,4]%(_stop)\_a\n/
		\q[(x),OnUnsetHotkey,5] Open menu: \_a[OnChangeHotkey,5]%(_menu)\_a\n/
		\n\n\![*]\q[Back to Music Settings,OnMusicSettings]\e"
	}
}

OnChangeHotkey
{
	reference0 = TOINT(reference0)
	_temp = Hotkeys[reference0]
	Hotkeys[reference0] = ""
	Hotkeys[0] = TOSTR(reference0)
	_option = ""
	
	"\0%(bb)\*\_q"
	--
	if language == "Placeholder" //TRANSLATORS: Menu for actually changing a hotkey. Make sure to copy the block of reference0 checks and translate the text in them, and then you can use _option in dialogue for which key is being changed
	{
		
	}
	elseif language == "Deutsch"
	{
		if reference0 == 2; _option = "-Nächstes Lied-"
		elseif reference0 == 3; _option = "-Vorheriges Lied-"
		elseif reference0 == 4; _option = "-Lied anhalten-"
		elseif reference0 == 5; _option = "-Menü öffnen-"
		else; _option =  "-Start/Pause-"
		
		"[Drücke eine Taste für %(_option).]"
		--
		"\n\n\![*]\q[Abbrechen,OnHotkeys,%(reference0),%(_temp)]"
	}
	elseif language == "Русский"
	{
		if reference0 == 2; _option = "следующая песня"
		elseif reference0 == 3; _option = "последняя песня"
		elseif reference0 == 4; _option = "перестать песня"
		elseif reference0 == 5; _option = "открыть меню"
		else; _option =  "Играй/Пауза"
		
		"[Нажмите кнопку для %(_option).]"
		--
		"\n\n\![*]\q[Отменить,OnHotkeys,%(reference0),%(_temp)]"
	}
	elseif language == "Français"
	{
		if reference0 == 2; _option = "musique suivante"
		elseif reference0 == 3; _option = "musique précédente"
		elseif reference0 == 4; _option = "stopper la musique"
		elseif reference0 == 5; _option = "ouvrir le menu"
		else; _option =  "Play/Pause"
		
		"[Presse une touche pour %(_option).]"
		--
		"\n\n\![*]\q[Annuler,OnHotkeys,%(reference0),%(_temp)]"
	}
	elseif language == "Polski"
	{
		if reference0 == 2; _option = "następny utwór"
		elseif reference0 == 3; _option = "poprzedni utwór"
		elseif reference0 == 4; _option = "zatrzymaj utwór"
		elseif reference0 == 5; _option = "open menu"
		else; _option =  "Odtwarzanie/Pauza"
		
		"[Naciśnij przycisk, dla opcji '%(_option)'.]"
		--
		"\n\n\![*]\q[Anuluj,OnHotkeys,%(reference0),%(_temp)]"
	}
	else //English
	{
		if reference0 == 2; _option = "next song"
		elseif reference0 == 3; _option = "previous song"
		elseif reference0 == 4; _option = "stop song"
		elseif reference0 == 5; _option = "open menu"
		else; _option =  "Play/Pause"
		
		"[Press a key for %(_option).]"
		--
		"\n\n\![*]\q[Cancel,OnHotkeys,%(reference0),%(_temp)]"
	}
	--
	"\e changing hotkey: %(reference0)"
}

OnUnsetHotkey
{
	reference0 = TOINT(reference0)
	_msg = ""
	if language == "Placeholder" //TRANSLATORS: set _msg to the text for when a key is not bound to anything, same as above
	{
		
	}
	elseif language == "Deutsch"
	{
		_msg = "Hier klicken"
	}
	elseif language == "Русский"
	{
		_msg = "Нажмите, чтобы ставить клавиша"
	}
	elseif language == "Français"
	{
		_msg = "Clique pour ajouter une touche"
	}
	elseif language == "Polski"
	{
		_msg = "Kliknij, aby ustawić przycisk"
	}
	else
	{
		_msg = "Click to set a key"
	}
	Hotkeys[reference0] = _msg
	OnHotkeys
}

OnMusicInfo //Information that the user can ask about
{
	if reference0 == "playlistsave"
	{
		_path = "../../playlists/"
		if FENUM(_path) == ""; void MKDIR(_path)
	}
	
	"\0%(bb)"
	--
	if language == "Placeholder" //TRANSLATORS: These are the questions the user can ask about how FLUX works. Only translate the dialogues, not the reference0 checks
	{
		
	}
	elseif language == "Deutsch"
	{
		if reference0 == "addsong" //Asking how to add songs
		{
			"[Um Lieder hinzuzufügen,\w4 zieh sie von einem Ordner auf FLUX-Player.\w8 Es können mehrere Dateien auf einmal oder auch ganze Ordner auf FLUX gezogen werden.\w8 Kompatible Dateitypen sind \_a[OnBlank].mp3\_a, \_a[OnBlank].wav\_a, \_a[OnBlank].wma\_a, und \_a[OnBlank].mid\_a.]\n\n\w8[Wenn du \_a[https://github.com/Nevcairiel/LAVFilters/releases]LAV Filters\_a installiert hast,\w4 sind noch viele Dateitypen mehr kompatibel, so wie \_a[OnBlank].flac\_a,\w4 \_a[OnBlank].ogg\_a,\w4 und \_a[OnBlank].m4a\_a.\w8 Um eine vollständige Liste an Dateitypen, die mit FLUX kompatibel sind, zu sehen\w4 \_a[OnDisplayFileTypes]klicke hier\_a.]\x"
		}
		elseif reference0 == "error" //Asking why some songs give errors
		{
			"[Manche Lieder werden nicht abgespielt, auch wenn sie dem korrekten Dateityp angehören.\w8 Das ist eine SSP Limitation.\w8 Du kannst \_a[https://github.com/Nevcairiel/LAVFilters/releases]LAVFilters\_a,\w4 ein Open-Source-Programm,\w4 installieren um die meisten dieser Fehler zu beheben.\w8 Wenn du das nicht tun möchtest\w4 kannst du ein Lied in ein Audiobearbeitungsprogramm wie \_a[https://www.audacityteam.org/]Audacity\_a importieren und wieder exportieren oder es zu einem anderern kompatiblen Dateitypen mit etwas wie \_a[https://www.onlineconverter.com/]Online Converter\_a konvertieren.]\x"
		}
		elseif reference0 == "playlistsave" //Asking where playlists save
		{
			"[Playlisten werden in \_a[OnPlaylistPath]SSP/ghost/flux/playlists\_a gespeichert. Du kannst auch Playlisten von anderswo laden indem du sie auf FLUX ziehst.]\x"
		}
	}
	elseif language == "Русский"
	{
		if reference0 == "addsong" //Asking how to add songs
		{
			"[Чтобы добавить песни,\w4 пераьаскивать их на плеер FLUX.\w8 Можно перетаскивать многие песни в одном время,\w4 или целые папки.\w8 Совместимый типов \_a[OnBlank].mp3\_a, \_a[OnBlank].wav\_a, \_a[OnBlank].wma\_a, и \_a[OnBlank].mid\_a.]\n\n\w8[Если у тебя  установленный \_a[https://github.com/Nevcairiel/LAVFilters/releases]LAV Filters\_a,\w4 гораздо больше типы будет совместимый, например \_a[OnBlank].flac\_a,\w4 \_a[OnBlank].ogg\_a,\w4 и \_a[OnBlank].m4a\_a.\w8 Чтобы посмотреть на полный лист типы, которые совместимые с FLUX,\w4 \_a[OnDisplayFileTypes]нажми здесь\_a.]\x"
		}
		elseif reference0 == "error" //Asking why some songs give errors
		{
			"[Некоторые песни не играют, несмотря нв то, что они правильный тип.\w8 Это -- ограничение SSP.\w8 Ты можешь установить \_a[https://github.com/Nevcairiel/LAVFilters/releases]LAVFilters\_a,\w4 программа с открытым кодом,\w4 чтобы отчинить большую часть этими ошибками.\w8 Если не хочешь это делать,\w4 ты можешь импортировать песни в программа для изменение аудио, как \_a[https://www.audacityteam.org/%22%3E]Audacity\_a и вновь их экспортировать, или можешь попробовать импортировать этих песен с другого типа с помощью конвертер как \_a[https://www.onlineconverter.com/]Online Converter\_a.]\x"
		}
		elseif reference0 == "playlistsave" //Asking where playlists save
		{
			"[Плейлисты сохранено в \_a[OnPlaylistPath]SSP/ghost/flux/playlists\_a. Тоже можно загрузить плейлист от где-то другое, если перетаскивать его на FLUX.]\x"
		}
	}
	elseif language == "Français"
	{
		if reference0 == "addsong" //Asking how to add songs
		{
			"[Pour ajouter des musiques,\w4 fais-les glisser et dépose-les sur le lecteur FLUX.\w8 Plusieurs fichiers peuvent être déposés en même temps,\w4 ou des dossiers entiers.\w8 Les types de fichies compatibles sont \_a[OnBlank].mp3\_a, \_a[OnBlank].wav\_a, \_a[OnBlank].wma\_a, et \_a[OnBlank].mid\_a.]\n\n\w8[Si tu as \_a[https://github.com/Nevcairiel/LAVFilters/releases]LAV Filters\_a d'installer,\w4 beaucoup plus de fichiers seront compatibles, incluant \_a[OnBlank].flac\_a,\w4 \_a[OnBlank].ogg\_a,\w4 et \_a[OnBlank].m4a\_a.\w8 Pour une liste complète des types de fichiers compatibles avec FLUX,\w4 \_a[OnDisplayFileTypes]clique ici\_a.]\x"
		}
		elseif reference0 == "error" //Asking why some songs give errors
		{
			"[Certaines musiques ne seront pas lues malgré leur type correct.\w8 C'est une limitation de SSP.\w8 Tu peux installer \_a[https://github.com/Nevcairiel/LAVFilters/releases]LAVFilters\_a,\w4 un programme open source,\w4 pour résoudre la plupart de ces erreurs.\w8 Si tu ne veux pas le faire,\w4 tu peux importer une musique dans un programme d'édition comme \_a[https://www.audacityteam.org/]Audacity\_a et l'exporter à nouveau, ou le convertir en un autre type compatible avec quelque chose comme \_a[https://www.onlineconverter.com/]Online Converter\_a.]\x"
		}
		elseif reference0 == "playlistsave" //Asking where playlists save
		{
			"[Les playlists sont sauvegardées dans \_a[OnPlaylistPath]SSP/ghost/flux/playlists\_a. Tu peux charger des playlists d'autre part en les glissant-déposant sur FLUX.]\x"
		}
	}
	elseif language == "Polski"
	{
		if reference0 == "addsong" //Asking how to add songs
		{
			"[By dodać utwory,\w4 przeciągnij i upuść je na odtwarzacz FLUX.\w8 Można przeciągać wiele plików jednocześnie,\w4 lub całe foldery.\w8 Kompatybilne typy plików to \_a[OnBlank].mp3\_a, \_a[OnBlank].wav\_a, \_a[OnBlank].wma\_a, i \_a[OnBlank].mid\_a.]\n\n\w8[Jeśli masz zainstalowany \_a[https://github.com/Nevcairiel/LAVFilters/releases]LAV Filters\_a, \w4 więcej typów plików będzie kompatybilnych, w tym \_a[OnBlank].flac\_a,\w4 \_a[OnBlank].ogg\_a,\w4 i \_a[OnBlank].m4a\_a.\w8 Aby uzyskać pełną listę typów plików kompatybilnych z FLUX,\w4 \_a[OnDisplayFileTypes]kliknij tutaj\_a.]\x"
		}
		elseif reference0 == "error" //Asking why some songs give errors
		{
			"[Niektóre utwory nie będą odtwarzane, mimo że są właściwego typu.\w8 Jest to ograniczenie SSP.\w8 Możesz zaintalować \_a[https://github.com/Nevcairiel/LAVFilters/releases]LAVFilters\_a,\w4 program open source,\w4 aby naprawić większość z tych błędów.\w8 Jeśli nie chcesz tego robić,\w4 możesz zaimportować utwór do programu do edycji audio, takiego jak \_a[https://www.audacityteam.org/]Audacity\_a i wyeksportować go ponownie, lub przekonwertować go na inny kompatybilny typ za pomocą czegoś takiego jak \_a[https://www.onlineconverter.com/]Online Converter\_a.]\x"

		}
		elseif reference0 == "playlistsave" //Asking where playlists save
		{
			"[Playlisty są zapisywane w \_a[OnPlaylistPath]SSP/ghost/flux/playlists\_a. Możesz również załadować listę odtwarzania z innego miejsca, przeciągając i upuszczając ją na FLUX..]\x"
		}
	}
	else //English
	{
		if reference0 == "addsong" //Asking how to add songs
		{
			"[To add songs,\w4 drag and drop them onto FLUX player.\w8 Multiple files may be dragged at once,\w4 or entire folders.\w8 Compatible file types are \_a[OnBlank].mp3\_a, \_a[OnBlank].wav\_a, \_a[OnBlank].wma\_a, and \_a[OnBlank].mid\_a.]\n\n\w8[If you have \_a[https://github.com/Nevcairiel/LAVFilters/releases]LAV Filters\_a installed,\w4 many more file types will be compatible, including \_a[OnBlank].flac\_a,\w4 \_a[OnBlank].ogg\_a,\w4 and \_a[OnBlank].m4a\_a.\w8 For a full list of file types compatible with FLUX,\w4 \_a[OnDisplayFileTypes]click here\_a.]\x"
		}
		elseif reference0 == "error" //Asking why some songs give errors
		{
			"[Some songs will not play despite being the correct type.\w8 This is an SSP limitation.\w8 You can install \_a[https://github.com/Nevcairiel/LAVFilters/releases]LAVFilters\_a,\w4 an open source program,\w4 to fix most of these errors.\w8 If you don't want to do that,\w4 you can import a song into an audio editing program like \_a[https://www.audacityteam.org/]Audacity\_a and export it again, or convert it to another compatible type with something like \_a[https://www.onlineconverter.com/]Online Converter\_a.]\x"
		}
		elseif reference0 == "playlistsave" //Asking where playlists save
		{
			"[Playlists are saved in \_a[OnPlaylistPath]SSP/ghost/flux/playlists\_a. You can also load a playlist from elsewhere by dragging and dropping it onto FLUX.]\x"
		}
	}
	--
	OnMusicSettings
}

OnDisplayFileTypes
{
	"\0%(bb)\_q\f[anchorstyle,none]"
	
	_defballoon = 0
	if SHIORI3FW.BalloonName == "Notes"; _defballoon = 1
	
	--
	_display = ""
	_i = 0
	foreach CompatibleMusicFileTypes; _type
	{
		//Max length for the notes balloon: ~30 comfortably. Doesn't account for alternate text sizes, but there's not really a way to handle that... perhaps a feature to request.
		if _i >= 3; _i = 0
		
		if _defballoon
		{
			if _i == 1; {_display += "\_l[100]"}
			elseif _i == 2; {_display += "\_l[200]"}
			else; {_display += "\n"}
		}
		else
		{
			if _i != 0; _display += "    "
			else; {_display += "\n"}
		}
		_i++
		_display += "\_a[OnBlank]%(_type)\_a"
	}
	_display
	--
	"\x\![raise,OnMusicSettings]"
}

OnSavePlaylist //Saving a playlist
{
	_playlists = FENUM("/../../playlists/")
	if ARRAYSIZE(_playlists) == 0; _f = MKDIR("/../../playlists/")
	_display = ""
	for _i = 0; _i < ARRAYSIZE(_playlists); _i++
	{
		_playlist = _playlists[_i]
		_playlist = RE_REPLACE(_playlist,"\.m3u$","")
		_display += "\q[%(_playlist),OnPlaylistOverwrite,%(_playlist)]\n"
	}
	--
	"\C\![lock,balloonrepaint]\c\0%(bb)\*\_q\![set,autoscroll,disable]\![open,inputbox,OnPlaylistName,-1]"
	--
	if language == "Placeholder" //TRANSLATORS: This is saving a playlist. It'll present a list of playlists that already exist, in case the user wants to update an old playlist by overwriting it
	{
		
	}
	elseif language == "Deutsch"
	{
		"[Gib einen Namen ein um die aktuelle Playlist als eine neue Playlist zu speichern oder klicke auf eine alte Playlist um sie zu überschreiben.]"
		--
		"\n\n\![*]\q[Abbrechen,PlaylistSaveCancel]"
	}
	elseif language == "Русский"
	{
		"[Напиши название, чтобы сохранить этот плейлист как новое, или нажмни на старый плейлист чтобы переписать его.]"
		--
		"\n\n\![*]\q[Отменить,PlaylistSaveCancel]"
	}
	elseif language == "Français"
	{
		"[Rentre un nom pour sauvegarde la playlist dans une nouvelle, ou clique sur une existante pour la sauvegarder dedans.]"
		--
		"\n\n\![*]\q[Annuler,PlaylistSaveCancel]"
	}
	elseif language == "Polski"
	{
		"[Wpisz nazwę, aby zapisać bieżącą listę odtwarzania jako nową listę odtwarzania, lub kliknij starą listę odtwarzania, aby ją nadpisać.]"
		--
		"\n\n\![*]\q[Anuluj,PlaylistSaveCancel]"
	}
	else //English
	{
		"[Type a name to save the current playlist as a new playlist, or click an old playlist to save over it.]"
		--
		"\n\n\![*]\q[Cancel,PlaylistSaveCancel]"
	}
	--
	"\n\n%(_display)\![unlock,balloonrepaint]\e"
}

Select.PlaylistSaveCancel //Closing the input box if the user chooses to cancel
{
	"\C\![close,inputbox,OnPlaylistName]\![raise,OnMusicSettings]"
}

OnPlaylistName //After the user types a name
{
	_name = TOSTR(reference0) //Removing illegal characters
	_name = REPLACE(_name,"\","") 
	_name = REPLACE(_name,"/","")
	_name = REPLACE(_name,":","")
	_name = REPLACE(_name,"*","")
	_name = REPLACE(_name,"%(CHR(0x22))","")
	_name = REPLACE(_name,"<","")
	_name = REPLACE(_name,">","")
	_name = REPLACE(_name,"|","")
	_name = REPLACE(_name,"]","") //This one is because sakurascript
	
	--
	_playlists = FENUM("/../../playlists/")
	_playlists = SPLIT(_playlists,",")
	if ASEARCH("%(_name).m3u",_playlists) != -1 && reference1 == ""; "\![raise,OnPlaylistOverwrite,%(_name),are you sure]\e"
	else
	{
		_path = "/../../playlists/%(_name).m3u"
		_o = FOPEN(_path,"w") //Create a new file
		--
		for _i = 0; _i < ARRAYSIZE(CurrentPlaylist); _i++
		{
			_f = FWRITE(_path,"%(CurrentPlaylist[_i])") //Write each file path
		}
		--
		_f = FCLOSE(_path)
		--
		"\![close,inputbox,OnPlaylistName]\0%(bb)\_q"
		--
		if language == "Placeholder" //TRANSLATORS: Once the playlist has been saved, or saving has failed. Use _name as the playlist name
		{
			
		}
		elseif language == "Deutsch"
		{
			if _o == 1 //If it saves successfully
			{
				"[Playlist wurde erfolgreich als '%(_name)' gespeichert.]"
			}
			else //If saving fails
			{
				if ISFUNC("OnCustom_ActionSurfaces") && CustomFuncs[0] == 1; "\![embed,OnCustom_ActionSurfaces,Error]"
				else; "\s[6]"
				--
				"[Speichervorgang fehlgeschlagen.]"
			}
		}
		elseif language == "Русский"
		{
			
			if _o == 1 //If it saves successfully
			{
				"[Плейлист сохранен как '%(_name)'.]"
			}
			else //If saving fails
			{
				if ISFUNC("OnCustom_ActionSurfaces") && CustomFuncs[0] == 1; "\![embed,OnCustom_ActionSurfaces,Error]"
				else; "\s[6]"
				--
				"[Не удалось сохранить.]"
			}
		}
		elseif language == "Français"
		{
			if _o == 1 //If it saves successfully
			{
				"[Playlist sauvegardée avec succès en tant que '%(_name)'.]"
			}
			else //If saving fails
			{
				if ISFUNC("OnCustom_ActionSurfaces") && CustomFuncs[0] == 1; "\![embed,OnCustom_ActionSurfaces,Error]"
				else; "\s[6]"
				--
				"[Echec de la sauvegarde de la playlist.]"
			}
		}
		elseif language == "Polski"
		{
			
			if _o == 1 //If it saves successfully
			{
				"[Lista odtwarzania zapisana pomyślnie jako '%(_name)'.]"
			}
			else //If saving fails
			{
				if ISFUNC("OnCustom_ActionSurfaces") && CustomFuncs[0] == 1; "\![embed,OnCustom_ActionSurfaces,Error]"
				else; "\s[6]"
				--
				"[Nie udało się zapisać listy odtwarzania.]"
			}
		}
		else //English
		{
			if _o == 1 //If it saves successfully
			{
				"[Playlist saved successfully as '%(_name)'.]"
			}
			else //If saving fails
			{
				if ISFUNC("OnCustom_ActionSurfaces") && CustomFuncs[0] == 1; "\![embed,OnCustom_ActionSurfaces,Error]"
				else; "\s[6]"
				--
				"[Failed to save playlist.]"
			}
		}
		--
		"\x%(bbb) \![raise,OnMusicMenu]"
	}
}

OnPlaylistOverwrite
{
	if reference1 == "are you sure"
	{
		"\0%(bb)"
		--
		if language == "Placeholder" //TRANSLATORS: If the user types the name of a playlist that already exists. reference0 is the name in question
		{
			
		}
		elseif language == "Deutsch"
		{
			"[Der Name '%(reference0)' ist bereits in Verwendung.\w8\w8 Möchtest du '%(reference0)' überschreiben?]"
			--
			"\n\n\![*]\q[Überschreiben,OnPlaylistOverwrite,%(reference0)]\n\n\![*]\q[Abbrechen,OnSavePlaylist]\e"
		}
		elseif language == "Русский"
		{
			"[Название '%(reference0)' уже использует.\w8\w8 Ты хочешь переписать '%(reference0)'?]"
			--
			"\n\n\![*]\q[Переписать,OnPlaylistOverwrite,%(reference0)]\n\n\![*]\q[Не Переписать,OnSavePlaylist]\e"
		}
		elseif language == "Français"
		{
			"[Le nom '%(reference0)' est déjà utilisé.\w8\w8 Veux-tu écraser '%(reference0)' ?]"
			--
			"\n\n\![*]\q[L'écraser,OnPlaylistOverwrite,%(reference0)]\n\n\![*]\q[Ne pas le faire,OnSavePlaylist]\e"
		}
		elseif language == "Polski"
		{
			"[Nazwa '%(reference0)' jest już w użyciu.\w8\w8 Czy chcesz nadpisać '%(reference0)'?]"
			--
			"\n\n\![*]\q[Nadpisz,OnPlaylistOverwrite,%(reference0)]\n\n\![*]\q[Nie nadpisuj,OnSavePlaylist]\e"
		}
		else //English
		{
			"[The name '%(reference0)' is already in use.\w8\w8 Do you want to overwrite '%(reference0)'?]"
			--
			"\n\n\![*]\q[Overwrite it,OnPlaylistOverwrite,%(reference0)]\n\n\![*]\q[Don't,OnSavePlaylist]\e"
		}
	}
	else
	{
		"\![raise,OnPlaylistName,%(reference0),overwrite]"
	}
}

OnLoadPlaylist //Menu for loading playlists
{
	_playlists = FENUM("/../../playlists/")
	if ARRAYSIZE(_playlists) == 0; _f = MKDIR("/../../playlists/")
	_display = ""
	foreach _playlists; _playlist
	{
		_playlist = RE_REPLACE(_playlist,"\.m3u$","")
		_display += "\q[(x),OnDeletePlaylist,%(_playlist)] \q[%(_playlist),OnSelectPlaylist,%(_playlist)]\n"
	}
	--
	"\C\![lock,balloonrepaint]\c\0\_q%(bb)\*\![set,autoscroll,disable]"
	--
	if language == "Placeholder" //TRANSLATORS: Loading a playlist, needs a note that if your current playlist is not saved it will be lost
	{
		
	}
	elseif language == "Deutsch"
	{
		"[Welche Playlist möchtest du laden? Wenn die aktuelle Playlist nicht gespeichert wird, wird sie verloren gehen.]"
		--
		"\n\n\![*]\q[Zurück zu Musik-Einstellungen,OnMusicSettings]"
	}
	elseif language == "Русский"
	{
		"[Который плейлист хочешь нагрузить? Если не сохраненно, плейлист, который уже есть, будет удаленно.]"
		--
		"\n\n\![*]\q[Назад в Настроек Музыки,OnMusicSettings]"
	}
	elseif language == "Français"
	{
		"[Quelle playlist veux-tu charger ? Si l'actuelle n'est pas sauvegardée, elle sera perdue.]"
		--
		"\n\n\![*]\q[Retour aux Paramètres des Musiques,OnMusicSettings]"
	}
	elseif language == "Polski"
	{
		"[Którą listę odtwarzania chcesz załadować? Jeśli aktualna lista odtwarzania nie zostanie zapisana, zostanie utracona..]"
		--
		"\n\n\![*]\q[Powrót do ustawień muzycznych,OnMusicSettings]"
	}
	else //English
	{
		"[Which playlist do you want to load? If the current playlist is not saved, it will be lost.]"
		--
		"\n\n\![*]\q[Back to Music Settings,OnMusicSettings]"
	}
	--
	"\n\n%(_display)\![unlock,balloonrepaint]\e"
}

OnSelectPlaylist //Loading the playlist
{
	NowPlaying[0] = ""
	NowPlaying[1] = 0
	NowPlaying[2] = ""
	CurrentPlaylist = IARRAY
	_path = "/../../playlists/%(reference0).m3u"
	_o = FOPEN(_path,"r")
	--
	for _buff = FREAD(_path); _buff != -1; _buff = FREAD(_path)
	{
		CurrentPlaylist ,= _buff
	}
	--
	_f = FCLOSE(_path)
	ShuffledPlaylist = ShufflePlaylist(NowPlaying[1],CurrentPlaylist)
	--
	"%(NonSingingSurfaces)"
	--
	"\![sound,stop]%(OnNotifySongInfo)"
	--
	OnMusicMenu
}

OnDeletePlaylist
{
	_playlist = IARRAY
	_path = "/../../playlists/%(reference0).m3u"
	_o = FOPEN(_path,"r")
	--
	for _buff = FREAD(_path); _buff != -1; _buff = FREAD(_path)
	{
		_playlist ,= _buff
	}
	--
	_f = FCLOSE(_path)
	_songs = ARRAYSIZE(_playlist)
	--
	"\0%(bb)\*"
	--
	if language == "Placeholder" //TRANSLATORS: This is confirmation before deleting a playlist. Use reference0 for the playlist name, and _songs for the amount of songs inside it
	{
		
	}
	elseif language == "Deutsch"
	{
		"[Bist du sicher, dass du '%(reference0)' und die %(_songs) Lieder darin löschen möchtest?\w8 Dies kann nicht rückgängig gemacht werden.]"
		--
		"\n\n\![*]\q[Löschen,OnPlaylistDeleted,%(reference0)]\n\![*]\q[Abbrechen,OnLoadPlaylist]\e"
	}
	elseif language == "Русский"
	{
		"[Уверен_а, что хочешь удалить '%(reference0)' и внутренные %(_songs) песни?\w8 Этого вещь не можешь отменить.]"
		--
		"\n\n\![*]\q[Удалить,OnPlaylistDeleted,%(reference0)]\n\![*]\q[Отменить,OnLoadPlaylist]\e"
	}
	elseif language == "Français"
	{
		"[Es-tu sûr de vouloir supprimer '%(reference0)' et les %(_songs) musiques à l'intérieur ?\w8 Cela ne peut pas être défait.]"
		--
		"\n\n\![*]\q[Supprimer,OnPlaylistDeleted,%(reference0)]\n\![*]\q[Annuler,OnLoadPlaylist]\e"
	}
	elseif language == "Polski"
	{
		"[Czy na pewno chcesz usunąć '%(reference0)' i %(_songs) utworów w środku?\w8 Tego nie da się cofnąć.]"
		--
		"\n\n\![*]\q[Usuń,OnPlaylistDeleted,%(reference0)]\n\![*]\q[Anuluj,OnLoadPlaylist]\e"
	}
	else //English
	{
		"[Are you sure you want to delete '%(reference0)' and the %(_songs) songs inside?\w8 This cannot be undone.]"
		--
		"\n\n\![*]\q[Delete it,OnPlaylistDeleted,%(reference0)]\n\![*]\q[Cancel,OnLoadPlaylist]\e"
	}
}

OnPlaylistDeleted //Actually deleting the file
{
	_path = "/../../playlists/%(reference0).m3u"
	_f = FDEL(_path)
	"\0%(bb)"
	--
	if language == "Placeholder" //TRANSLATORS: Once a playlist has been deleted, or deleting has failed. Use reference0 for the playlist name.
	{
		
	}
	elseif language == "Deutsch"
	{
		if _f == 1 //If the playlist deleted successfully
		{
			"[Playlist '%(reference0)' wurde gelöscht.]\x"
		}
		else //If it was unable to delete
		{
			"[Etwas ist schief gegangen.\w8 Du kannst die Playlist \_a[OnPlaylistPath]hier\_a manuell löschen.]\x"
		}
	}
	elseif language == "Русский"
	{
		if _f == 1 //If the playlist deleted successfully
		{
			"[Плейлист '%(reference0)' удален.]\x"
		}
		else //If it was unable to delete
		{
			"[Что-то пошло не так.\w8 Ты можешь удалить сам_а \_a[OnPlaylistPath]здесь\_a если нужно.]\x"
		}
	}
	elseif language == "Français"
	{
		if _f == 1 //If the playlist deleted successfully
		{
			"[Playlist '%(reference0)' supprimée.]\x"
		}
		else //If it was unable to delete
		{
			"[Quelque chose n'a pas marché.\w8 Tu peux la supprimer manuellement\_a[OnPlaylistPath]ici\_a si tu en as besoin.]\x"
		}
	}
	elseif language == "Polski"
	{
		if _f == 1 //If the playlist deleted successfully
		{
			"[Playlists '%(reference0)' usunięta.]\x"
		}
		else //If it was unable to delete
		{
			"[Coś poszło nie tak.\w8 Możesz ją usunąć ręcznie \_a[OnPlaylistPath]tutaj\_a jeśli chcesz.]\x"
		}
	}
	else
	{
		if _f == 1 //If the playlist deleted successfully
		{
			"[Playlist '%(reference0)' deleted.]\x"
		}
		else //If it was unable to delete
		{
			"[Something went wrong.\w8 You can delete it manually \_a[OnPlaylistPath]here\_a if you need to.]\x"
		}
	}
	--
	OnLoadPlaylist
}

OnPlaylistPath //Opening the folder for the user
{
	"\C\![open,file,playlists]\_l[0,0] "
}

OnClearPlaylist
{
	_num = ARRAYSIZE(CurrentPlaylist)
	
	"\0%(bb)"
	--
	if language == "Placeholder" //TRANSLATORS: Confirmation dialogue for clearing the current playlist. _num is the number of songs in the playlist
	{
		
	}
	elseif language == "Deutsch"
	{
		"[Es sind %(_num) Lieder in der aktuellen Playlist. Bist du sicher, dass du sie leeren möchtest? Sie kann nicht wiederhergestellt werden wenn sie nicht gespeichert wurde.]"
		--
		"\n\n\_q\![*]\q[Leeren,OnPlaylistCleared,%(_argv[0])]\n\![*]\q[Abbrechen,OnMusicSettings]\e"
	}
	elseif language == "Русский"
	{
		"[В этом плейлисте %(_num) песни. Ты уверен, что хочешь отчистить? Если не был сохраненно, ты не можешь его вернуть.]"
		--
		"\n\n\_q\![*]\q[Отчистить,OnPlaylistCleared,%(_argv[0])]\n\![*]\q[Не отчистить,OnMusicSettings]\e"
	}
	elseif language == "Français"
	{
		"[Il y a %(_num) musiques dans la playlist actuelle. Es-tu sûr de vouloir la vider ? Tu ne pourras pas la récuperer à moins que tu ne l'ais sauvegardée.]"
		--
		"\n\n\_q\![*]\q[La vider,OnPlaylistCleared,%(_argv[0])]\n\![*]\q[Ne pas le faire,OnMusicSettings]\e"
	}
	elseif language == "Polski"
	{
		"[W tej playliście jest %(_num) utworów. Czy na pewno chcesz ją wyczyścić? Nie można jej przywrócić, jeśli nie została zapisana..]"
		--
		"\n\n\_q\![*]\q[Wyczyść,OnPlaylistCleared,%(_argv[0])]\n\![*]\q[Nie czyść,OnMusicSettings]\e"
	}
	else //English
	{
		"[There are %(_num) songs in the current playlist. Are you sure you want to clear it? It cannot be brought back unless you have saved it.]"
		--
		"\n\n\_q\![*]\q[Clear it,OnPlaylistCleared,%(_argv[0])]\n\![*]\q[Don't,OnMusicSettings]\e"
	}
}

OnPlaylistCleared
{
	CurrentPlaylist = IARRAY
	NowPlaying[0] = "" //song name
	NowPlaying[1] = -1 //song position
	NowPlaying[2] = "" //Paused song
	"\![sound,stop]%(OnNotifySongInfo)"
	--
	"%(NonSingingSurfaces)%(bb)"
	--
	if reference0 == ""; OnMusicMenu
	else
	{
		if language == "Placeholder" //TRANSLATORS: This is if the user clears the playlist via a hotspot on the ghost
		{
			
		}
		elseif language == "Deutsch"
		{
			"[Die Playlist wurde geleert.]"
			--
			"\n\n\_q\![*]\q[Musik-Bedienung öffnen,OnMusicMenu]\n\![*]\q[Schließen,OnCancel]\e"
		}
		elseif language == "Русский"
		{
			"[Плейлист отчистил.]"
			--
			"\n\n\_q\![*]\q[Открыть music controls,OnMusicMenu]\n\![*]\q[Закрыть,OnCancel]\e"
		}
		elseif language == "Français"
		{
			"[La playlist a été vidée.]"
			--
			"\n\n\_q\![*]\q[Ouvrir les controles des musiques,OnMusicMenu]\n\![*]\q[Fermer,OnCancel]\e"
		}
		elseif language == "Polski"
		{
			"[Playlista została wyczyszczona..]"
			--
			"\n\n\_q\![*]\q[Otwórz kontrolki muzyki,OnMusicMenu]\n\![*]\q[Zamknij,OnCancel]\e"
		}
		else
		{
			"[The playlist has been cleared.]"
			--
			"\n\n\_q\![*]\q[Open music controls,OnMusicMenu]\n\![*]\q[Close,OnCancel]\e"
		}
	}
}

ShufflePlaylist //Shuffles the array but keeps the first element the same
{
	_start = IARRAY
	for _i = 0; _i < _argc - 1; _i++
	{
		if _i == _argv[0]; continue
		else; _start ,= _i
	}
	
	_len = ARRAYSIZE(_start)
	_output = IARRAY
	if _argv[0] != "|removed|"; _output ,= TOINT(_argv[0])
	for _i = 0; _i < _len; _i++
	{
		_l = ARRAYSIZE(_start)
		_rand = RAND(_l)
		_output ,= _start[_rand]
		_start[_rand] = IARRAY
	}
	_output
}

OnFindSongs //Checks for music files in folders and multiple files
{
	//This portion normalizes the input to a general purpose array
	_added = IARRAY
	_input = IARRAY
	_recursive = IARRAY
	LOGGING("FENUM == '%(_argv[1])' ")
	LOGGING("SIZE: %(ARRAYSIZE(_input))")
	if _argv[0] != ""
	{
		if _argv[1] == ""; {_added = ""; return}
		else; _input = SPLIT(_argv[1],"|") //If it came from FENUM
		LOGGING("AFTER FENUM SIZE: %(ARRAYSIZE(_input))")
		LOGGING("Opened folder %(_argv[0])")
	}
	else //If it came from multiple files
	{
		for _i = 1; _i < _argc; _i++ //Probably a bug to not be argc - 1... but it seems to be working????
		{
			if _argv[_i] != ""; _input ,= _argv[_i]
			LOGGING("ADDED SIZE: %(ARRAYSIZE(_input))")
		}
	}
	
	foreach _input; _file
	{
		_path = SPLITPATH(_file)
		_ext = TOLOWER(_path[3])
		if ASEARCH(_ext,CompatibleMusicFileTypes) != -1
		{
			_file = REPLACE(_file,",","%(C_BYTE1)")
			CurrentPlaylist ,= "%(_argv[0])%(_file)"
			LOGGING(_argv[0])
			_added ,= _file
			LOGGING("Songs so far: %(_added)")
		}
		elseif _ext == ""
		{
			LOGGING("===START RECURSIVE FUNCTION=== %(_file)")
			LOGGING("Songs so far: %(_added)")
			_recursive = OnFindSongs("%(_argv[0])%(_file)\",FENUM("%(_argv[0])%(_file)",'|'))
			LOGGING("Songs recursed: %(_recursive)")
			if _recursive != ""; _added ,= _recursive
			LOGGING(_added)
		}
	}
	LOGGING("FINAL ADD: %(_added)")
	TOSTR(_added)
	//_added
}

ACYCLE
{
	_output = IARRAY
	if _argv[0] == "-" //Backwards
	{
		_c = _argc - 1
		_output ,= _argv[_c]
		for _i = 1; _i < _c; _i++
		{
			_output ,= _argv[_i]
		}
	}
	else //Forwards
	{
		for _i = 2; _i < _argc; _i++
		{
			_output ,= _argv[_i]
		}
		_output ,= _argv[1]
	}
	_output
}

//---ASCOOTEX---
//Array scoot EX. Scoots a value forwards or backwards in an array by 1. You'll need to plan ahead with your menus and set them up to send the element number rather than the name of the item you want to scoot.
//Argument 0: Number of the element that you want to scoot
//Argument 1: - if you want to scoot it backwards, + if you want to scoot it forwards
//Argument 2: The array you want to scoot in

//ShuffledPlaylist = ASCOOT(5,"+",ShuffledPlaylist)

ASCOOTEX
{
	LOGGING("ASCOOTEX")
	_array = _argv //Take in all the arguments as an array
	_array[1] = IARRAY //Erase the other arguments because we don't want them in the array
	_array[0] = IARRAY
	_index = TOINT(_argv[0])
	if _index > (ARRAYSIZE(_array) - 1) || _index < 0 //Not sure why this is here... perhaps investigate later
	{
		_array
		return
	}
	if _argv[1] == "-" //Backwards
	{
		if _argv[0] == 0 //If it's already at the start of the array
		{
			_array
			return
		}
		_curnum = _index //Get positions
		_prvnum = _curnum - 1
		
		_current = _array[_curnum] //Assign elements to temp vars
		_prev = _array[_prvnum]
		
		_array[_curnum] = _prev //Replace elements with swapped elements
		_array[_prvnum] = _current
	}
	else //Forwards
	{
		if _argv[0] == (ARRAYSIZE(_array) - 1) //If it's already at the end of the array
		{
			_array
			return
		}
		_curnum = _index //Get positions
		_nxtnum = _curnum + 1
		
		_current = _array[_curnum] //Assign elements to temp vars
		_next = _array[_nxtnum]
		
		_array[_curnum] = _next //Replace elements with swapped elements
		_array[_nxtnum] = _current
	}
	_array
}

CompatibleMusicFileTypes : array
{
	//In an order that makes sense to me
	// //Available without LAV Filters
	// ".mid"; ".mp3"; ".wav"; ".wma" 
	
	// //With LAV Filters. I have tested this whole block myself and they work.
	// ".8svx"; ".ac3"; ".aiff"; ".amb"; ".au"; ".avr"; ".caf"; ".dts"; ".fap"; ".flac"; ".hcom"
	// ".ircam"; ".m4a"; ".m4r"; ".maud"; ".mp2"; ".nist"; ".oga"; ".ogg"; ".opus"; ".paf"
	// ".pfv"; ".ra"; ".sln"; ".snd"; ".sph"; ".spx"; ".tta"; ".voc"; ".w64"; ".wv"; ".wve"
	
	// //With LAV Filters. I have not tested these, but they should work. Also includes video files!
	// ".ape"; ".avo"; ".wmv"; ".rm"; ".rmvb"; ".mp4"; ".mkv"; ".flv"; ".mpg"
	
	//Alphabetical so I don't get complaints lol
	; ; ;  
	
	".8svx"; ".ac3"; ".aiff"; ".amb"; ".ape"; ".au"; ".avo"; ".avr"; ".caf"; ".dts"; ".fap"; ".flac"; ".flv"; ".hcom"
	".ircam"; ".m4a"; ".m4r"; ".maud"; ".mid"; ".mkv"; ".mp2"; ".mp3"; ".mp4"; ".mpg"; ".nist"; ".oga"; ".ogg"; ".opus"; ".paf"
	".pfv"; ".ra"; ".rm"; ".rmvb"; ".sln"; ".snd"; ".sph"; ".spx"; ".tta"; ".voc"; ".w64"; ".wav"; ".wma"; ".wmv"; ".wv"; ".wve"
}
