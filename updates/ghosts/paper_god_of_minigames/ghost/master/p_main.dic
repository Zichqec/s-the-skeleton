//—————————— Boot Events ——————————
OnFirstBoot
{
	stroke = 0
	RandomTalkInterval = "Off"
	IsFirstBoot = 1
	
	Wins.Hangman = 0
	Wins.Jumble = 0
	Wins.Wordsearch = 0
	Wins.RPS = 0
	
	Losses.Hangman = 0
	Losses.Jumble = 0
	//Losses.Wordsearch = 0
	Losses.RPS = 0
	
	Quits.Hangman = 0
	Quits.Jumble = 0
	Quits.Wordsearch = 0
	Quits.RPS = 0
	
	Ties.RPS = 0
	
	
	OnRandomMinigame("firstboot")
}

OnBoot
{
	IsFirstBoot = 0
}

OnClose
{
	"\0\s[0]\-\e"
}

FinishFirstBoot
{
	IsFirstBoot = 0
	"\n\nThank you for an entertaining game.\w8 I think I'll stay around for a while,\w4 in case you'd care for another.\e"
}

FirstBootUninstall
{
	"\tNo games,\w4 no ghost.\w8\w8\![vanishbymyself]"
}

//—————————— Misc Events ——————————

OnMouseMove
{
	if reference3 == 0
	{
		if stroke == ""; stroke = 0
		stroke++
		if stroke >= 50 && !MenuIsOpen
		{
			stroke = 0
			OnMiniGameMenu
		}
	}
}

OnMouseLeaveAll
{
	stroke = 0
}

OnMouseDoubleClick
{
	if !MenuIsOpen; OnRandomMinigame
}

OnAiTalk
{
	if RandomTalkInterval == "On"; RandomizeTalkInterval
	if !MenuIsOpen; OnRandomMinigame
}

RandomizeTalkInterval
{
	aitalkinterval = (RAND(360) * 10) + 60
}

OnSurfaceRestore
{
	"\1\s[-1]\0\s[0]"
}

OnGenericQuit
{
	"\s[0]"
}

On_homeurl
{
	"https://zichqec.github.io/s-the-skeleton/updates/ghosts/paper_god_of_minigames/"
}

OnBalloonBreak
{
	if "__WORD_SEARCH_RUNNING__" _in_ reference0; OnWordSearch
}


//—————————— Update Events ——————————

// //Starting to actually update
// OnUpdateBegin
// {
	// "\0\s[0]Ok,\w4 I'll update!\w8\w8\e"
// }

// //reference0 is the number of new files, starting from 0
// OnUpdateReady
// {
	// reference0++ //Number of files starts from 0, so this displays the correct amount
	// _s = ""; _is = "is"; if reference0 != 1; _s = "s"; _is = "are" //plural checks, adds an s and changes is to are if there's more than 1 file
	
	// "\0\s[0]There %(_is) %(reference0) new file%(_s)!\w8\w8\e"
// }

// //When the update finishes. Don't forget to initialize any new variables you've created, more on that in Bootend.
// //reference0 is 'none' if there were no new files to update with, reference1 is a list of new file names, separated by commas
// OnUpdateComplete
// {
	// UpdateVars
	// AutoUpdates[1] = 0
	// if reference0 == "none"
	// {
		// "\0\s[0]There are no new files.\e"
	// }
	// else
	// {
		// UpdateVars //Sets new variables upon a successful update. See the end of Bootend for an explanation on this.
		
		// "\0\s[0]Update complete!\w8\w8 Do you want to see the changelog?"
		// --
		// "\n\n\![*]\q[Yes,OnChangeLog]\n\![*]\q[No,NoChangelog]\e"
	// }
// }

//I've put this here so it's easier to remember to update the version number while you're updating the changelog. This will display on the ghost's menu. I made it an envelope so you can have it be the same across multiple menus for multiple modes, if you want.
ghostver
{
	"1.0.1"
}

//the autoscroll tag here means the user will see the changelog starting from the top. I recommend putting the new versions on top, and old versions under that.
OnChangeLog : all //Haha I hope I remember to update this
{
	_log = ChangeLog[reference0][1,C_BYTE1]
	_date = ChangeLog[reference0][0,C_BYTE1]
	
	
	"\0\s[0]\_q\![set,autoscroll,disable]\*"
	"%(_log)"
	"\![*]\q[Back,OnMiniGameMenu]"
	
	"\_l[0,0]"

	if reference0 >= ARRAYSIZE(ChangeLog) - 1; "\f[color,disable]<<\f[color,default]"
	else; "\q[<<,OnChangeLog,%(ARRAYSIZE(ChangeLog) - 1)]"

	"  "

	if reference0 >= ARRAYSIZE(ChangeLog) - 1; "\f[color,disable]< Prev\f[color,default]"
	else; "\q[< Prev,OnChangeLog,%(reference0 + 1)]"

	"%(newline)\f[align,right]"

	if reference0 <= 0; "\f[color,disable]Next >\f[color,default]"
	else; "\q[Next >,OnChangeLog,%(reference0 - 1)]"

	"  "

	if reference0 <= 0; "\f[color,disable]>>\f[color,default]"
	else; "\q[>>,OnChangeLog,0]"

	"\n%(newline)\f[align,center]\f[height,-1]\f[color,disable]"

	if reference0 == 0; "(Current version - %(_date))"
	else; "(%(_date))"

	"%(newline)\f[align,left]"
	
	"\e"
	
}

//Newer changelogs up top //TODO unfinished
ChangeLog : array
{	
	all:/
	{
		"6/3/22"; C_BYTE1
		"\f[align,center]-Version 1.0.1-\n \n\n[half]\f[align,left]"
		"%(ul) Corrected some entries on the word list.\n\n"
		"%(ul) Fixed word list being broken thanks to unexpected mechanics.\n\n"
		"%(ul) Added custom cursor.\n\n"
		"%(ul) Added dialogue for network updates.\n\n"
		"%(ul) Updated the Paperboard balloon. You will have to update this separately from the menu or the \_a[OnOpenBalloonExplorer]ghost explorer\_a.\n\n"
		"%(ul) Fixed a bug where closing the input box in Jumble would make Paper forget what the word was.\n\n"
		"%(ul) Updated YAYA to Tc570-2.\n\n"
		"\n"
	}
	
	all:/
	{
		"5/12/22"; C_BYTE1
		"\f[align,center]-Version 1.0.0-\n \n\n[half]\f[align,left]"
		"%(ul) Initial release for Ghost Jam 2022.\n\n"
	}
	
}

OnOpenBalloonExplorer
{
	"\C\![open,balloonexplorer]"
}

//Revamped this code! It's a lot more concise now
//reference0 is the name of the file currently being downloaded
OnUpdate.OnDownloadBegin
{
	_progress = TOINT(reference1) + 1
	_total = TOINT(reference2) + 1

	"\0\s[0]\_qDownloading %(reference0)...\_l[0,0]\n\n\n\n\n"
	--
	_display = ""
	_display += "\f[name,courier new]"
	for _i = 0; _i < _total; _i++
	{
		//Loading bar display - customize with text or images or whatever
		if _i < _progress; _display += "■" //Files that have already been downloaded
		else; _display += "□" //Files that have not been downloaded yet
	}
	--
	"%(_display)\n\n%(_progress)/%(_total)\e"
}

// //reference0 is the reason the update failed
// OnUpdateFailure //If the update fails
// {
	// if reference0 == "timeout" //If it timed out
	// {
		// "\0\s[0]Sorry,\w4 the connection timed out.\e"
	// }
	// elseif reference0 == "md5 miss" //If the update files have not been uploaded correctly and don't match the updates2.dau
	// {
		// _file = SPLITPATH(reference1)[2] + SPLITPATH(reference1)[3] //This gets the name and extension of the offending file
		// "\0\s[0]The MD5 values don't match.\w8\w8 You should contact the ghost author and let them know that '%(_file)' is giving an MD5 error.\e"
	// }
	// elseif reference0 == "artificial" //If the user cancels the update by double clicking the balloon
	// {
		// "\0\s[0]Oh,\w4 did you change your mind?\e"
	// }
	// else //Any other errors
	// {
		// "\0\s[0]Sorry,\w4 I got an error:\w4 '%(reference0)'.\e"
	// }
// }

OnStartBalloonUpdate
{
	"\![update,balloon]"
}

//—————————— Paper Specific Events ——————————

OnRandomMinigame : nonoverlap
{
	"\![raise,OnStartWordSearch,%(_argv[0])]"
	"\![raise,OnStartHangman,%(_argv[0])]"
	"\![raise,OnJuniorJumble,%(_argv[0])]"
	"\![raise,OnStartRPS,%(_argv[0])]"
}

OnMiniGameMenu : all
{
	"\0\_q\s[0]"
	"\![*]\q[Word Search,OnStartWordSearch]\n"
	"\![*]\q[Hangman,OnStartHangman]\n"
	"\![*]\q[Jumble,OnJuniorJumble]\n"
	"\![*]\q[Rock Paper Scissors,OnStartRPS]\n"
	"\n"
	"\![*]\q[Adjust Minigame Frequency,OnTalkInterval]\n"
	//"\![*]\q[Config,OnConfigMenu]\n"
	"\![*]\q[Stats,OnGameStats]\n"
	"\![*]\q[Changelog,OnChangeLog]\n"
	"\![*]\q[Update Balloon,OnStartBalloonUpdate]\n"
	"\n"
	"\![*]\q[Nevermind,blank]"
}

OnTalkInterval : all
{
	"\0\_qTime between games:\n\n"
	"\![*]\q[1 minute,OnNewInterval,60]\n"
	"\![*]\q[5 minutes,OnNewInterval,300]\n"
	"\![*]\q[10 minutes,OnNewInterval,600]\n"
	"\![*]\q[15 minutes,OnNewInterval,900]\n"
	"\![*]\q[30 minutes,OnNewInterval,1800]\n"
	"\![*]\q[1 hour,OnNewInterval,3600]\n"
	"\![*]\q[Random,OnNewInterval,Random]\n"
	"\n\![*]\q[Cancel,OnMiniGameMenu]\e"
}

OnNewInterval
{
	if reference0 == "Random"
	{
		RandomTalkInterval = "On"
		RandomizeTalkInterval
	}
	else
	{
		RandomTalkInterval = "Off"
		aitalkinterval = TOINT(reference0)
	}
}

OnConfigMenu : all
{
	if Cursor == ""; Cursor = "Color"
	
	"\0\_q"
	"Custom Cursor? \f[color,default.anchor]\__q[OnToggleCursor]%(Cursor)\__q"
}

OnToggleCursor
{
	if Cursor == "Color"; Cursor = "Off"
	elseif Cursor == "Off"; Cursor = "Black & White"
	else; Cursor = "Color"
	
	SetCursor
	--
	OnConfigMenu
}

SetCursor
{
	_path = ""
	if Cursor == "Color"; _path = "cursorcl.cur"
	elseif Cursor == "Black & White"; _path = "cursorbw.cur"
	
	"\![set,property,currentghost.seriko.cursor.scope(0).mouseuplist(Paper).path,%(_path)]"
}

OnTestCursor
{
	"%(reference)"
}

OnGameStats : all
{
	if Wins.Hangman == ""; Wins.Hangman = 0
	if Wins.Jumble == ""; Wins.Jumble = 0
	if Wins.Wordsearch == ""; Wins.Wordsearch = 0
	if Wins.RPS == ""; Wins.RPS = 0

	if Losses.Hangman == ""; Losses.Hangman = 0
	if Losses.Jumble == ""; Losses.Jumble = 0
	if Losses.Wordsearch == ""; Losses.Wordsearch = 0
	if Losses.RPS == ""; Losses.RPS = 0

	if Ties.RPS == ""; Ties.RPS = 0

	if Quits.Hangman == ""; Quits.Hangman = 0
	if Quits.Jumble == ""; Quits.Jumble = 0
	if Quits.Wordsearch == ""; Quits.Wordsearch = 0
	if Quits.RPS == ""; Quits.RPS = 0
	
	"\0\_q\b2\f[align,center]\![set,autoscroll,disable]\*"
	
	"%(emdash) Word Search %(emdash)\n\n"
	"Wins: %(Wins.Wordsearch)  Quits: %(Quits.Wordsearch)\n\n\n"
	
	"%(emdash) Hangman %(emdash)\n\n"
	"Wins: %(Wins.Hangman)  Losses: %(Losses.Hangman)  Quits: %(Quits.Hangman)\n\n\n"
	
	"%(emdash) Jumble %(emdash)\n\n"
	"Wins: %(Wins.Jumble)  Losses: %(Losses.Jumble)  Quits: %(Quits.Jumble)\n\n\n"
	
	"%(emdash) Rock Paper Scissors %(emdash)\n\n"
	"Wins: %(Wins.RPS)  Losses: %(Losses.RPS)  Ties: %(Ties.RPS)  Quits: %(Quits.RPS)\n\n\n"
	
	"\![*]\q[Back,OnMiniGameMenu]  \![*]\q[Done,cancelnodialogue]\e"
	
}

GameQuitGeneric
{
	"\s[0]"
	--
	".\w4.\w4.\w4 Hm.\w8\w8 Your choice."
	"How dull."
	"Have you had your fill already?"
	"Disappointing."
	"Fine."
	"You don't want to play?"
	"A lamentable outcome."
	"Are you not a fan of fun?"
	"Sigh.\w4.\w4.\w4 Another time,\w4 perhaps."
}

//For other ghosts to request stats from paper! Please send the name of your ghost as reference0!
OnPaperGameStats
{
	if reference0 == ""; reference0 == "__SYSTEM_ALL_GHOST__"
	if !MenuIsOpen; "\![raiseother,%(reference0),OnPaperGameStats,%(Wins.Wordsearch),%(Wins.Hangman),%(Losses.Hangman),%(Quits.Hangman),%(Wins.Jumble),%(Losses.Jumble),%(Quits.Jumble),%(Wins.RPS),%(Losses.RPS),%(Ties.RPS),%(Quits.RPS)]"
}

TamaOpenDialogues : nonoverlap
{
	"\b4Hm.\w8 It seems you have made a mistake.\w8 At least you admit it."
}

TamaCloseDialogues : nonoverlap
{
	"\b4Rectified your error?\w8 For now,\w4 anyways..."
}

On_tamaOpen
{
	TamaHWND = reference0
	SETTAMAHWND(TamaHWND)
	SHIORI3FW.Push_X_SSTP_PassThru('Title',"Paper, God of Minigames") //These settings are all optional
	SHIORI3FW.Push_X_SSTP_PassThru('border.color','232323')
	SHIORI3FW.Push_X_SSTP_PassThru('background.color','fffcf4')
	SHIORI3FW.Push_X_SSTP_PassThru('default.color','000000') //and any other settings you can find in tama.txt
	SHIORI3FW.Push_X_SSTP_PassThru('fatal.color','f23e3e')
	SHIORI3FW.Push_X_SSTP_PassThru('error.color','f23e3e')
	SHIORI3FW.Push_X_SSTP_PassThru('warning.color','ff972d')
	TamaOpenDialogues
}

On_tamaExit
{
	SETTAMAHWND(0)
	TamaCloseDialogues
}

OnInitialize
{
	if reference0 == "reload" && TamaHWND != ""; SETTAMAHWND(TamaHWND)
	else; TamaHWND = ""
}

OnDestroy
{
	if reference0 != "reload"; TamaHWND = ""
	SETTAMAHWND(0)
}