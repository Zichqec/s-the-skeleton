//Written by Zichqec https://zichqec.github.io/s-the-skeleton/

OnStartHangman //Sets up starting variables
{
	HMword = GameWords //Pulls the word to guess from a pool of words
	HMlet = IARRAY //HMlet[0] is guessed letters, HMlet[1] is incorrect letters
	OnHangman
}

OnHangman //Main game window
{
	_maxwrong = 6 //Maximum incorrect guesses - set to whatever you like
	_word = ""
	_left = 0
	for _i = 0; _i < STRLEN(HMword); _i++
	{
		_let = TOLOWER(SUBSTR(HMword,_i,1)) //Get the current letter and make it lowercase
		if _let _in_ HMlet[0] || _let == " "
		{
			_word += "%(SUBSTR(HMword,_i,1))"
		}
		else
		{
			_word += "_ "
			_left++
		}
	}
	--
	if (STRLEN(HMlet[1]) / 2) >= _maxwrong //If the number of incorrect letters is equal to or greater than the number of max tries
	{
		Losses.Hangman++
		
		if IsFirstBoot
		{
			"Rest well,\w4 %(ANY('hungman','hanged man')).\w8 Perhaps next time you'll survive."
			--
			FinishFirstBoot
		}
		else
		{
			"Another death.\w8 Another loss.\w8 Better luck next time."
			"And so Death does toll for another.\w8 Let us try to survive the next round."
			"A slow and inescapable loss.\w8 Tragic."
		}
	}
	elseif _left > 0 //If there are still letters to guess
	{
		_mistakes = (_maxwrong - (STRLEN(HMlet[1]) / 2))
		_marker = ""
		
		"\0\s[0]\i[101]\_q\*\![set,balloontimeout,-1]\![set,autoscroll,disable]\![open,inputbox,OnGuessNormal,-1]"
		--
		"%(_word)\n\nGuessed so far: %(HMlet[1])\n\nTries left: "
		--
		for _i = 0; _i < _mistakes; _i++
		{
			_marker += "\![*]"
		}
		--
		"%(_marker)"
		--
		if _left > 1
		{
			"\n\n\![*]\q[Guess the whole word,HangmanGuessWhole]"
		}
		--
		"\n\n\![*]\q[Give up,HangmanQuit]\e"
	}
	else //If _left is still 0, the user has guessed all letters correctly
	{
		HangmanWin
		--
		if IsFirstBoot
		{
			"A two-dimensional life spared.\w8 Congratulations.\w8"
			--
			FinishFirstBoot
		}
		else
		{
			"Congratulations.\w8 You'll be revered as a hero for this mercy."
			"To find the answer is to cut the rope.\w8 A job well done."
			"Enjoy this victory.\w8 I am certain that our hanged man is."
		}
	}
	--
	HangmanBack
}

OnGuessNormal
{
	if TOSTR(reference0) == "0.0" || TOSTR(reference0) == "0.000000"; reference0 = "." //Unlikely to come up, but periods are handled strangely, and also differently between aya and yaya because screw you lol
	if STRLEN(reference0) > 1 //The user has put in more than 1 letter
	{
		"One letter at a time,\w4 if you would."
		"Patience.\w8 Choose which letter you would like before the others."
		"I will not allow you to cheat with more than one letter at a time."
		--
		"\x"
	}
	elseif reference0 == ""
	{
		
	}
	elseif TOLOWER(reference0) _in_ TOLOWER(HMlet[0]) //The user has already guessed that letter
	{
		"I am afraid you have already guessed %(reference0) this game."
		"Again?\w8 Try something other than %(reference0),\w4 if you will."
		"You cannot try %(reference0) again.\w8 It is already done."
		--
		"\x"
	}
	elseif TOLOWER(reference0) _in_ TOLOWER(HMword) //The letter is in the word
	{
		HMlet[0] += reference0
	}
	else //The letter is not in the word
	{
		HMlet[0] += reference0
		HMlet[1] += "%(TOLOWER(reference0)) "
	}
	--
	OnHangman
}

Select.HangmanGuessWhole
{
	_word = ""
	_left = 0
	for _i = 0; _i < STRLEN(HMword); _i++
	{
		_let = TOLOWER(SUBSTR(HMword,_i,1)) //Get the current letter and make it lowercase
		if _let _in_ HMlet[0] || _let == " "
		{
			_word += "%(SUBSTR(HMword,_i,1))"
		}
		else
		{
			_word += "_ "
			_left++
		}
	}
	"\0\*\![set,balloontimeout,-1]\![set,autoscroll,disable]\![close,inputbox,OnGuessNormal]\![open,inputbox,OnGuessWhole,-1]"
	--
	"The word thus far is\n%(_word).\w8\n\nYou've already tried the following:\n%(HMlet[1])\w8\n\nBest of luck."
	"The word thus far is\n%(_word).\w8\n\nYou've already tried the following:\n%(HMlet[1])\w8\n\nMake it count."
	"The word thus far is\n%(_word).\w8\n\nYou've already tried the following:\n%(HMlet[1])\w8\n\nWhat do you think?"
	--
	"\n\n\![*]\q[Give up,HangmanQuit]\e"
}

OnGuessWhole
{
	_word = ""
	_left = 0
	for _i = 0; _i < STRLEN(HMword); _i++
	{
		_let = TOLOWER(SUBSTR(HMword,_i,1)) //Get the current letter and make it lowercase
		if _let _in_ HMlet[0] || _let == " "
		{
			_word += "%(SUBSTR(HMword,_i,1))"
		}
		else
		{
			_word += "_ "
			_left++
		}
	}
	if TOLOWER(reference0) == TOLOWER(HMword) //Correct guess, instant win
	{
		HangmanWin
		--
		if IsFirstBoot
		{
			"A two-dimensional life spared.\w8 Congratulations.\w8"
			--
			FinishFirstBoot
		}
		else
		{
			"Well done.\w8 A win with %(_left) letters left."
			"Congratulations.\w8 A win with %(_left) letters left."
			"Impressively done.\w8 A win with %(_left) letters left."
		}
	}
	else //Incorrect guess, instant lose
	{
		Losses.Hangman++
		
		if IsFirstBoot
		{
			"Rest well,\w4 %(ANY('hungman','hanged man')).\w8 Perhaps next time you'll survive."
			--
			FinishFirstBoot
		}
		else
		{
			"Ah.\w8 A gamble made and lost.\w8 You lose."
			"A poor choice,\w4 but I see how you got there.\w8 Next time,\w4 perhaps?"
			"Incorrect.\w8 Another win for Paper,\w4 and another man hanged."
		}
	}
	--
	HangmanBack
}

Select.HangmanInput
{
	"\C\![close,inputbox,OnGuessNormal]\![open,inputbox,OnGuessNormal,-1]\_l[0,0] "
}

Select.WholeInput
{
	"\C\![close,inputbox,OnGuessWhole]\![open,inputbox,OnGuessWhole,-1]\_l[0,0] "
}

Select.HangmanQuit
{
	Quits.Hangman++
	"\0\s[0]\![close,inputbox,OnGuessNormal]\![close,inputbox,OnGuessWhole]%(b)"
	--
	if IsFirstBoot
	{
		FirstBootUninstall
	}
	else
	{
		GameQuitGeneric
	}
}

HangmanBack
{
	"\n\n\![*]\q[Play Again,OnStartHangman]  \![*]\q[Enough,OnGenericQuit]\e"
}

HangmanWin //This function is called every time the user wins hangman. You can use it to easily add friendship/money/whatever in one easy place. This does not include dialogue, it's just for variable changes. The ones I've left in here are examples.
{
	Wins.Hangman++
	//friendship++
	//money++
}

// hangmanwords : nonoverlap //Words it can choose - add lots of these!
// {
	// "Hangman"
	// "Girl"
	// "Triangle"
	// "Rhythm"
	// "Jazz"
	// "Skeletons"
	// "Nyctophobia"
	// "Neophyte"
	// "Lenticular"
	// "Ukagaka"
	// "Ghost"
// }