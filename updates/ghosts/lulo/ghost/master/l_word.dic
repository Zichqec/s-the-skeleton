OnDialogueVars //Setting variables in random dialogue
{
	case reference0
	{
		when "asleepMode"
		{
			nowmode = "Asleep"
			"\C\![set,tasktrayicon,lulo_icon_asleep.ico]"
		}
		when "sleepyMode"
		{
			nowmode = "Sleepy"
			"\C\![set,tasktrayicon,lulo_icon_sleepy.ico]"
		}
		when "awakeMode"
		{
			nowmode = "Sleepy"
			"\C\![set,tasktrayicon,lulo_icon_awake.ico]"
		}
		when "readSleepy"
		{
			nowmode = "Sleepy"
		}
		when "readAsleep"
		{
			nowmode = "Asleep"
		}
		when "learnaboutsoul"
		{
			MiscFlags ,= "knowaboutsoul"
		}
		when "learnaboutdreams"
		{
			MiscFlags ,= "knowaboutdreams"
		}
		when "learnaboutmp3"
		{
			MiscFlags ,= "knowaboutmp3"
		}
		when "learnaboutnotebook"
		{
			MiscFlags ,= "knowaboutnotebook"
		}
		when "learnaboutgames"
		{
			MiscFlags ,= "knowaboutgames"
		}
		when "learnaboutshop"
		{
			MiscFlags ,= "knowaboutshop"
		}
	}
}

//Display name|Category|Price|Unlock condition (1 if always available)|Sold out condition (0 if never sells out) - old
//"Item name,categories,dressup type,price,unlock,sold out"
ShopItems : array
{
	_cheapclothing = 50
	_cheapfood = 10
	_cheappuzzle = 20
	_latenight = "%(hour < 5)"
	
	
	
	//---Sweaters---
	"Dark Red Sweater,clothes-sweaters-dark,Shirts,%(_cheapclothing),1,%(ASEARCH('Dark Red Sweater',PurchasedShirts))"
	"Medium Red Sweater,clothes-sweaters-medium,Shirts,%(_cheapclothing),1,%(ASEARCH('Medium Red Sweater',PurchasedShirts))"
	"Light Red Sweater,clothes-sweaters-light,Shirts,%(_cheapclothing),1,%(ASEARCH('Light Red Sweater',PurchasedShirts))"
	
	"Dark Orange Sweater,clothes-sweaters-dark,Shirts,%(_cheapclothing),1,%(ASEARCH('Dark Orange Sweater',PurchasedShirts))"
	"Medium Orange Sweater,clothes-sweaters-medium,Shirts,%(_cheapclothing),1,%(ASEARCH('Medium Orange Sweater',PurchasedShirts))"
	"Light Orange Sweater,clothes-sweaters-light,Shirts,%(_cheapclothing),1,%(ASEARCH('Light Orange Sweater',PurchasedShirts))"
	
	"Dark Yellow Sweater,clothes-sweaters-dark,Shirts,%(_cheapclothing),1,%(ASEARCH('Dark Yellow Sweater',PurchasedShirts))"
	"Medium Yellow Sweater,clothes-sweaters-medium,Shirts,%(_cheapclothing),1,%(ASEARCH('Medium Yellow Sweater',PurchasedShirts))"
	"Light Yellow Sweater,clothes-sweaters-light,Shirts,%(_cheapclothing),1,%(ASEARCH('Light Yellow Sweater',PurchasedShirts))"
	
	"Dark Green Sweater,clothes-sweaters-dark,Shirts,%(_cheapclothing),1,%(ASEARCH('Dark Green Sweater',PurchasedShirts))"
	"Medium Green Sweater,clothes-sweaters-medium,Shirts,%(_cheapclothing),1,%(ASEARCH('Medium Green Sweater',PurchasedShirts))"
	"Light Green Sweater,clothes-sweaters-light,Shirts,%(_cheapclothing),1,%(ASEARCH('Light Green Sweater',PurchasedShirts))"
	
	"Dark Cyan Sweater,clothes-sweaters-dark,Shirts,%(_cheapclothing),1,%(ASEARCH('Dark Cyan Sweater',PurchasedShirts))"
	"Medium Cyan Sweater,clothes-sweaters-medium,Shirts,%(_cheapclothing),1,%(ASEARCH('Medium Cyan Sweater',PurchasedShirts))"
	"Light Cyan Sweater,clothes-sweaters-light,Shirts,%(_cheapclothing),1,%(ASEARCH('Light Cyan Sweater',PurchasedShirts))"
	
	"Dark Blue Sweater,clothes-sweaters-dark,Shirts,%(_cheapclothing),1,%(ASEARCH('Dark Blue Sweater',PurchasedShirts))"
	"Medium Blue Sweater,clothes-sweaters-medium,Shirts,%(_cheapclothing),1,%(ASEARCH('Medium Blue Sweater',PurchasedShirts))"
	"Light Blue Sweater,clothes-sweaters-light,Shirts,%(_cheapclothing),1,%(ASEARCH('Light Blue Sweater',PurchasedShirts))"
	
	"Dark Purple Sweater,clothes-sweaters-dark,Shirts,%(_cheapclothing),1,%(ASEARCH('Dark Purple Sweater',PurchasedShirts))"
	"Medium Purple Sweater,clothes-sweaters-medium,Shirts,%(_cheapclothing),1,%(ASEARCH('Medium Purple Sweater',PurchasedShirts))"
	"Light Purple Sweater,clothes-sweaters-light,Shirts,%(_cheapclothing),1,%(ASEARCH('Light Purple Sweater',PurchasedShirts))"
	
	"Dark Pink Sweater,clothes-sweaters-dark,Shirts,%(_cheapclothing),1,%(ASEARCH('Dark Pink Sweater',PurchasedShirts))"
	"Medium Pink Sweater,clothes-sweaters-medium,Shirts,%(_cheapclothing),1,%(ASEARCH('Medium Pink Sweater',PurchasedShirts))"
	"Light Pink Sweater,clothes-sweaters-light,Shirts,%(_cheapclothing),1,%(ASEARCH('Light Pink Sweater',PurchasedShirts))"
	
	"Dark Gray Sweater,clothes-sweaters-dark,Shirts,%(_cheapclothing),1,%(ASEARCH('Dark Gray Sweater',PurchasedShirts))"
	"Medium Gray Sweater,clothes-sweaters-medium,Shirts,%(_cheapclothing),1,%(ASEARCH('Medium Gray Sweater',PurchasedShirts))"
	"Light Gray Sweater,clothes-sweaters-light,Shirts,%(_cheapclothing),1,%(ASEARCH('Light Gray Sweater',PurchasedShirts))"
	
	
	
	//---Hoodies---
	"Dark Red Hoodie,clothes-hoodies-dark,Shirts,%(_cheapclothing),1,%(ASEARCH('Dark Red Hoodie',PurchasedShirts))"
	"Medium Red Hoodie,clothes-hoodies-medium,Shirts,%(_cheapclothing),1,%(ASEARCH('Medium Red Hoodie',PurchasedShirts))"
	"Light Red Hoodie,clothes-hoodies-light,Shirts,%(_cheapclothing),1,%(ASEARCH('Light Red Hoodie',PurchasedShirts))"
	
	"Dark Orange Hoodie,clothes-hoodies-dark,Shirts,%(_cheapclothing),1,%(ASEARCH('Dark Orange Hoodie',PurchasedShirts))"
	"Medium Orange Hoodie,clothes-hoodies-medium,Shirts,%(_cheapclothing),1,%(ASEARCH('Medium Orange Hoodie',PurchasedShirts))"
	"Light Orange Hoodie,clothes-hoodies-light,Shirts,%(_cheapclothing),1,%(ASEARCH('Light Orange Hoodie',PurchasedShirts))"
	
	"Dark Yellow Hoodie,clothes-hoodies-dark,Shirts,%(_cheapclothing),1,%(ASEARCH('Dark Yellow Hoodie',PurchasedShirts))"
	"Medium Yellow Hoodie,clothes-hoodies-medium,Shirts,%(_cheapclothing),1,%(ASEARCH('Medium Yellow Hoodie',PurchasedShirts))"
	"Light Yellow Hoodie,clothes-hoodies-light,Shirts,%(_cheapclothing),1,%(ASEARCH('Light Yellow Hoodie',PurchasedShirts))"
	
	"Dark Green Hoodie,clothes-hoodies-dark,Shirts,%(_cheapclothing),1,%(ASEARCH('Dark Green Hoodie',PurchasedShirts))"
	"Medium Green Hoodie,clothes-hoodies-medium,Shirts,%(_cheapclothing),1,%(ASEARCH('Medium Green Hoodie',PurchasedShirts))"
	"Light Green Hoodie,clothes-hoodies-light,Shirts,%(_cheapclothing),1,%(ASEARCH('Light Green Hoodie',PurchasedShirts))"
	
	"Dark Cyan Hoodie,clothes-hoodies-dark,Shirts,%(_cheapclothing),1,%(ASEARCH('Dark Cyan Hoodie',PurchasedShirts))"
	"Medium Cyan Hoodie,clothes-hoodies-medium,Shirts,%(_cheapclothing),1,%(ASEARCH('Medium Cyan Hoodie',PurchasedShirts))"
	"Light Cyan Hoodie,clothes-hoodies-light,Shirts,%(_cheapclothing),1,%(ASEARCH('Light Cyan Hoodie',PurchasedShirts))"
	
	"Dark Blue Hoodie,clothes-hoodies-dark,Shirts,%(_cheapclothing),1,%(ASEARCH('Dark Blue Hoodie',PurchasedShirts))"
	"Medium Blue Hoodie,clothes-hoodies-medium,Shirts,%(_cheapclothing),1,%(ASEARCH('Medium Blue Hoodie',PurchasedShirts))"
	"Light Blue Hoodie,clothes-hoodies-light,Shirts,%(_cheapclothing),1,%(ASEARCH('Light Blue Hoodie',PurchasedShirts))"
	
	"Dark Purple Hoodie,clothes-hoodies-dark,Shirts,%(_cheapclothing),1,%(ASEARCH('Dark Purple Hoodie',PurchasedShirts))"
	"Medium Purple Hoodie,clothes-hoodies-medium,Shirts,%(_cheapclothing),1,%(ASEARCH('Medium Purple Hoodie',PurchasedShirts))"
	"Light Purple Hoodie,clothes-hoodies-light,Shirts,%(_cheapclothing),1,%(ASEARCH('Light Purple Hoodie',PurchasedShirts))"
	
	"Dark Pink Hoodie,clothes-hoodies-dark,Shirts,%(_cheapclothing),1,%(ASEARCH('Dark Pink Hoodie',PurchasedShirts))"
	"Medium Pink Hoodie,clothes-hoodies-medium,Shirts,%(_cheapclothing),1,%(ASEARCH('Medium Pink Hoodie',PurchasedShirts))"
	"Light Pink Hoodie,clothes-hoodies-light,Shirts,%(_cheapclothing),1,%(ASEARCH('Light Pink Hoodie',PurchasedShirts))"
	
	"Dark Gray Hoodie,clothes-hoodies-dark,Shirts,%(_cheapclothing),1,%(ASEARCH('Dark Gray Hoodie',PurchasedShirts))"
	"Medium Gray Hoodie,clothes-hoodies-medium,Shirts,%(_cheapclothing),1,%(ASEARCH('Medium Gray Hoodie',PurchasedShirts))"
	"Light Gray Hoodie,clothes-hoodies-light,Shirts,%(_cheapclothing),1,%(ASEARCH('Light Gray Hoodie',PurchasedShirts))"
	
	//"Galaxy Hoodie Test,clothes-hoodies-unique,Shirts,%(_cheapclothing),1,%(ASEARCH('Galaxy Hoodie Test',PurchasedShirts))"
	
	
	
	//---Tshirts---
	"Dark Red T-Shirt,clothes-tshirts-dark,Shirts,%(_cheapclothing),1,%(ASEARCH('Dark Red T-Shirt',PurchasedShirts))"
	"Medium Red T-Shirt,clothes-tshirts-medium,Shirts,%(_cheapclothing),1,%(ASEARCH('Medium Red T-Shirt',PurchasedShirts))"
	"Light Red T-Shirt,clothes-tshirts-light,Shirts,%(_cheapclothing),1,%(ASEARCH('Light Red T-Shirt',PurchasedShirts))"
	
	"Dark Orange T-Shirt,clothes-tshirts-dark,Shirts,%(_cheapclothing),1,%(ASEARCH('Dark Orange T-Shirt',PurchasedShirts))"
	"Medium Orange T-Shirt,clothes-tshirts-medium,Shirts,%(_cheapclothing),1,%(ASEARCH('Medium Orange T-Shirt',PurchasedShirts))"
	"Light Orange T-Shirt,clothes-tshirts-light,Shirts,%(_cheapclothing),1,%(ASEARCH('Light Orange T-Shirt',PurchasedShirts))"
	
	"Dark Yellow T-Shirt,clothes-tshirts-dark,Shirts,%(_cheapclothing),1,%(ASEARCH('Dark Yellow T-Shirt',PurchasedShirts))"
	"Medium Yellow T-Shirt,clothes-tshirts-medium,Shirts,%(_cheapclothing),1,%(ASEARCH('Medium Yellow T-Shirt',PurchasedShirts))"
	"Light Yellow T-Shirt,clothes-tshirts-light,Shirts,%(_cheapclothing),1,%(ASEARCH('Light Yellow T-Shirt',PurchasedShirts))"
	
	"Dark Green T-Shirt,clothes-tshirts-dark,Shirts,%(_cheapclothing),1,%(ASEARCH('Dark Green T-Shirt',PurchasedShirts))"
	"Medium Green T-Shirt,clothes-tshirts-medium,Shirts,%(_cheapclothing),1,%(ASEARCH('Medium Green T-Shirt',PurchasedShirts))"
	"Light Green T-Shirt,clothes-tshirts-light,Shirts,%(_cheapclothing),1,%(ASEARCH('Light Green T-Shirt',PurchasedShirts))"
	
	"Dark Cyan T-Shirt,clothes-tshirts-dark,Shirts,%(_cheapclothing),1,%(ASEARCH('Dark Cyan T-Shirt',PurchasedShirts))"
	"Medium Cyan T-Shirt,clothes-tshirts-medium,Shirts,%(_cheapclothing),1,%(ASEARCH('Medium Cyan T-Shirt',PurchasedShirts))"
	"Light Cyan T-Shirt,clothes-tshirts-light,Shirts,%(_cheapclothing),1,%(ASEARCH('Light Cyan T-Shirt',PurchasedShirts))"
	
	"Dark Blue T-Shirt,clothes-tshirts-dark,Shirts,%(_cheapclothing),1,%(ASEARCH('Dark Blue T-Shirt',PurchasedShirts))"
	"Medium Blue T-Shirt,clothes-tshirts-medium,Shirts,%(_cheapclothing),1,%(ASEARCH('Medium Blue T-Shirt',PurchasedShirts))"
	"Light Blue T-Shirt,clothes-tshirts-light,Shirts,%(_cheapclothing),1,%(ASEARCH('Light Blue T-Shirt',PurchasedShirts))"
	
	"Dark Purple T-Shirt,clothes-tshirts-dark,Shirts,%(_cheapclothing),1,%(ASEARCH('Dark Purple T-Shirt',PurchasedShirts))"
	"Medium Purple T-Shirt,clothes-tshirts-medium,Shirts,%(_cheapclothing),1,%(ASEARCH('Medium Purple T-Shirt',PurchasedShirts))"
	"Light Purple T-Shirt,clothes-tshirts-light,Shirts,%(_cheapclothing),1,%(ASEARCH('Light Purple T-Shirt',PurchasedShirts))"
	
	"Dark Pink T-Shirt,clothes-tshirts-dark,Shirts,%(_cheapclothing),1,%(ASEARCH('Dark Pink T-Shirt',PurchasedShirts))"
	"Medium Pink T-Shirt,clothes-tshirts-medium,Shirts,%(_cheapclothing),1,%(ASEARCH('Medium Pink T-Shirt',PurchasedShirts))"
	"Light Pink T-Shirt,clothes-tshirts-light,Shirts,%(_cheapclothing),1,%(ASEARCH('Light Pink T-Shirt',PurchasedShirts))"
	
	"Dark Gray T-Shirt,clothes-tshirts-dark,Shirts,%(_cheapclothing),1,%(ASEARCH('Dark Gray T-Shirt',PurchasedShirts))"
	"Medium Gray T-Shirt,clothes-tshirts-medium,Shirts,%(_cheapclothing),1,%(ASEARCH('Medium Gray T-Shirt',PurchasedShirts))"
	"Light Gray T-Shirt,clothes-tshirts-light,Shirts,%(_cheapclothing),1,%(ASEARCH('Light Gray T-Shirt',PurchasedShirts))"
	
	
	
	//---Sleeveless---
	"Dark Red Sleeveless,clothes-sleeveless-dark,Shirts,%(_cheapclothing),1,%(ASEARCH('Dark Red Sleeveless',PurchasedShirts))"
	"Medium Red Sleeveless,clothes-sleeveless-medium,Shirts,%(_cheapclothing),1,%(ASEARCH('Medium Red Sleeveless',PurchasedShirts))"
	"Light Red Sleeveless,clothes-sleeveless-light,Shirts,%(_cheapclothing),1,%(ASEARCH('Light Red Sleeveless',PurchasedShirts))"
	
	"Dark Orange Sleeveless,clothes-sleeveless-dark,Shirts,%(_cheapclothing),1,%(ASEARCH('Dark Orange Sleeveless',PurchasedShirts))"
	"Medium Orange Sleeveless,clothes-sleeveless-medium,Shirts,%(_cheapclothing),1,%(ASEARCH('Medium Orange Sleeveless',PurchasedShirts))"
	"Light Orange Sleeveless,clothes-sleeveless-light,Shirts,%(_cheapclothing),1,%(ASEARCH('Light Orange Sleeveless',PurchasedShirts))"
	
	"Dark Yellow Sleeveless,clothes-sleeveless-dark,Shirts,%(_cheapclothing),1,%(ASEARCH('Dark Yellow Sleeveless',PurchasedShirts))"
	"Medium Yellow Sleeveless,clothes-sleeveless-medium,Shirts,%(_cheapclothing),1,%(ASEARCH('Medium Yellow Sleeveless',PurchasedShirts))"
	"Light Yellow Sleeveless,clothes-sleeveless-light,Shirts,%(_cheapclothing),1,%(ASEARCH('Light Yellow Sleeveless',PurchasedShirts))"
	
	"Dark Green Sleeveless,clothes-sleeveless-dark,Shirts,%(_cheapclothing),1,%(ASEARCH('Dark Green Sleeveless',PurchasedShirts))"
	"Medium Green Sleeveless,clothes-sleeveless-medium,Shirts,%(_cheapclothing),1,%(ASEARCH('Medium Green Sleeveless',PurchasedShirts))"
	"Light Green Sleeveless,clothes-sleeveless-light,Shirts,%(_cheapclothing),1,%(ASEARCH('Light Green Sleeveless',PurchasedShirts))"
	
	"Dark Cyan Sleeveless,clothes-sleeveless-dark,Shirts,%(_cheapclothing),1,%(ASEARCH('Dark Cyan Sleeveless',PurchasedShirts))"
	"Medium Cyan Sleeveless,clothes-sleeveless-medium,Shirts,%(_cheapclothing),1,%(ASEARCH('Medium Cyan Sleeveless',PurchasedShirts))"
	"Light Cyan Sleeveless,clothes-sleeveless-light,Shirts,%(_cheapclothing),1,%(ASEARCH('Light Cyan Sleeveless',PurchasedShirts))"
	
	"Dark Blue Sleeveless,clothes-sleeveless-dark,Shirts,%(_cheapclothing),1,%(ASEARCH('Dark Blue Sleeveless',PurchasedShirts))"
	"Medium Blue Sleeveless,clothes-sleeveless-medium,Shirts,%(_cheapclothing),1,%(ASEARCH('Medium Blue Sleeveless',PurchasedShirts))"
	"Light Blue Sleeveless,clothes-sleeveless-light,Shirts,%(_cheapclothing),1,%(ASEARCH('Light Blue Sleeveless',PurchasedShirts))"
	
	"Dark Purple Sleeveless,clothes-sleeveless-dark,Shirts,%(_cheapclothing),1,%(ASEARCH('Dark Purple Sleeveless',PurchasedShirts))"
	"Medium Purple Sleeveless,clothes-sleeveless-medium,Shirts,%(_cheapclothing),1,%(ASEARCH('Medium Purple Sleeveless',PurchasedShirts))"
	"Light Purple Sleeveless,clothes-sleeveless-light,Shirts,%(_cheapclothing),1,%(ASEARCH('Light Purple Sleeveless',PurchasedShirts))"
	
	"Dark Pink Sleeveless,clothes-sleeveless-dark,Shirts,%(_cheapclothing),1,%(ASEARCH('Dark Pink Sleeveless',PurchasedShirts))"
	"Medium Pink Sleeveless,clothes-sleeveless-medium,Shirts,%(_cheapclothing),1,%(ASEARCH('Medium Pink Sleeveless',PurchasedShirts))"
	"Light Pink Sleeveless,clothes-sleeveless-light,Shirts,%(_cheapclothing),1,%(ASEARCH('Light Pink Sleeveless',PurchasedShirts))"
	
	"Dark Gray Sleeveless,clothes-sleeveless-dark,Shirts,%(_cheapclothing),1,%(ASEARCH('Dark Gray Sleeveless',PurchasedShirts))"
	"Medium Gray Sleeveless,clothes-sleeveless-medium,Shirts,%(_cheapclothing),1,%(ASEARCH('Medium Gray Sleeveless',PurchasedShirts))"
	"Light Gray Sleeveless,clothes-sleeveless-light,Shirts,%(_cheapclothing),1,%(ASEARCH('Light Gray Sleeveless',PurchasedShirts))"
	
	
	
	//---Slacks---
	"Dark Red Slacks,clothes-slacks-dark,Pants,%(_cheapclothing),1,%(ASEARCH('Dark Red Slacks',PurchasedPants))"
	"Medium Red Slacks,clothes-slacks-medium,Pants,%(_cheapclothing),1,%(ASEARCH('Medium Red Slacks',PurchasedPants))"
	"Light Red Slacks,clothes-slacks-light,Pants,%(_cheapclothing),1,%(ASEARCH('Light Red Slacks',PurchasedPants))"
	
	"Dark Orange Slacks,clothes-slacks-dark,Pants,%(_cheapclothing),1,%(ASEARCH('Dark Orange Slacks',PurchasedPants))"
	"Medium Orange Slacks,clothes-slacks-medium,Pants,%(_cheapclothing),1,%(ASEARCH('Medium Orange Slacks',PurchasedPants))"
	"Light Orange Slacks,clothes-slacks-light,Pants,%(_cheapclothing),1,%(ASEARCH('Light Orange Slacks',PurchasedPants))"
	
	"Dark Yellow Slacks,clothes-slacks-dark,Pants,%(_cheapclothing),1,%(ASEARCH('Dark Yellow Slacks',PurchasedPants))"
	"Medium Yellow Slacks,clothes-slacks-medium,Pants,%(_cheapclothing),1,%(ASEARCH('Medium Yellow Slacks',PurchasedPants))"
	"Light Yellow Slacks,clothes-slacks-light,Pants,%(_cheapclothing),1,%(ASEARCH('Light Yellow Slacks',PurchasedPants))"
	
	"Dark Green Slacks,clothes-slacks-dark,Pants,%(_cheapclothing),1,%(ASEARCH('Dark Green Slacks',PurchasedPants))"
	"Medium Green Slacks,clothes-slacks-medium,Pants,%(_cheapclothing),1,%(ASEARCH('Medium Green Slacks',PurchasedPants))"
	"Light Green Slacks,clothes-slacks-light,Pants,%(_cheapclothing),1,%(ASEARCH('Light Green Slacks',PurchasedPants))"
	
	"Dark Cyan Slacks,clothes-slacks-dark,Pants,%(_cheapclothing),1,%(ASEARCH('Dark Cyan Slacks',PurchasedPants))"
	"Medium Cyan Slacks,clothes-slacks-medium,Pants,%(_cheapclothing),1,%(ASEARCH('Medium Cyan Slacks',PurchasedPants))"
	"Light Cyan Slacks,clothes-slacks-light,Pants,%(_cheapclothing),1,%(ASEARCH('Light Cyan Slacks',PurchasedPants))"
	
	"Dark Blue Slacks,clothes-slacks-dark,Pants,%(_cheapclothing),1,%(ASEARCH('Dark Blue Slacks',PurchasedPants))"
	"Medium Blue Slacks,clothes-slacks-medium,Pants,%(_cheapclothing),1,%(ASEARCH('Medium Blue Slacks',PurchasedPants))"
	"Light Blue Slacks,clothes-slacks-light,Pants,%(_cheapclothing),1,%(ASEARCH('Light Blue Slacks',PurchasedPants))"
	
	"Dark Purple Slacks,clothes-slacks-dark,Pants,%(_cheapclothing),1,%(ASEARCH('Dark Purple Slacks',PurchasedPants))"
	"Medium Purple Slacks,clothes-slacks-medium,Pants,%(_cheapclothing),1,%(ASEARCH('Medium Purple Slacks',PurchasedPants))"
	"Light Purple Slacks,clothes-slacks-light,Pants,%(_cheapclothing),1,%(ASEARCH('Light Purple Slacks',PurchasedPants))"
	
	"Dark Pink Slacks,clothes-slacks-dark,Pants,%(_cheapclothing),1,%(ASEARCH('Dark Pink Slacks',PurchasedPants))"
	"Medium Pink Slacks,clothes-slacks-medium,Pants,%(_cheapclothing),1,%(ASEARCH('Medium Pink Slacks',PurchasedPants))"
	"Light Pink Slacks,clothes-slacks-light,Pants,%(_cheapclothing),1,%(ASEARCH('Light Pink Slacks',PurchasedPants))"
	
	"Dark Gray Slacks,clothes-slacks-dark,Pants,%(_cheapclothing),1,%(ASEARCH('Dark Gray Slacks',PurchasedPants))"
	"Medium Gray Slacks,clothes-slacks-medium,Pants,%(_cheapclothing),1,%(ASEARCH('Medium Gray Slacks',PurchasedPants))"
	"Light Gray Slacks,clothes-slacks-light,Pants,%(_cheapclothing),1,%(ASEARCH('Light Gray Slacks',PurchasedPants))"
	
	
	//---Jeans---
	"Dark Red Jeans,clothes-jeans-dark,Pants,%(_cheapclothing),1,%(ASEARCH('Dark Red Jeans',PurchasedPants))"
	"Medium Red Jeans,clothes-jeans-medium,Pants,%(_cheapclothing),1,%(ASEARCH('Medium Red Jeans',PurchasedPants))"
	"Light Red Jeans,clothes-jeans-light,Pants,%(_cheapclothing),1,%(ASEARCH('Light Red Jeans',PurchasedPants))"
	
	"Dark Orange Jeans,clothes-jeans-dark,Pants,%(_cheapclothing),1,%(ASEARCH('Dark Orange Jeans',PurchasedPants))"
	"Medium Orange Jeans,clothes-jeans-medium,Pants,%(_cheapclothing),1,%(ASEARCH('Medium Orange Jeans',PurchasedPants))"
	"Light Orange Jeans,clothes-jeans-light,Pants,%(_cheapclothing),1,%(ASEARCH('Light Orange Jeans',PurchasedPants))"
	
	"Dark Yellow Jeans,clothes-jeans-dark,Pants,%(_cheapclothing),1,%(ASEARCH('Dark Yellow Jeans',PurchasedPants))"
	"Medium Yellow Jeans,clothes-jeans-medium,Pants,%(_cheapclothing),1,%(ASEARCH('Medium Yellow Jeans',PurchasedPants))"
	"Light Yellow Jeans,clothes-jeans-light,Pants,%(_cheapclothing),1,%(ASEARCH('Light Yellow Jeans',PurchasedPants))"
	
	"Dark Green Jeans,clothes-jeans-dark,Pants,%(_cheapclothing),1,%(ASEARCH('Dark Green Jeans',PurchasedPants))"
	"Medium Green Jeans,clothes-jeans-medium,Pants,%(_cheapclothing),1,%(ASEARCH('Medium Green Jeans',PurchasedPants))"
	"Light Green Jeans,clothes-jeans-light,Pants,%(_cheapclothing),1,%(ASEARCH('Light Green Jeans',PurchasedPants))"
	
	"Dark Cyan Jeans,clothes-jeans-dark,Pants,%(_cheapclothing),1,%(ASEARCH('Dark Cyan Jeans',PurchasedPants))"
	"Medium Cyan Jeans,clothes-jeans-medium,Pants,%(_cheapclothing),1,%(ASEARCH('Medium Cyan Jeans',PurchasedPants))"
	"Light Cyan Jeans,clothes-jeans-light,Pants,%(_cheapclothing),1,%(ASEARCH('Light Cyan Jeans',PurchasedPants))"
	
	"Dark Blue Jeans,clothes-jeans-dark,Pants,%(_cheapclothing),1,%(ASEARCH('Dark Blue Jeans',PurchasedPants))"
	"Medium Blue Jeans,clothes-jeans-medium,Pants,%(_cheapclothing),1,%(ASEARCH('Medium Blue Jeans',PurchasedPants))"
	"Light Blue Jeans,clothes-jeans-light,Pants,%(_cheapclothing),1,%(ASEARCH('Light Blue Jeans',PurchasedPants))"
	
	"Dark Purple Jeans,clothes-jeans-dark,Pants,%(_cheapclothing),1,%(ASEARCH('Dark Purple Jeans',PurchasedPants))"
	"Medium Purple Jeans,clothes-jeans-medium,Pants,%(_cheapclothing),1,%(ASEARCH('Medium Purple Jeans',PurchasedPants))"
	"Light Purple Jeans,clothes-jeans-light,Pants,%(_cheapclothing),1,%(ASEARCH('Light Purple Jeans',PurchasedPants))"
	
	"Dark Pink Jeans,clothes-jeans-dark,Pants,%(_cheapclothing),1,%(ASEARCH('Dark Pink Jeans',PurchasedPants))"
	"Medium Pink Jeans,clothes-jeans-medium,Pants,%(_cheapclothing),1,%(ASEARCH('Medium Pink Jeans',PurchasedPants))"
	"Light Pink Jeans,clothes-jeans-light,Pants,%(_cheapclothing),1,%(ASEARCH('Light Pink Jeans',PurchasedPants))"
	
	"Dark Gray Jeans,clothes-jeans-dark,Pants,%(_cheapclothing),1,%(ASEARCH('Dark Gray Jeans',PurchasedPants))"
	"Medium Gray Jeans,clothes-jeans-medium,Pants,%(_cheapclothing),1,%(ASEARCH('Medium Gray Jeans',PurchasedPants))"
	"Light Gray Jeans,clothes-jeans-light,Pants,%(_cheapclothing),1,%(ASEARCH('Light Gray Jeans',PurchasedPants))"
	
	
	
	"Glass of water,consumables,(A glass of cool water. Good for hydration and keeping oneself awake.),%(_cheapfood),1,-1"
	"Glass of milk,consumables,(A glass of milk. Full of strong bones.),%(_cheapfood),1,-1"
	"Cup of tea,consumables,(A cup of soothing herbal tea. Good for relaxing.),%(_cheapfood),1,-1"
	"Juice box,consumables,(Comes in a variety of fruity flavors! Full of sugar.),%(_cheapfood),1,-1"
	"Crossword,consumables,(A crossword puzzle. Good for keeping the mind active.),%(_cheappuzzle),1,-1"
	"Junior Jumble,consumables,(A junior jumble. Good for keeping the mind active.),%(_cheappuzzle),1,-1"
	"Sudoku,consumables,(A sudoku puzzle. Good for keeping the mind active.),%(_cheappuzzle),1,-1"
	"Word Search,consumables,(A word search. Good for keeping the mind active.),%(_cheappuzzle),1,-1"
	
	//"Blanket 1,accessories,Blankets,50,1,%(ASEARCH('Blanket 1',PurchasedBlankets))"
}
//"Item name,categories,dressup type/consumable description,price,unlock,sold out"

b //Balloon picker
{
	if nowmode == "Awake"; "\b[4]"
	elseif nowmode == "Asleep"; "\b[8]"
	else; "\b[0]"
}

bb //Big balloon picker
{
	if SHIORI3FW.BalloonName != "Dream Cloud"
	{
		"\b[2]"
	}
	else
	{
		if nowmode == "Awake"; "\b[6]"
		elseif nowmode == "Asleep"; "\b[10]"
		else; "\b[2]"
	}
}

family
{
	"anWD"
	"anDings"
	"anWings"
	"anBarcode"
	"anS"
	"anBlue"
	"anAbbi"
	"anRosie"
	"anRoman"
	"anCambria"
	"anTriton"
	//"anLulo"
	"anAzo"
	"anSigil"
	"anElko"
}

myfamily
{
	"my anGrandpa"
	"my anUncle"
	"my anAunt"
	"my anGrandma"
	"my anDad"
	"my anStepdad"
	"anAbbi"
	"anRosie"
	"anRoman"
	"anCambria"
	"anTriton"
	//"anLulo"
	"anAzo"
	"anSigil"
	"anElko"
}

usersfolder
{
	"start bar"
	"documents folder"
	"games folder"
	"pictures folder"
	"music folder"
}

filetype
{
	".txt"
	".dic"
	".png"
	".jpg"
	".jpeg"
	".mp3"
	".exe"
	".bat"
	".cfg"
	".wav"
	".pdf"
	".dat"
	".gif"
	".tiff"
	".dll"
	".pna"
	".ico"
	".dau"
	".zip"
	".nar"
	".html"
	".psd"
	".mp4"
	".ttf"
}

sleepiness //Mm.... it's hitting a bit low. I should add a variable that goes up and down over time and affects this? Maybe in place of the RANDs. If she's already asleep, maybe I should add a little more so she's unlikely to keep going back and forth?
{
	_sleepiness = 0
	--
	_passhour = 0
	if passhour >= 20
	{
		_sleepiness += 8
		_passhour = 8
	}
	elseif passhour >= 10
	{
		_sleepiness += 4
		_passhour = 4
	}
	elseif passhour >= 4
	{
		_sleepiness += 2
		_passhour = 2
	}
	--
	_timeslot = 0
	if timeslot == "earlymorning" || timeslot == "afternoon" || timeslot == "latenight"
	{
		_sleepiness += 2
		_timeslot = 2
	}
	elseif timeslot == "midnight"
	{
		_sleepiness += 4
		_timeslot = 4
	}
	--
	_temp = 0
	if temp == "Hot" || temp == "Boiling"
	{
		_sleepiness += 4
		_temp = 4
	}
	--
	_season = 0
	if season == "Summer"
	{
		_sleepiness += 2
		_season = 2
	}
	--
	//The fuller the moon, the more awake she is. Half moons are neutral.
	_moon = 0
	if phase == "Full Moon"
	{
		_sleepiness -= 4
		_moon = -4
	}
	elseif phase == "Waxing Gibbous" || phase == "Waning Gibbous"
	{
		_sleepiness -= 2
		_moon = -2
	}
	elseif phase == "Waxing Crescent" || phase == "Waning Crescent"
	{
		_sleepiness += 2
		_moon = 2
	}
	elseif phase == "New Moon"
	{
		_sleepiness += 4
		_moon = 4
	}
	--
	_sleepiness += sleepPetMod
	--
	_sleepiness += sleepyrand
	_rand = sleepyrand
	--
	_sleepiness -= sleephour
	_resthours = sleephour
	_sleepiness += sleepymod
	--
	_sleepiness += wakehour
	_wakehours = wakehour
	--
	"%(_sleepiness)"
	
	sleepywhy = "\n\nPasshour: %(_passhour)\nTimeslot: %(_timeslot)\nTemp: %(_temp)\nSeason: %(_season)\nMoon: %(_moon)\nRand: %(_rand)\nPets: %(sleepPetMod)\nRest: -%(_resthours)\nWake: %(_wakehours)"
}

wakechance
{
	_wake = 0
	
	--
	_passhour = 0
	if passhour >= 20
	{
		_wake += 2
		_passhour = 2
	}
	elseif passhour >= 10
	{
		_wake += 4
		_passhour = 4
	}
	elseif passhour >= 4
	{
		_wake += 8
		_passhour = 8
	}
	--
	_timeslot = 0
	if timeslot == "lunch"
	{
		_wake += 2
		_timeslot = 2
	}
	elseif timeslot == "evening"
	{
		_wake += 2
		_timeslot = 4
	}
	--
	_season = 0
	if season == "Spring"
	{
		_wake += 2
		_season = 2
	}
	--
	//The fuller the moon, the more awake she is. Half moons are neutral.
	_moon = 0
	if phase == "Full Moon"
	{
		_wake += 4
		_moon = 4
	}
	elseif phase == "Waxing Gibbous" || phase == "Waning Gibbous"
	{
		_wake += 2
		_moon = 2
	}
	elseif phase == "Waxing Crescent" || phase == "Waning Crescent"
	{
		_wake -= 2
		_moon = -2
	}
	elseif phase == "New Moon"
	{
		_wake -= 4
		_moon = -4
	}
	--
	_wake -= sleepPetMod
	--
	_wake -= sleepyrand
	_rand = sleepyrand
	--
	_wake += sleephour
	_resthours = sleephour
	_wake += sleepymod
	--
	_wake -= wakehour
	_wakehours = wakehour
	--
	if sleephour > 10; _wake = 100
	--
	"%(_wake)"
}

wakeup
{
	"\0\b[8]* (You nudge her gently.)\w8\w8\n\n"
	"\0\b[8]* (You nudge her softly.)\w8\w8\n\n"
	"\0\b[8]* (You wake her gently.)\w8\w8\n\n"
	"\0\b[8]* (You wake her carefully.)\w8\w8\n\n"
	--
	"\s[106]...%(mumble)..?"
	"\s[106]...%(mumble)huh..?"
	"...zzz...\w8\w8\s[106] %(mumble)..?"
	"...zzz%(mumble)...\w8\w8\s[106] %(mumble)..?"
	--
	"\w8\w8\b[0]\![set,tasktrayicon,lulo_icon_sleepy.ico]"
	--
	"\s[0] "
	"\s[105] "
	"\s[107] "
	"\s[109] "
	--
	"...oh,\w4 yeah..."
	"...oh,\w4 %(username)..."
	"...oh,\w4 hey %(username)..."
	"...%(username)..?"
	"...hey..."
	"...oh...\w8\w8 hey,\w4 %(username)..."
	--
	"\w8\w7\w1\n\n"
	//the \w8\w7\w1 is here instead of \w8\w8 so that I can use a replace command to get rid of the last linebreak if I need
}

driftoff
{
	".\w8.\w8.\w8\s[2000]\b[8]zzz...\w8\w8\n\n"
	--
	"* (She's gone back to sleep...)\e"
	"* (She's fallen back to sleep...)\e"
	"* (She's drifted off...)\e"
	"* (Looks like she's not ready to wake up just yet...)\e"
	"* (Still tired,\w4 apparently...)\e"
}

sleepmumble
{
	"...zzz...\w8\w8 mm..."
	"...zzhh..."
	"...mmmn..."
	"...hhnmmf..."
	"...zzhnhm..."
	"...zzz..."
	"...zzrmnh..."
	"...mmnnh..."
}

mumble
{
	"%(mumble2)%(mumble2)"
	"%(mumble2)%(mumble2)%(mumble2)"
}

mumble2 : nonoverlap
{
	"zz"
	"mmf"
	"zgh"
	"fmm"
	"mkffn"
	"nnm"
	"rhm"
	"rmh"
	"mrf"
	"ghhnz"
	"fzz"
	"mzz"
	"zmm"
	"zll"
	"nzz"
	"zzr"
	"zzz"
	"zzk"
	"mk"
	"zfk"
	"drf"
	"dzznm"
	"znnmf"
	"dzm"
	"dzk"
	"frm"
	"zz...\w8\w8 %(mumb)"
	"mm...\w8\w8 %(mumb)"
	"krf..?\w8\w8 %(mumb)"
	"mnn...\w8\w8 %(mumb)"
}

mumb : nonoverlap
{
	"zkm"
	"frm"
	"lrnm"
	"zzm"
	"fhngk"
	"zzm"
	"hhz"
	"zff"
	"zzl"
	"zzn"
	"mrfz"
	"mlz"
	"mfz"
	"zzmnf"
}

maymb //maybe mumble
{
	"...%(mumble2)...\w8\w8 "
	""
}

seriffont
{
	"Lumos"
	"Garetha"
	"Cinzel"
	"Kiano"
	"Mermaid"
	"Chapaza"
	"Apple Garamond"
	"Afterglow"
	"Mogena"
	"Timeless"
	"Askara"
	"Yeseva One"
	"Rosmatika"
	"Neothic"
	"Atlane"
	"Jerome"
	"Backslash"
	"Spinwerad"
	"Bosque"
	"Sanchez"
	"Gravtrac"
	"Rondal"
	"Wensley"
	"The Queen"
	"March"
	"Night"
	"Mitchaella"
	"Imperator"
	"Nilland"
	"Carentro"
	"Bogota"
	"Morva"
	"Agatho"
	"Unreal"
	"Nevrada"
}

scriptfont
{
	"Good Things"
	"Shorelines Script"
	"Brokenbrush"
	"Homework"
	"Challenge"
	"Arfelick Feather"
	"Hello Honey"
	"Muthiara"
	"Wishingly"
	"Sunshine"
	"Before Sunday"
	"Sweet Purple"
	"Cactus Story"
	"Before Christmas"
	"Montana"
	"Magical Feather"
	"Hug Me Tight"
	"Lambresia"
	"Internet Friends"
	"Birds of Paradise"
	"Cherolina"
	"Amarillo"
	"Danilla"
	"Billion Dreams"
	"Smille"
	"The Amberton"
	"Cute"
	"One Push"
	"Please Write Me A Song"
	"Leathering"
	"Handletters"
	"Paper Flowers"
	"Moonbright"
	"Silvertone"
	"Chasing Embers"
	"Lemon Yellow Sun"
}

dingbatfont
{
	"Garlic Salt"
	"Heart Warming"
	"Plants"
	"Grunge Strokes"
	"Butterflies"
	"Donuts Icons"
	"Leafs"
	"Milk"
	"Coffee Icons"
	"Planets"
	"Nymphette"
	"Type Icons"
	"Little Pinky Doodles"
	"KG Arrows"
	"Haircut"
	"Laurus Nobilis"
	"QR Font"
	"Dripping"
	"Summer Coast"
	"Old Retro Labels"
	"Video Games"
	"RFX Splatz"
	"Mountain"
	"Under"
	"Schooldays"
	"Lassus"
	"Starz 2"
	"Skullx"
	"Arrow Crafter"
	"Constellations Ostia"
	"Elder Futhark"
	"DeathMetal Logo"
	"Sneakers"
	"Flower Ornaments"
	"Fire"
	"Kalocsai Flowers"
	"Kitty Cats"
	"Hiragana TBF"
	"Cityscape"
	"Aurebesh"
	"Wings of Wind"
	"Pyrobats"
}

//---Dream Stuff---

dream
{
	"There was a giant %(creature),\w4 with huge %(bodypiece).\w8\w8 %(dreampart2)\e"
}

//---
dreampart2
{
	"It crushed the nearby town before leaving for the %(naturalarea)."
	"It flew over the town and headed for the %(naturalarea)." //Would have to put a check for if it was a dragon or smth
	"It fled,\w4 chased by angry people from the town."
}

creature
{
	"dragon"
	"dinosaur"
	"mermaid"
	"unicorn"
	"hedgehog"
	"skeleton"
	"zombie"
	"minotaur"
	"centaur"
	"satyr"
	"druid"
	"dryad"
	"wyvern"
}

colormod
{
	{
		"light "
		"dark "
		"bright "
		"soft "
		"desaturated "
		"saturated "
		"intense "
		"shimmery "
		"glittery "
		"brilliant "
		"bold "
		"dusty "
		"mellow "
		"rich "
		"vibrant "
		"vivid "
		"faded "
		"pale "
		"rustic "
	}
	{
		""
	}
}

color
{
	"red"
	"orange"
	"yellow"
	"green"
	"cyan"
	"blue"
	"purple"
	"pink"
	"gray"	
}

bodypiece
{
	"jaws"
	"wings"
	"legs"
	"fangs"
	"claws"
	"talons"
	"teeth"
	"scales"
	"horns"
	"hooves"
}

material
{
	"stone"
	"wood"
	"metal"
	"fire"
	"water"
	"magic"
	"light"
	"darkness"
	"bone"
	"plastic"
	"iron"
	"copper"
	"silver"
	"gold"
	"brass"
	"onyx"
	"crystal"
	"diamond"
	"ruby"
	"jasmine"
	"emerald"
	"topaz"
	"chitin"
}

naturalarea
{
	"ocean"
	"forest"
	"mountains"
	"caves"
	"plains"
	"woods"
	"tunnels"
	"valley"
}

ThriftDescript
{
	"antique"
	"retro"
	"shiny"
	"weird"
	"modern"
	"brand new"
}

ThriftItem
{
	"watering can,'s got a wood texture on it even though it's metal"
	"toaster, can  make 6 slices of toast at once"
	//"candle holder,"
}

blue {"\f[color,141,136,247]"} //brother
orange {"\f[color,227,147,093]"} //other dad
cyan {"\f[color,122,218,232]"} //twin
df {"\f[color,default]"}
gray {"\f[color,175,175,175]"}
d {"\f[default]"}

Capitalize
{
	_word = _argv[0] //Sets _word to the word the user sent
	_buffer = SUBSTR(_word,0,1) //Storing the first character in _buffer
	_word = ERASE(_word,0,1) //Erasing the first character from _word
	_word = INSERT(_word,0,TOUPPER(_buffer)) //Making the character in _buffer uppercase and inserting it back into _word
	_word //Returns the capitalized word
}

//-----Menu stuff-----
season //Current season. Might add a hemisphere check later.
{
	if month > 2 && month < 6; "Spring"
	elseif month > 5 && month < 9; "Summer"
	elseif month > 8 && month < 12; "Autumn"
	else; "Winter"
}

nowhour //hour12 displays the hour like a 12 hour clock, except for 12 which is displayed as 0
{
	if hour12 == 0; "12"
	else; "%(hour12)"
}

nowmin //Adding a 0 to the minute if it's under 10
{
	if minute < 10; "0%(minute)"
	else; "%(minute)"
}

nowpassmin //Same as above but with passmin
{
	if passmin < 10; "0%(passmin)"
	else; "%(passmin)"
}

ap //AM or PM - ampm is 0 during am, and 1 during pm
{
 	if ampm == 0; "AM"
 	else; "PM"
}

wd //Abbreviated week day
{
	if weekday == 0; "Sun"
	elseif weekday == 1; "Mon"
	elseif weekday == 2; "Tue"
	elseif weekday == 3; "Wed"
	elseif weekday == 4; "Thu"
	elseif weekday == 5; "Fri"
	else; "Sat"
}

nowday //Full week day
{
	if weekday == 0; "Sunday"
	elseif weekday == 1; "Monday"
	elseif weekday == 2; "Tuesday"
	elseif weekday == 3; "Wednesday"
	elseif weekday == 4; "Thursday"
	elseif weekday == 5; "Friday"
	else; "Saturday"
}

nowmonth //The current month name
{
	_month = month
	if _argv[0] == "next"
	{
		_month++
		if _month > 12; _month = 1
	}
	if _argv[0] == "last"
	{
		_month--
		if _month < 1; _month = 12
	}
	
	if _month == 1; "January"
	elseif _month == 2; "February"
	elseif _month == 3; "March"
	elseif _month == 4; "April"
	elseif _month == 5; "May"
	elseif _month == 6; "June"
	elseif _month == 7; "July"
	elseif _month == 8; "August"
	elseif _month == 9; "September"
	elseif _month == 10; "October"
	elseif _month == 11; "November"
	else; "December"
}

leapyear //Checks if this is a leap year
{
	if year % 4 != 0; 0
	elseif year % 100 != 0; 1
	elseif year % 400 != 0; 0
	else; 1
}

timeslot //From the GT template. Breaking down the day into a few distinct chunks so you dont have to add checks for every hour.
{
	if hour >= 5 && hour <= 8; "earlymorning" //5-8am
	elseif hour >= 9 && hour <= 11; "morning" //9-11am
	elseif hour >= 12 && hour <= 14; "lunch" //12-2pm
	elseif hour >= 15 && hour <= 17; "afternoon" //3-5pm
	elseif hour >= 18 && hour <= 20; "evening" //6-8pm
	elseif hour >= 21 && hour <= 24; "latenight" //9pm-12am
	else; "midnight" //1-4am
}

// temp //I've based this on the feelslike tempurature. If you want actual tempurature, just do a find and replace and change feelslike to tempurature
// {
	// if ForC == "°F"
	// {
		// if feelslike <= 0; "Below Zero" //Below zero, 0 and below 
		// elseif feelslike <= 20; "Freezing" //Freezing, 0-20
		// elseif feelslike <= 40; "Cold" //Cold, 21-40
		// elseif feelslike <= 60; "Chilly" //Chilly, 41-60
		// elseif feelslike <= 80; "Pleasant" //Pleasant, 61-80
		// elseif feelslike <= 95; "Hot" //Hot, 81-95
		// elseif feelslike >= 96; "Boiling"  //Everything is terrible, 96+
		// else; "Unknown"
	// }
	// elseif ForC == "°C"
	// {
		// if feelslike <= -17; "Below Zero" //Below zero, 0 and below
		// elseif feelslike <= -6; "Freezing" //Freezing, 0-20
		// elseif feelslike <= 4; "Cold" //Cold, 21-40
		// elseif feelslike <= 15; "Chilly" //Chilly, 41-60
		// elseif feelslike <= 26; "Pleasant" //Pleasant, 61-80
		// elseif feelslike <= 35; "Hot" //Hot, 81-95
		// elseif feelslike >= 36; "Boiling" //Everything is terrible, 96+
		// else; "Unknown"
	// }
	// else
	// {
		// "Unknown"
	// }
// }

// humid
// {
	// if humidity == "Unknown"; "Unknown"
	// elseif humidity <= 30; "Dry"
	// elseif humidity > 30 && humidity <= 60; "Comfortable"
	// elseif humidity >= 61 && humidity <= 80; "Muggy"
	// elseif humidity >= 81; "Soup"
	// else; "Unknown"
// }

// weather_clear
// {
	// if weather == "Clear" || weather == "Mostly Clear" || weather == "Sunny" || weather == "Mostly Sunny" || weather == "Fair"; 1
	// else; 0
// }

// weather_cloudy
// {
	// if weather == "Partly Cloudy" || weather == "Mostly Cloudy" || weather == "Cloudy"; 1
	// else; 0
// }

// weather_mightrain
// {
	// if weather == "Showers in the Vicinity" || weather == "Few Showers" || weather == "Showers"; 1
	// else; 0
// }

// weather_raining
// {
	// if weather == "Rain Shower" || weather == "Light Rain" || weather == "Rain" || weather == "Heavy Rain"; 1
	// else; 0
// }

// weather_snowing
// {
	// if weather == "Rain and Snow" || weather == "Snow Shower" || weather == "Snow" || weather == "Light Snow" || weather == "Wintry Mix"; 1
	// else; 0
// }

// weather_thunderstorm
// {
	// if weather == "Light Rain with Thunder" || weather == "Isolated Thunderstorms" || weather == "Scattered Thunderstorms" || weather == "Thunderstorm" || weather == "Heavy Thunderstorm"; 1
	// else; 0
// }

// weather_foghaze
// {
	// if weather == "Fog" || weather == "Haze"; 1
	// else; 0
// }

// pollen_alert
// {
	// if pollen == "Local Pollen Alert"; 1
	// else; 0
// }

loadingmoon
{
	"%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)"
	--
	"%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)"
	--
	"%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)"
	--
	"%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)%(lm)"
	--
	"\_w[160]"
}

lm : sequential //Changed the loadingmoon thing to just use sequential, it's less prone to bugs and means I don't need a variable!
{
	"\_b[img\Moon01,inline,--option=use_self_alpha]\w4\c"
	"\_b[img\Moon02,inline,--option=use_self_alpha]\w4\c"
	"\_b[img\Moon03,inline,--option=use_self_alpha]\w4\c"
	"\_b[img\Moon04,inline,--option=use_self_alpha]\w4\c"
	"\_b[img\Moon05,inline,--option=use_self_alpha]\w4\c"
	"\_b[img\Moon06,inline,--option=use_self_alpha]\w4\c"
	"\_b[img\Moon07,inline,--option=use_self_alpha]\w4\c"
	"\_b[img\Moon08,inline,--option=use_self_alpha]\w4\c"
}

moonphase //Moon phase for main menu
{
	if phase == "New Moon"; "anMoon01"
	elseif phase == "Waxing Crescent"; "anMoon02"
	elseif phase == "First Quarter"; "anMoon03"
	elseif phase == "Waxing Gibbous"; "anMoon04"
	elseif phase == "Full Moon"; "anMoon05"
	elseif phase == "Waning Gibbous"; "anMoon06"
	elseif phase == "Last Quarter"; "anMoon07"
	elseif phase == "Waning Crescent"; "anMoon08"
	else; "anMoon09"
}

daytime //Note: S is based in a particular geopraphical location, so FOR HIM, this is accurate-ish. If you're in another hemisphere, or near a pole or something, this will be wrong. Oh well XD
{
	//Top if is the timeslots that will always be day.
	//Elseifs are extra timeslots during summer months.
	//If it's none of those, it's not daytime.
	if timeslot == "morning" || timeslot == "lunch" || timeslot == "afternoon"; 1
	elseif season == "Summer" && (timeslot == "earlymorning" || timeslot == "evening"); 1
	else; 0
}

friendshiplow //Threshold for unlocking stuff with minimal friendship
{
	40
}

friendshipmed //Medium friendship
{
	150
}

friendshiphigh //High friendship
{
	400
}

highesttrust
{
	if friendship >= friendshiphigh && ASEARCH("thesplit",MiscFlags) != -1; 1
	else; 0
}


smfriendplus //Small friendship increment
{
	1
}

mdfriendplus //Medium friendship increment
{
	3
}

lgfriendplus //Large friendship increment
{
	5
}


smDPplus //Small dream points increment
{
	5
}

mdDPplus //Medium dream points increment
{
	10
}

lgDPplus //Large dream points increment
{
	15
}

//These can be written as 'if !FamilyPresent'; ie, if family is not present. Alternatively, 'if FamilyPresent', if family is present
FamilyPresent
{
	if ("RYS-0825" _in_ ghostexlist || "Dusty" _in_ ghostexlist || "Cambria" _in_ ghostexlist || "Triton" _in_ ghostexlist)
	{
		1
	}
	else
	{
		0
	}
}

FamilyInstalled
{
	if SInstalled || DustyInstalled || CambriaInstalled || TritonInstalled; 1
	else; 0
}

SPresent
{
	if "RYS-0825" _in_ ghostexlist; 1
	else; 0
}

SInstalled
{
	if ASEARCH("S the Skeleton",installedghostlist) != -1; 1
	else; 0
}

DustyPresent
{
	if "Dusty" _in_ ghostexlist; 1
	else; 0
}

DustyInstalled
{
	if ASEARCH("Dusty and Obsidian",installedghostlist) != -1; 1
	else; 0
}

CambriaPresent
{
	if "Cambria" _in_ ghostexlist; 1
	else; 0
}

CambriaInstalled
{
	if ASEARCH("Cambria and Elko",installedghostlist) != -1; 1
	else; 0
}

TritonPresent
{
	if "Triton" _in_ ghostexlist; 1
	else; 0
}

TritonInstalled
{
	if ASEARCH("Triton",installedghostlist) != -1; 1
	else; 0
}



//Don't touch this.
On_\person
{
 	person
}

ShuffleArray
{
	_start = IARRAY
	for _i = 0; _i < _argc; _i++
	{
		_start ,= _argv[_i]
	}
	
	_len = ARRAYSIZE(_start)
	_output = IARRAY
	for _i = 0; _i < _len; _i++
	{
		_l = ARRAYSIZE(_start)
		_rand = RAND(_l)
		_output ,= _start[_rand]
		_start[_rand] = IARRAY
	}
	_output
}


ShufflePlaylist //Like ShuffleArray, but whatever _argv0 is remains the first one
{
	_start = IARRAY
	for _i = 0; _i < _argc - 1; _i++
	{
		if _i == _argv[0]; continue
		else; _start ,= _i
	}
	
	_len = ARRAYSIZE(_start)
	_output = IARRAY
	if _argv[0] != "|removed|"; _output ,= _argv[0]
	for _i = 0; _i < _len; _i++
	{
		_l = ARRAYSIZE(_start)
		_rand = RAND(_l)
		_output ,= _start[_rand]
		_start[_rand] = IARRAY
	}
	_output
}


ACYCLE
{
	_output = IARRAY
	if _argv[0] == "-" //Backwards
	{
		_c = _argc - 1
		_output ,= _argv[_c]
		for _i = 1; _i < _c; _i++
		{
			_output ,= _argv[_i]
		}
	}
	else //Forwards
	{
		for _i = 2; _i < _argc; _i++
		{
			_output ,= _argv[_i]
		}
		_output ,= _argv[1]
	}
	_output
}

ASCOOT //Scoot a value in an array forwards or backwards. If there are multiple elements with the same name, it'll take the first one, so only use it for arrays with unique elements
{
	_array = _argv //Take in all the arguments as an array
	_array[1] = IARRAY //Erase the other arguments because we don't want them in the array
	_array[0] = IARRAY 
	_index = ASEARCHEX(_argv[0],_array)
	if ARRAYSIZE(_index) < 1
	{
		_array
		return
	}
	if ARRAYSIZE(_index) > 1; _index = TOINT(_index[0])
	
	if _argv[1] == "-" //Backwards
	{
		if _argv[0] == _array[0] //If it's already at the start of the array
		{
			_array
			return
		}
		_curnum = _index //Get positions
		_prvnum = _curnum - 1
		
		_current = _array[_curnum] //Assign elements to temp vars
		_prev = _array[_prvnum]
		
		_array[_curnum] = _prev //Replace elements with swapped elements
		_array[_prvnum] = _current
	}
	else //Forwards
	{
		if _argv[0] == _array[ARRAYSIZE(_array) - 1] //If it's already at the end of the array
		{
			_array
			return
		}
		_curnum = _index //Get positions
		_nxtnum = _curnum + 1
		
		_current = _array[_curnum] //Assign elements to temp vars
		_next = _array[_nxtnum]
		
		_array[_curnum] = _next //Replace elements with swapped elements
		_array[_nxtnum] = _current
	}
	_array
}

ASCOOTEX //Scoots elements around in an array, by ID number. Works with duplicate elements, but you need to plan ahead and build the ID numbers into your buttons
{
	_array = _argv //Take in all the arguments as an array
	_array[1] = IARRAY //Erase the other arguments because we don't want them in the array
	_array[0] = IARRAY
	_index = TOINT(_argv[0])
	if _index > ARRAYSIZE(_array) - 1 || _index < 0
	{
		_array
		return
	}
	if _argv[1] == "-" //Backwards
	{
		if _argv[0] == _array[0] //If it's already at the start of the array
		{
			_array
			return
		}
		_curnum = _index //Get positions
		_prvnum = _curnum - 1
		
		_current = _array[_curnum] //Assign elements to temp vars
		_prev = _array[_prvnum]
		
		_array[_curnum] = _prev //Replace elements with swapped elements
		_array[_prvnum] = _current
	}
	else //Forwards
	{
		if _argv[0] == _array[ARRAYSIZE(_array) - 1] //If it's already at the end of the array
		{
			_array
			return
		}
		_curnum = _index //Get positions
		_nxtnum = _curnum + 1
		
		_current = _array[_curnum] //Assign elements to temp vars
		_next = _array[_nxtnum]
		
		_array[_curnum] = _next //Replace elements with swapped elements
		_array[_nxtnum] = _current
	}
	_array
}

Slow
{
	_argv[0] = REPLACE(_argv[0],"##","'") //Replaces ## with an apostrophe, change it if you like
	_output = ""
	_p = ""
	if _argv[2] == "1" //If it's a precision \_w tag
	{
		_p = "\_w[" + _argv[1] + "]"
	}
	else //Simple \w tag
	{
		_p = "\w" + _argv[1]
	}
	for _i = 0; _i < STRLEN(_argv[0]); _i++
	{
		_output += "%(SUBSTR(_argv[0],_i,1))%(_p)"
	}
	_output
}

Fast
{
	_argv[0] = REPLACE(_argv[0],"##","'") //Replaces ## with an apostrophe, change it if you like
	_output = ""
	_argv[1] = TOINT(_argv[1]) //These two prevent infinite loops
	if _argv[1] < 1; _argv[1] = 1
	for _i = 0; _i < STRLEN(_argv[0]); _i++
	{
		_output += "\![quicksection,true]"
		_output += "%(SUBSTR(_argv[0],_i,_argv[1]))"
		_output += "\![quicksection,false]\w1"
		_i += _argv[1] - 1
	}
	_output
}

Mock
{
	_argv[0] = REPLACE(_argv[0],"##","'") //Replaces ## with an apostrophe, change it if you like
    _output = ""
    if TOINT(_argv[1]) == 1 //Random mock case
    {
        for _i = 0; _i < STRLEN(_argv[0]); _i++
        {
            _let = SUBSTR(_argv[0],_i,1)
            if RAND(2) == 1
            {
                _output += TOLOWER(_let)
            }
            else
            {
                _output += TOUPPER(_let)
            }
        }
    }
    else //Perfect mock case
    {
		_m = 0
        for _i = 0; _i < STRLEN(_argv[0]); _i++
        {
            _let = SUBSTR(_argv[0],_i,1)
			if _let == " "
			{
				_output += _let
				continue
			}
            if _m % 2 == 0
            {
                _output += TOLOWER(_let)
            }
            else
            {
                _output += TOUPPER(_let)
            }
			_m++
        }
    }
    _output
}

CreepyText
{
	_argv[0] = REPLACE(_argv[0],"##","'") //Replaces ## with an apostrophe, change it if you like
    _display = ""
    for _i = 0; _i < STRLEN(_argv[0]); _i++
    {
		_w = 0
		_x = 0
		_y = 0
		if _argv[1] != ""; _w = RAND(_argv[1]); else; _w = RAND(10)  //Set this to the maximum pause time you want, or comment it out if you don't want random pauses (Don't put it higher than 10 or you'll call invalid \w commands)
        if _argv[2] != ""; _x = RAND(_argv[2]); else; _x = RAND(250) //Set this to the maximum X coordinate you want
        if _argv[3] != ""; _y = RAND(_argv[3]); else; _y = RAND(100) //Set this to the maximum Y coordinate you want
        
        _display += ("\_l[%(_x),%(_y)]" + SUBSTR(_argv[0],_i,1) + "\w%(_w)")
    }
    _display
}  




//---Dream stuff---

NameGen : nonoverlap
{
	"ch"
	"ii"
	"oe"
	"lo"
	"me"
	"ne"
	"fi"
	"ki"
	"pi"
	"xh"
	"sha"
	"da"
	"ide"
	"ero"
	"ku"
	"kli"
	"sri"
	"ira"
	"gre"
	"hi"
}

Wobble
{
	_argv[0] = REPLACE(_argv[0],"##","'") //replaces ## with an apostrophe, you can change this if you want to use something else
	
	//Default values - Set these to whatever you'd like, you can override them for each individual dialogue if you like
	_UPlow = 0		//Controls if letters are randomly converted to upper/lowercase. 0 for off, 1 for on.
	_Xjitter = 5	//Controls how much space can be between each letter. Higher numbers will be more spaced out.
	_Yjitter = 5	//Controls how much letters can vary up and down. Higher numbers will be more spaced out.
	_SizeJitter = 0 //Controls how much the font size can change per letter. Higher numbers will have more extreme variance.
	_SizeUpDown = 1 //Controls if the font size can go up, down, or both. 0 for both, 1 for up, 2 for down.
	
	if _argv[1] != ""; _UPlow = _argv[1] //These check if the user has sent special arguments, and if not, uses the default values
	if _argv[2] != ""; _Xjitter = _argv[2]
	if _argv[3] != ""; _Yjitter = _argv[3]
	if _argv[4] != ""; _SizeJitter = _argv[4]
	if _argv[5] != ""; _SizeUpDown = _argv[5]
	
	
	_word = "" //Initialize display
	for _i = 0; _i < STRLEN(_argv[0]); _i++
	{
		_let = SUBSTR(_argv[0],_i,1) //Get the current letter
		if TOINT(_UPlow) == 1 //If random upper/lower is on, flip a coin to determine which this letter will be
		{
			if RAND(2) == 1; _let = TOUPPER(_let); else; _let = TOLOWER(_let)
		}
		_X = RAND(_Xjitter) //Get random values for X, Y, and Size
		_Y = RAND(_Yjitter)
		_Sz = RAND(_SizeJitter)
		if _SizeUpDown == 1 //Size only goes up
		{
			_Sz = "+" + _Sz
		}
		elseif _SizeUpDown == 2 //Size only goes down
		{
			_Sz = "-" + _Sz
		}
		else //Flip a coin on if the size should go up or down
		{
			if RAND(2) == 1; _Sz = "+" + _Sz; else; _Sz = "-" + _Sz 
		}
		_word += "\_l[@%(_X),%(_Y)]\f[height,%(_Sz)]" + _let //Add to the display
	}
	_word
}

OnSpeechSynthesisStatus
{
	if reference0 == 1
	{
		readLabels = "On"
	}
	else
	{
		readLabels = "Off"
	}
}

OnChoiceHover
{
	if readLabels == "On"
	{
		"\C\_l[-100000,0]\![set,autoscroll,disable]%(reference0)"
	}
}

On_balloon_tooltip
{
	if reference1 == "OnMadlibHover"
	{
		if reference0 == "verb"
		{
			"Verbs convey actions, occurrences, or a state of being; 'painted', 'looked', 'eats', 'runs', 'became'."
		}
		elseif reference0 == "adverb"
		{
			"Adverbs modify verbs(actions); 'loudly', 'fiercely', 'gleefully', 'gloomily'."
		}
		elseif reference0 == "noun"
		{
			"Nouns are a person, place, or thing; 'the cat', 'the tower', 'the paper'."
		}
		elseif reference0 == "adjective"
		{
			"Adjectives modify nouns(things); 'big', 'wooden', 'lovely', 'broken'."
		}
		elseif reference0 == ""
	}
}

Shuffle
{
	_output = IARRAY
	if GETTYPE(_argv) == 4 //If it's an array. General purpose arrays only!
	{
		while ARRAYSIZE(_argv) > 0
		{
			_rand = RAND(ARRAYSIZE(_argv))
			_output ,= _argv[_rand]
			_argv[_rand] = IARRAY
		}
	}
	else //If it's anything else it'll be treated as a string
	{
		_argv = TOSTR(_argv)
		while STRLEN(_argv) > 0
		{
			_rand = RAND(STRLEN(_argv))
			_output += SUBSTR(_argv,_rand,1)
			_argv = ERASE(_argv,_rand,1)
		}
	}
	_output
}

/*SongSaoriTest //Experimenting with a saori I grabbed from FLELE, but it only works with ID3 v1 tags it seems, which is super sad. Oh well
{
	_i = FUNCTIONEX("KI.dll","ExtractMP3",NowPlaying[0],"GetTrack")
	_i
}*/

Tem
{
	_output = ""
	for _i = 0; _i < STRLEN(_argv[0]); _i++
	{
		_r = RAND(15)
		
		case _r
		{
			when 0, 1 //Add duplicate letters
			{
				_amt = RAND(5) + 1
				for _ii = 0; _ii < _amt; _ii++
				{
					_len = RAND(4) + 1
					if RAND(2) == 0; _len = 1
					_output += SUBSTR(_argv[0],_i,_len)
				}
			}
			when 2, 3 //Insert random character
			{
				if RAND(2) == 0 //From earlier in the word
				{
					_len = STRLEN(_output)
					_output += SUBSTR(_output,RAND(_len),1)
				}
				else //Random
				{
					_output += ANY(temalphabet)
				}
			}
			when 4, 5
			{
				_output += ANY(tempunctuation)
			}
			when 6 //Add a space
			{
				_output += " "
			}
			when 7 //Remove letter
			{
				continue
			}
			others 
			{
				if RAND(4) == 0 //make it uppercase
				{
					_output += TOUPPER(SUBSTR(_argv[0],_i,1))
				}
				else
				{
					_output += SUBSTR(_argv[0],_i,1)
				}
			}
		}
	}
	_output
}

temalphabet : array
{
	"A"; "B"; "C"; "D"; "E"; "F"; "G"; "H"; "I"; "J"; "K"; "L"; "M"; "N"; "O"; "P"; "Q"; "R"; "S"; "T"; "U"; "V"; "W"; "X"; "Y"; "Z"
	"a"; "b"; "c"; "d"; "e"; "f"; "g"; "h"; "i"; "j"; "k"; "l"; "m"; "n"; "o"; "p"; "q"; "r"; "s"; "t"; "u"; "v"; "w"; "x"; "y"; "z"
}

tempunctuation : array
{
	","; "."; ":"; ";"; "/"; ")"; "("; "-"; "_"
}

Rainbow
{
	_output = ""
	_c = 0
	if _argv[3] == 1
	{
		if _argv[1] == 1; _c = RAND(8)
		else; _c = RAND(7)
	}
	if !(_argv[2] > 0); _argv[2] = 1
	for _i = 0; _i < STRLEN(_argv[0]); _i += _argv[2]
	{
		case _c
		{
			when 0; _output += "\f[color,255,0,0]"//red
			when 1; _output += "\f[color,255,120,0]" //Orange
			when 2; _output += "\f[color,255,255,0]" //Yellow
			when 3; _output += "\f[color,0,255,0]" //Green
			when 4; _output += "\f[color,0,255,255]" //Cyan
			when 5; _output += "\f[color,0,100,255]" //Blue
			when 6; _output += "\f[color,160,0,255]" //Purple
			when 7; _output += "\f[color,255,0,255]" //Magenta, optional	
		}
		_output += SUBSTR(_argv[0],_i,_argv[2])
		_c++
		if _c >= 7 && _argv[1] != 1; _c = 0
		elseif _c >= 8; _c = 0
	}
	_output += "\f[default]"
	_output
}

HSVtoRGB
{
    _H = TOREAL(_argv[0])
    _S = TOREAL(_argv[1])
    _V = TOREAL(_argv[2])
    _r = 0.0
    _g = 0.0
    _b = 0.0
    --
    if _H > 360 || _H < 0 || _S > 100 || _S < 0 || _V > 100 || _V < 0
    {
        0
    }
    else
    {
        _s = _S/100.0
        _v = _V/100.0
        _C = _s*_v
        _fmod = fmod(_H/60.0, 2)
        _abs = abs(_fmod-1.0)
        _X = _C*(1.0-_abs)
        _m = _v-_C
        --
        _H = TOINT(_H)
        --
        if _H >= 0 && _H < 60
        {
            _r = _C
            _g = _X
            _b = 0
        }
        elseif _H >= 60 && _H < 120
        {
            _r = _X
            _g = _C
            _b = 0
        }
        elseif _H >= 120 && _H < 180
        {
            _r = 0
            _g = _C
            _b = _X
        }
        elseif _H >= 180 && _H < 240
        {
            _r = 0
            _g = _X
            _b = _C
        }
        elseif _H >= 240 && _H < 300
        {
            _r = _X
            _g = 0
            _b = _C
        }
        else
        {
            _r = _C
            _g = 0
            _b = _X
        }
        --
        _R = TOINT(ROUND((_r + _m)*255))
        _G = TOINT(ROUND((_g + _m)*255))
        _B = TOINT(ROUND((_b + _m)*255))
        --
        /*"H : " + _H + "\n\n[half]s : " + _s + "\nS : " + _S + "\n\n[half]v : " + _v + "\nV : " + _V + "\n\n[half]X : " + _X + "\nM : " + _m + "\nC : " + _C + "\n\n[half]"
        --
        "r : " + _r + "\ng : " + _g + "\nb : " + _b + "\n\n[half]"
        --
        "R : " + _R + "\nG : " + _G + "\nB : " + _B*/
        _R,_G,_B
    }
}

abs
{
    if _argv[0] < 0
    {
        _argv[0]*=-1
    }
    --
    _argv[0]
}

fmod
{
    _num = _argv[0]
    _den = TOREAL(_argv[1])
    //fmod = numerator - t*denominator 
    //where 't' is the truncated value of numerator/denominator. 
    _t = _num/_den 
    //_temp = _t * _den
    _temp = _num - _t
    //_fmod = _num - _temp
    _fmod = _temp * _den
    --
    _fmod
    //_t + "=" + _num + "/" + _den + "\n" + _temp + "=" + _t + "*" + _den + "\n" + _fmod + "=" + _num + "-" + _temp
}

ColorShift
{
	_output = ""
	_hue = TOINT(_argv[1])
	_sat = TOINT(_argv[2])
	_val = TOINT(_argv[3])
	_shf = TOINT(_argv[4]); if _shf <= 0; _shf = 1
	_amt = TOINT(_argv[5]); if _amt <= 0; _amt = 1
	for _i = 0; _i < STRLEN(_argv[0]); _i++
	{
		_hue += _shf
		if _hue >= 360; _hue = 0
		_output += "\f[color,%(HSVtoRGB(_hue,_sat,_val))]%(SUBSTR(_argv[0],_i,_argv[5]))"
	}
	_output
}

Pallete
{
	if _argv[0] == ""; _argv[0] = 3
	_output = "\_q\f[height,+20]\f[shadowcolor,255,255,255]"
	for _i = 0; _i < _argv[0]; _i++
	{
		_hue = RAND(361)
		_sat = RAND(101)
		_val = RAND(101)
		
		_rgb = HSVtoRGB(_hue,_sat,_val)
		_output += "\f[color,%(_rgb)]■ "
	}
	_output
}

OnPalleteMenu
{
	if PalleteOption[3] == ""; PalleteOption[3] = 3
	//if reference1 == ""; reference1 = PalleteOption[3]
	
	_g = "\f[color,150,150,150]"
	_d = "\f[color,default]"
	
	"\0\b2\*\_q"
	--
	if reference0 == "ChangeHueOpt"; PalleteOption[0] = reference1
	elseif reference0 == "ChangeSatOpt"; PalleteOption[1] = reference1
	elseif reference0 == "ChangeValOpt"; PalleteOption[2] = reference1
	elseif reference0 == "ChangeColorOpt"
	{
		if reference1 == "-"; PalleteOption[3] = TOINT(PalleteOption[3]) - 1
		elseif reference1 == "Custom"; "\![open,inputbox,OnPalleteMenu,-1]"
		else; PalleteOption[3] = TOINT(PalleteOption[3]) + 1
	}
	elseif reference0 == ""; "\![close,inputbox,OnPalleteMenu]"
	else
	{
		PalleteOption[3] = TOINT(reference0)
		if PalleteOption[3] > 100; PalleteOption[3] = 100
		if PalleteOption[3] < 1; PalleteOption[3] = 1
	}
	--
	"Hue: ";
	--
	if PalleteOption[0] != "Random"; "%(_g)"
	--
	"\q[Random,OnPalleteMenu,ChangeHueOpt,Random]%(_d)  "
	--
	if PalleteOption[0] != "Similar"; "%(_g)"
	--
	"\q[Similar,OnPalleteMenu,ChangeHueOpt,Similar]%(_d)  "
	--
	if PalleteOption[0] != "Distinct"; "%(_g)"
	--
	"\q[Distinct,OnPalleteMenu,ChangeHueOpt,Distinct]%(_d)"
	--
	"\nSat: "
	--
	if PalleteOption[1] != "Random"; "%(_g)"
	--
	"\q[Random,OnPalleteMenu,ChangeSatOpt,Random]%(_d)  "
	--
	if PalleteOption[1] != "Similar"; "%(_g)"
	--
	"\q[Similar,OnPalleteMenu,ChangeSatOpt,Similar]%(_d)  "
	--
	if PalleteOption[1] != "Distinct"; "%(_g)"
	--
	"\q[Distinct,OnPalleteMenu,ChangeSatOpt,Distinct]%(_d)"
	--
	"\nVal: "
	--
	if PalleteOption[2] != "Random"; "%(_g)"
	--
	"\q[Random,OnPalleteMenu,ChangeValOpt,Random]%(_d)  "
	--
	if PalleteOption[2] != "Similar"; "%(_g)"
	--
	"\q[Similar,OnPalleteMenu,ChangeValOpt,Similar]%(_d)  "
	--
	if PalleteOption[2] != "Distinct"; "%(_g)"
	--
	"\q[Distinct,OnPalleteMenu,ChangeValOpt,Distinct]%(_d)"
	--
	"\nColors: \q[%(PalleteOption[3]),OnPalleteMenu,ChangeColorOpt,Custom]  "
	--
	if PalleteOption[3] < 100; "\q[+,OnPalleteMenu,ChangeColorOpt,+]  "
	else; "%(_g)+%(_d)  "
	--
	if PalleteOption[3] > 1; "\q[-,OnPalleteMenu,ChangeColorOpt,-]"
	else; "%(_g)-%(_d)  "
	--
	"\n\n\![*]\q[Generate again,OnPalleteMenu]\n\n"
	--
	//--------------------------------------------------
	_output = "\f[height,+20]\f[shadowcolor,255,255,255]"
	
	for _i = 0; _i < PalleteOption[3]; _i++
	{
		_hue = RAND(361)
		_sat = RAND(101)
		_val = RAND(101)
		
		_rgb = HSVtoRGB(_hue,_sat,_val)
		_output += "\f[color,%(_rgb)]■ "
		if _i > 110; break
	}
	_output
}

Counter //Increment counter, creates one if none exists
{
	_index = ASUBEX(_argv[0],Counters) //Find all instances of the substring in the Counters array
	foreach _index; _element //Check each one
	{
		_current = Counters[_element]
		_name = _current[0,'||']
		if _name == _argv[0] //If the exact match for the counter is found, increment it and end the function
		{
			_count = TOINT(_current[1,'||'])
			if _argv[1] == "-"; _count--
			else; _count++
			if _count < 0 && _argv[2] != 1; _count = 0
			Counters[_element] = "%(_name)||%(_count)"
			return
		}
	}
	Counters ,= "%(_argv)||1" //If no counter is found, make one
}

CounterGet //Display value of counter
{
	_index = ASUBEX(_argv[0],Counters) //Find all instances of the substring in the Counters array
	foreach _index; _element //Check each one
	{
		_current = Counters[_element]
		_name = _current[0,'||']
		if _name == _argv[0] //If the exact match for the counter is found, return it
		{
			_count = TOINT(_current[1,'||'])
			_count
			return
		}
	}
	-1 //if no counter is found
}

ASUB //ASEARCH but for substrings
{
	_array = _argv //Takes in all the elements of the array
	_array[0] = IARRAY //erases _argv[0] since that's the string we're searching for
	for _i = 0; _i < ARRAYSIZE(_array); _i++
	{
		if TOSTR(_argv[0]) _in_ _array[_i]
		{
			_i
			return
		}
	}
	-1
}

ASUBEX //ASEARCHEX but for substrings
{
	_output = IARRAY
	_array = _argv //Takes in all the elements of the array
	_array[0] = IARRAY //erases _argv[0] since that's the string we're searching for
	for _i = 0; _i < ARRAYSIZE(_array); _i++
	{
		if TOSTR(_argv[0]) _in_ _array[_i]
		{
			_output ,= _i
		}
	}
	if ARRAYSIZE(_output) < 1; -1
	else; _output
}

