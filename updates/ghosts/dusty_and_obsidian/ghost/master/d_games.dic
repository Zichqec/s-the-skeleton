//==========Wingdings Games==========
OnWDGames
{
	currentStreak = 0; earningG = 0; Gmultiplier = 1; currentcorrect = 0; currentwrong = 0
	"\0\s[0]%(wdc)\_qAlright, what game would you like to play?\n\n"
	--
	"\![*]\q[Translation Challenge,OnTranslationWD]\n/
	\![*]\q[Who's That Wingding,OnWhosThatWingding]\n/
	\![*]\q[Match the Wingding,OnMatchWD]\n/
	\![*]\q[Hangman,OnPlayHangman]"
	--
	"\n\n\![*]\q[Back to Wingdings Menu,OnWingdingsMenu]\n\![*]\q[I'm done,cancelnodialogue]\e"
}

//-----Translation Challenge-----
OnTranslationWD
{
	/*lessonword = lessonwd
	totranslateLOW = TOLOWER(lessonword)
	totranslateUP = TOUPPER(lessonword)
	--*/
	if teachUPPER == "On"
	{
		"\![raise,OnTranslationPick,UPPER]"
		
	}
	if teachLOWER == "On"
	{
		"\![raise,OnTranslationPick,lower]"
	}
	if teachPROPER == "On"
	{
		"\![raise,OnTranslationPick,Proper]"
	}
	if teachUPPER != "On" && teachLOWER != "On" && teachPROPER != "On"
	{
		"\![raise,OnTranslationPick,UPPER]"
	}
}

OnTranslationPick
{
	if reference0 == "UPPER"
	{
		lessonword = lessonwd
		totranslate = TOUPPER(lessonword)
		"\0%(wdc)\s[111]\![set,balloontimeout,0]Write the translation for:\n\n%(wdn)%(medf)%(totranslate)%(reg)\![open,passwordinput,OnUserGuess,-1]\n\n\n\![*]\q[Give up,EndTranslationWD]\t\*"
	}
	elseif reference0 == "lower"
	{
		lessonword = lessonwd
		totranslate = TOLOWER(lessonword)
		"\0%(wdc)\s[111]\![set,balloontimeout,0]Write the translation for:\n\n%(wdn)%(medf)%(totranslate)%(reg)\![open,passwordinput,OnUserGuess,-1]\n\n\n\![*]\q[Give up,EndTranslationWD]\t\*"
	}
	else //Propercase
	{
		lessonword = lessonwd
		totranslate = lessonword
		"\0%(wdc)\s[111]\![set,balloontimeout,0]Write the translation for:\n\n%(wdn)%(medf)%(totranslate)%(reg)\![open,passwordinput,OnUserGuess,-1]\n\n\n\![*]\q[Give up,EndTranslationWD]\t\*"
	}
}
	
OnUserGuess
{
	currentStreak++
	currentStreakTotal++
	if currentStreak > 4; {earningG += 2; G += 2;}
	if currentStreak > 9; {currentStreak = 0; earningG += 2; G += 2; Gmultiplier += 1}
	if Gmultiplier > 3; {Gmultiplier = 3}
	if reference0 == totranslate
	{
		currentcorrect++
		earningG += (5 * Gmultiplier)
		G += (5 * Gmultiplier)
		"\0%(wdc)\s[104]"
		"\0%(wdc)\s[102]"
		"\0%(wdc)\s[103]"
		"\0%(wdc)\s[0]"
		"\0%(wdc)\s[111]"
		--
		"That's correct!\w8 The word was %(totranslate)."
		"Correct,\w4 The word was %(totranslate)."
	}
	else
	{
		currentwrong++
		"\0%(wdc)\s[106]I'm sorry,\w4 that's incorrect.\w8 You said %(reference0),\w4 the word was %(totranslate)."
	}
	--
	"\n\n\_qCorrect answers: %(currentcorrect)\nIncorrect answers: %(currentwrong)\nG earned this streak: %(earningG)\nTotal G: %(G)"
	--
	"\n\n\![*]\q[Pick Cases,OnCaseInGame,TranslationWD]   \![*]\q[Back to Games menu,OnWDGames]\x"
	--
	"\![raise,OnTranslationWD]"
	
}

Select.EndTranslationWD
{
	"\![close,inputbox,OnUserGuess]\0\s[0]%(wdc)Fair enough.\w8\w8 The answer was %(totranslate).\x\![raise,OnWDGames]"
}

//-----Who's That Wingding-----
OnWhosThatWingding
{
	_whos = WhosThatWingding
	WtWDAnswer = _whos[0]
	_descript = _whos[1]
	_descript2 = _whos[2]
	"\0%(wdc)\s[111]Which Wingding looks like %(_descript)?\![open,inputbox,OnWhoWingdingGuess]"
	"\0%(wdc)\s[111]Which Wingding looks like %(_descript2)?\![open,inputbox,OnWhoWingdingGuess]"
	--
	"\n\n\*\![set,balloontimeout,-1]\![*]\q[Give up,WtWDEnd]\e"
}

OnWhoWingdingGuess
{
	currentStreak++
	currentStreakTotal++
	if currentStreak > 4; {currentStreak = 0; earningG += 2; G += 2; Gmultiplier += 1}
	if Gmultiplier > 3; {Gmultiplier = 3}
	if reference0 == WtWDAnswer
	{
		currentcorrect++
		earningG += (5 * Gmultiplier)
		G += (5 * Gmultiplier)
		"\0%(wdc)\s[104]"
		"\0%(wdc)\s[102]"
		"\0%(wdc)\s[103]"
		"\0%(wdc)\s[0]"
		"\0%(wdc)\s[111]"
		--
		"That's correct!\w8 The answer was %(WtWDAnswer) %(wdn)%(medf)%(WtWDAnswer)%(reg)"
		"Indeed,\w4 The answer was %(WtWDAnswer) %(wdn)%(medf)%(WtWDAnswer)%(reg)"
	}
	else
	{
		currentwrong++
		"\0%(wdc)\s[102]Sorry,\w4 the answer was %(WtWDAnswer) %(wdn)%(bigf)%(WtWDAnswer)%(reg)"
	}
	--
	"\n\n\_qCorrect answers: %(currentcorrect)\nIncorrect answers: %(currentwrong)\nG earned this streak: %(earningG)\nTotal G: %(G)"
	--
	"\n\n\![*]\q[Back to Games menu,OnWDGames]   \![*]\q[Pick Cases,OnCaseInGame,WhosThatWingding]\x"
	--
	"\![raise,OnWhosThatWingding]"
}

Select.WtWDEnd
{
	"\![close,inputbox,OnWhoWingdingGuess]\0\s[0]%(wdc)Fair enough.\w8\w8 The answer was %(WtWDAnswer).\x\![raise,OnWDGames]"
}

WhosThatWingding
{
	if teachUPPER == "On"
	{
		"A,a hand with two fingers held up,a hand making a peace sign"
		"B,a hand making an ok sign,a hand making a circle with the thumb and index finger"
		"C,a hand giving a thumbs up,a hand showing approval"
		"D,a hand giving a thumbs down,a hand showing disapproval"
		"E,a hand pointing to the left,a hand gesturing to the left"
		"F,a hand pointing to the right,a hand gesturing to the right"
		"G,a hand pointing upwards,a hand pointing to the sky"
		"H,a hand pointing downwards,a hand pointing at the ground"
		"I,a high five,a hand with the fingers splayed out"
		"J,a joyful face,a smiling face"
		"K,a neutral face,a passive face"
		"L,a sad face,a face that is frowning"
		"M,a bomb,an explosive"
		"N,some bones,a skull and crossbones"
		"O,a square flag,a flag standing straight up"
		"P,a flag with a pointed tip,a pennant"
		"Q,a plane,a jet"
		"R,the sun,a circle with 9 points"
		"S,a teardrop,a raindrop"
		"T,a snowflake,snow"
		"U,a plain cross,a cross with no shadow"
		"V,a cross with a shadow,a cross with another cross behind it"
		"W,a cross with a circle through it,a cross with a wheel"
		"X,an x on its side,a plus with wide tips"
		"Y,a six pointed star,a star of david"
		"Z,a crescent moon and star,a star and a moon"
	}
	if teachLOWER == "On"
	{
		"a,the star sign for Cancer,two 6s dancing"
		"b,the star sign for Leo,a circle with a long tail"
		"c,the star sign for Virgo,an M with a tail that crosses back over it"
		"d,the star sign for Libra,an ohm symbol with an extra line"
		"e,the star sign for Scorpio,an M with a pointy tail"
		"f,the star sign for Sagittarius,an arrow pointing up and to the right"
		"g,the star sign for Capricorn,an n with a tail that curls back over the edge"
		"h,the star sign for Aquarius,the waves in a river"
		"i,the star sign for Pisces,a curvy H"
		"j,an et,two letters together"
		"k,an ampersand,a fancy &"
		"l,a filled in circle,a plain circle"
		"m,a moon with a shadow,two circles"
		"n,a filled in square,a plain square"
		"o,an empty square with thin borders,a square with thin borders"
		"p,an empty square with thick borders,a square with thick borders"
		"q,two squares with the front one on top,two squares with the filled in one on bottom"
		"r,two squares with the front one on bottom,two squares with the filled in one on top"
		"s,a thin diamond that is small,a tiny diamond that is not thick"
		"t,a thin diamond that is tall,a big diamond that is not thick"
		"u,a large diamond that is thick,a square up on one corner"
		"v,four diamonds,a diamond split into four?"
		"w,a small diamond that is thick,a tiny square up on one corner"
		"x,a box with an x in it,a box that marks the spot"
		"y,a rectangle with a caret in it,a box with an upside down v in it"
		"z,a square with loopy corners,a square flower"
	}
	if teachNUM == "On"
	{
		"0,a closed folder,a flat file"
		"1,an open folder,a folder with the flap open"
		"2,a page that has been dogeared,a page with the corner turned down"
		"3,a flat page,a page with the corners intact"
		"4,multiple pages,a stack of pages"
		"5,two drawers,a filing cabinet"
		"6,an hourglass,a timer that uses sand"
		"7,a keyboard,what you're typing on"
		"8,a computer mouse,an electronic mouse"
		"9,a trackball,a ball used in place of a mouse"
	}
	if teachPUNCT == "On"
	{
		"`,the star sign for Gemini,a pillar"
		"-,a closed mailbox with the flag up,a closed mailbox that is full"
		"=,a soft floppy disk,a filled in save icon"
		"~,an ending quotation mark,a quotation mark with the tails down"
		"!,a pencil,a pencil with no hand"
		"@,a hand holding a pencil pointed to the right,a left hand holding a pencil"
		"#,a pair of scissors angled down,a pair of scissors that doesnt fit into the frame"
		"$,a pair of glasses,reading glasses"
		"%,a bell,"
		"^,the star sign for Aries,a caret"
		"&,an open book,a book with the pages open"
		"*,the back of an envelope,a closed letter"
		"(,a telephone,a landline phone"
		"),a phone in a circle,a phone symbol"
		"_,the star sign for Taurus,a medal"
		"+,an addressed envelope,the front of an envelope"
		"|,a filled in flower,a filled in rosette"
		"[,a Yin Yang,black and white swirling together"
		"],a Wheel of Dharma,a wheel with 8 spokes"
		"{,an outlined flower,an outlined rosette"
		"},an opening quotation mark,a quotation mark with the tails up"
		";,a harddrive,a computer module"
		"',a candle,a lit candle"
		":,a desktop computer,a monitor and keyboard"
		"%(CHR(0x22)),a pair of scissors pointing right,a pair of scissors that do fit into the frame"
		//"\,,a closed mailbox that is empty,a closed mailbox with the flag down"
		".,an open mailbox that is full,an open mailbox with the flag up"
		//"/,an open mailbox that is empty,an open mailbox with the flag down"
		"<,a hard floppy disk,an outlined save icon"
		">,a tape reel,a circle with 3 spokes and a dot in the center"
		"?,a hand holding a pencil pointed to the left,a right hand holding a pencil"
	}
}

//-----Match the Wingding-----
OnMatchWD
{
	wdabc = getcase
	wdsize = 0
	_wdrand = 0
	gatheredanswers = 0
	quizanswer = IARRAY
	--
	while gatheredanswers < possibleanswers
	{
		wdsize = ARRAYSIZE(wdabc) //Checks how many items are left in the array
		_wdrand = RAND(wdsize) //Picks a random number based on how many are left
		
		quizanswer[gatheredanswers] = wdabc[_wdrand] //Assigns a variable to the random letter picked
			
		wdabc[_wdrand] = IARRAY //Erases the random letter picked so we can't pick it again
		gatheredanswers++
	}
	--
	if quizanswer[0] == "ॐ"
	{
		"\_q%(wdcb)\s[111]\![set,balloontimeout,-1]\*Pick the Wingding that represents %(rgf)\\%(reg)\n\n"
	}
	else
	{
		"\_q%(wdcb)\s[111]\![set,balloontimeout,-1]\*Pick the Wingding that represents %(rgf)%(quizanswer[0])%(reg)\n\n"
	}
	--
	finalanswer = quizanswer[0]
	quizanswersshuffled = IARRAY
	toshuffle = ARRAYSIZE(quizanswer)
	shuffled = 0
	while shuffled < toshuffle
	{
		shufsize = ARRAYSIZE(quizanswer) //Get the size of the original array
		shufrand = RAND(shufsize) //Pick a random slot in that array
		
		quizanswersshuffled[shuffled] = quizanswer[shufrand] //Copy that over to the new array
		
		quizanswer[shufrand] = IARRAY //Erase the value from the original array
		shuffled++
	}
	
	
	answernum = ARRAYSIZE(quizanswersshuffled)
	answerprint = ""
	_i = 0
	while _i < answernum
	{
		if quizanswersshuffled[_i] == "ॐ" //ॐ is \
		{
			answerprint += "%(rgf)\q[%(quizanswersshuffled[_i]),testquizanswer]%(wdn) "
		}
		else
		{
			answerprint += "\q[%(quizanswersshuffled[_i]),testquizanswer] "
		}
		if _i == 5 || _i == 10 || _i == 15 || _i == 20 //do a SUBSTR here to get the last digit of _i and see if it's a 5 or a 0(if its greater than 1)
		{
			answerprint += "\n"
		}
		_i++
		if _i > 30
		{
			break
		}
	}
	--
	"%(wdcb)%(wdn)\f[height,25]%(answerprint)%(rg)"
	--
	"\f[height,default]\n\n\n\![*]\q[Give up,MatchEnd]"
}

getcase : array
{
	if teachUPPER == "On"
	{
		("a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z")
	}
	if teachLOWER == "On"
	{
		("A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z")
	}
	if teachNUM == "On"
	{
		("1","2","3","4","5","6","7","8","9","0")
	}
	if teachPUNCT == "On"
	{
		("`","-","=","~","!","@","#","$","%","^","&","*","(",")","_","+","|","[","{","}",";","'",":","<",">","?")
		//("`","1","2","3","4","5","6","7","8","9","0","-","=","ॐ","~","!","@","#","$","%","^","&","*","(",")","_","+","|","[","]","{","}",";","'",":","%(CHR(0x22))",/*",",".",*/"/","<",">","?") //Has problem characters in it that I dont wanna deal with lol
	}
}

OnQuizInput
{
	currentStreak++
	currentStreakTotal++
	if currentStreak > 9; {currentStreak = 0; earningG += 2; G += 2; Gmultiplier += 1}
	if Gmultiplier > 3; {Gmultiplier = 3}
	"%(wdcb)"
	--
	if quizinput == finalanswer
	{
		_diff = 0
		if possibleanswers < 6
		{
			_diff = 3
		}
		elseif possibleanswers < 12
		{
			_diff = 6
		}
		else
		{
			_diff = 10
		}
		earningG += (_diff * Gmultiplier)
		G += (_diff * Gmultiplier)
		"\s[102]"
		"\s[103]"
		"\s[104]"
		"\s[111]"
		"\s[0]"
		--
		"Correct,\w4 %(rgf)%(finalanswer)%(reg) is %(wdn)%(finalanswer)%(rg)"
	}
	else
	{
		if reference0 == "ॐ"
		{
			"\0\s[106]Incorrect,\w4 you picked %(rgf)\\%(reg).\w8\w8 the answer was %(wdn)%(finalanswer)%(rg)"
		}
		else
		{
			"\0\s[106]Incorrect,\w4 you picked %(rgf)%(reference0)%(reg).\w8\w8 the answer was %(wdn)%(finalanswer)%(rg)"
		}
	}
	--
	"%(reg)\n\n\_qG earned this streak: %(earningG)\nTotal G: %(G)\n\n\![*]\q[Pick difficulty,difficultyslide]   \![*]\q[Pick Cases,OnCaseInGame,MatchWD]\n\![*]\q[Back to Games Menu,OnWDGames]\x"
	--
	OnMatchWD
}

Select.difficultyslide
{
	"\0\*\![set,balloontimeout,0]%(wdc)\_qPick the number of total choices offered. Higher numbers are harder.\![open,sliderinput,OnDifficulty,-1,%(possibleanswers),3,26]\n\n\![*]\q[Back,BackDifficulty]\e"
}

OnDifficulty
{
	possibleanswers = reference0
	OnMatchWD
}

Select.BackDifficulty
{
	"\![close,inputbox,OnDifficulty]"
	--
	OnMatchWD
}

Select.MatchEnd
{
	"\0\s[0]%(wdc)Fair enough.\w8\w8 The answer was %(wdn)%(finalanswer)%(reg).\x\![raise,OnWDGames]"
}

//-----Wingdings Hangman-----
/*Select.hangmanWD
{
	"\0%(wdc)%(t)\s[102\]Alright##\w4 let's play.]\x"
	--
	OnPlayHangman
}*/

OnPlayHangman
{
	guessingall = 0
	wordtoguess = lessonwd //gotta add back in the upper and lower here
	WDlength = STRLEN(wordtoguess)
	guessedletters = ""
	incorrectletters = ""
	displayword = ""
	lettersleft = 0
	maxwrongguesses = 7
	Hangman
}

Hangman
{
	for _i = 0; _i < STRLEN(wordtoguess); _i++
	{
		_letter = SUBSTR(wordtoguess,_i,1)
		_letter = TOLOWER(_letter)
		if _letter _in_ guessedletters || _letter == " "
		{
			displayword += "%(SUBSTR(wordtoguess,_i,1))"
		}
		else
		{
			displayword += "%(rg)_ %(wdn)"
			lettersleft += 1
		}
	}
	--
	if (STRLEN(incorrectletters) / 2) >= maxwrongguesses
	{
		currentStreak++
		currentStreakTotal++
		if currentStreak > 4; {currentStreak = 0; earningG += 2; G += 2; Gmultiplier += 1}
		if Gmultiplier > 3; {Gmultiplier = 3}
		currentwrong++
		"\0%(wdc)\s[0]Sorry,\w4 you lost.\w8\s[104] The word was %(wordtoguess)."
		--
		"\n\n\_qCorrect answers: %(currentcorrect)\nIncorrect answers: %(currentwrong)\nG earned this streak: %(earningG)\nTotal G: %(G)"
		--
		"\n\n\![*]\q[Pick Cases,OnCaseInGame,TranslationWD]   \![*]\q[Back to Games menu,OnWDGames]\x"
		--
		"\![raise,OnPlayHangman]"
	}
	elseif lettersleft > 0
	{
		_mistakesleft = (maxwrongguesses - (STRLEN(incorrectletters) / 2))
		mistakesmarker = ""
		"\0%(wdc)\_q\*\![set,balloontimeout,0]\![set,autoscroll,disable]%(wdn)%(displayword)%(reg)\n\nGuessed letters: %(wdn)%(incorrectletters)%(reg)\n\n[half]Mistakes left:  \![open,inputbox,OnGuessHangman,-1]"
		--
		for _i = 0; _i < _mistakesleft; _i++
		{
			mistakesmarker += "\![*]"
		}
		--
		"%(mistakesmarker)\n\n"
		--
		if lettersleft > 1
		{
		"\![*]\q[Guess the whole word,GuessWholeWord]"
		}
		--
		"\n\![*]\q[Open the input box again,HangmanInput]\n\n[half]\![*]\q[Give up,HangmanQuit]\e"
	}
	else
	{
		currentStreak++
		currentStreakTotal++
		if currentStreak > 4; {currentStreak = 0; earningG += 2; G += 2; Gmultiplier += 1}
		if Gmultiplier > 3; {Gmultiplier = 3}
		earningG += (15 * Gmultiplier)
		G += (15 * Gmultiplier)
		currentcorrect++
		"\0%(wdc)\s[104]Well played!\w8\w8\s[0] The word was %(wordtoguess)."
		--
		"\n\n\_qCorrect answers: %(currentcorrect)\nIncorrect answers: %(currentwrong)\nG earned this streak: %(earningG)\nTotal G: %(G)"
		--
		"\n\n\![*]\q[Pick Cases,OnCaseInGame,TranslationWD]   \![*]\q[Back to Games menu,OnWDGames]\x"
		--
		"\![raise,OnPlayHangman]"
	}
}

Select.GuessWholeWord
{
	guessingall = 1
	"\0%(wdc)\*\![set,balloontimeout,0]\![close,inputbox,OnGuessHangman]\![open,inputbox,OnGuessHangman]\s[104]Ah,\w4 confident,\w4 are we?\w8\w8\s[0] The word so far is\n%(displayword).\w8\w8\n\nYou've guessed these letters: %(incorrectletters)\w8\n\nWhat is your answer?"
	--
	"\n\n\![*]\q[Open the input box again,GuessWholeWord]\n\n\![*]\q[Give up,HangmanQuit]\e"
}

OnGuessHangman
{
	if guessingall == 0
	{
		_guesslength = STRLEN(reference0)
		reference0 = TOLOWER(reference0)
		wordtoguessL = TOLOWER(wordtoguess)
		displayword = ""
		
		if _guesslength > 1
		{
			lettersleft = 0
			"\0%(wdc)\s[107]Single letters only,\w4 please.\x"
			--
			Hangman
		}
		elseif reference0 _in_ guessedletters
		{
			lettersleft = 0
			"\0%(wdc)\s[106]You already guessed that.\w8\w8\s[0] Try again.\x"
			--
			Hangman
		} 
		elseif reference0 _in_ wordtoguessL
		{
			lettersleft = 0
			guessedletters += reference0
			--
			Hangman
		}
		else
		{
			lettersleft = 0
			guessedletters += reference0
			incorrectletters += "%(reference0) "
			--
			Hangman
		}
	}
	else
	{
		currentStreak++
		currentStreakTotal++
		if currentStreak > 4; {currentStreak = 0; earningG += 2; G += 2; Gmultiplier += 1}
		if Gmultiplier > 3; {Gmultiplier = 3}
		
		reference0 = TOLOWER(reference0)
		wordtoguessL = TOLOWER(wordtoguess)
		if reference0 == wordtoguessL
		{
			currentcorrect++
			"\0%(wdc)\s[104]%(t)That's correct##\w4 the word was] %(wordtoguess).\w8\w8\s[103] %(t)Congratulations!\w8\w8\s[102\] You guessed it with] %(lettersleft) %(t)letters still blank.]"
		}
		else
		{
			currentwrong++
			"\0%(wdc)\s[0]%(t)Sorry##\w4 that is incorrect.\w8\w8\s[104\] The word was] %(wordtoguess)."
		}
		--
		"\n\n\_qCorrect answers: %(currentcorrect)\nIncorrect answers: %(currentwrong)\nG earned this streak: %(earningG)\nTotal G: %(G)"
		--
		"\n\n\![*]\q[Pick Cases,OnCaseInGame,TranslationWD]   \![*]\q[Back to Games menu,OnWDGames]\x"
		--
		"\![raise,OnPlayHangman]"
	}
}

Select.HangmanInput
{
	displayword = ""
	lettersleft = 0
	"\![close,inputbox,OnGuessHangman]"
	--
	Hangman
}

Select.HangmanQuit
{
	"\0\![close,inputbox,OnGuessHangman]%(wdc)\s[102]%(t)Ah##\w4 fair enough.\w8\w8\s[0\] The word was] %(wordtoguess).\x"
	--
	OnWDGames
}

//===============Categories===============

//-------Word categories-------
OnCategoryList
{
	if CTGuser == "Off" //If the user categories are off, this variable needs to be set to 0 so that the user can't turn off absolutely everything
	{
		categorieson = 0
	}
	if CTGuser == "On" //This loop has to be here in case the user toggles the user categories on and off. We have to get the new value of the variable.
	{
		_totalctg = ARRAYSIZE(UserCategories) //This is the loop we use EVERYWHERE for this. Get the number of categories the user has made
		categorieson = 0
		for _i = 0; _i < _totalctg; _i++
		{
			_tempctg = UserCategories[_i] //Check the current category
			_categoryonoff = _tempctg[1,"|"] //Check section 1 of the subarray, which is On/Off
			if _categoryonoff == "On" //If it's on, add to the variable
			{
				categorieson++
			}
		}
	}
	if CTGdusty == ""; {CTGdusty = "Off"}
	if CTGukagaka == ""; {CTGukagaka = "Off"}
	if CTGskeleton == ""; {CTGskeleton = "Off"}
	if CTGundertale == ""; {CTGundertale = "Off"}
	if CTGspacefi == ""; {CTGspacefi = "Off"}
	if CTGgems == ""; {CTGgems = "Off"}
	if CTGshapes == ""; {CTGshapes = "Off"}
	if CTGingredients == ""; {CTGingredients = "Off"}
	if CTGother == ""; {CTGother = "Off"}
	if CTGuser == ""; {CTGuser = "Off"}
	
	if CTGdusty != "On" && CTGukagaka != "On" && CTGskeleton != "On" && CTGundertale != "On" && CTGspacefi != "On" && CTGgems != "On" && CTGshapes != "On" && CTGingredients != "On" && CTGother != "On" && categorieson == 0 //Checks if all categories are off, and if they are, forces Dusty and Obsidian to be on. MUST add all new categories here.
	{
		CTGdusty = "On"
	}
	--
	"%(wdcb)\_q\![set,autoscroll,disable]What categories would you like me to use words from?\n\n"
	--
	"\![*]\q[Dusty and Obsidian (%(CTGdusty)),toggleCTGdusty]\n\n[half]"
	--
	"\![*]\q[Ukagaka (%(CTGukagaka)),toggleCTGukagaka]\n\n[half]"
	--
	"\![*]\q[Skeletons (%(CTGskeleton)),toggleCTGskeleton]\n\n[half]"
	--
	"\![*]\q[Undertale (%(CTGundertale)),toggleCTGundertale]\n\n[half]"
	--
	"\![*]\q[Space/Sci-fi (%(CTGspacefi)),toggleCTGspacefi]\n\n[half]"
	--
	"\![*]\q[Gems and Ores (%(CTGgems)),toggleCTGgems]\n\n[half]"
	--
	"\![*]\q[Shapes (%(CTGshapes)),toggleCTGshapes]\n\n[half]"
	--
	if talkedtoS == 1
	{
		"\![*]\q[Herbs and Spices (%(CTGingredients)),toggleCTGingredients]\n\n[half]"
	}
	/*--
	"\![*]\q[Misc (%(CTGother)),toggleCTGother]\n\n"*/
	--
	"\![*]\q[Custom Categories (%(CTGuser)),toggleCTGuser] \q[(Edit),OnUserCTG]"
	--
	"\n\n\![*]\q[All On,allctgon]\n\![*]\q[All Off,allctgoff]\n\n\![*]\q[Back to wingdings menu,OnWingdingsMenu]\e"
}

Select.toggleCTGdusty //These are individual category toggles for the normal ones
{
	if CTGdusty != "On"
	{
		CTGdusty = "On"
	}
	else
	{
		CTGdusty = "Off"
	}
	--
	OnCategoryList
}

Select.toggleCTGukagaka
{
	if CTGukagaka != "On"
	{
		CTGukagaka = "On"
	}
	else
	{
		CTGukagaka = "Off"
	}
	--
	OnCategoryList
}

Select.toggleCTGskeleton
{
	if CTGskeleton != "On"
	{
		CTGskeleton = "On"
	}
	else
	{
		CTGskeleton = "Off"
	}
	--
	OnCategoryList
}

Select.toggleCTGundertale
{
	if CTGundertale != "On"
	{
		CTGundertale = "On"
	}
	else
	{
		CTGundertale = "Off"
	}
	--
	OnCategoryList
}

Select.toggleCTGspacefi
{
	if CTGspacefi != "On"
	{
		CTGspacefi = "On"
	}
	else
	{
		CTGspacefi = "Off"
	}
	--
	OnCategoryList
}

Select.toggleCTGgems
{
	if CTGgems != "On"
	{
		CTGgems = "On"
	}
	else
	{
		CTGgems = "Off"
	}
	--
	OnCategoryList
}

Select.toggleCTGshapes
{
	if CTGshapes != "On"
	{
		CTGshapes = "On"
	}
	else
	{
		CTGshapes = "Off"
	}
	--
	OnCategoryList
}

Select.toggleCTGingredients
{
	if CTGingredients != "On"
	{
		CTGingredients = "On"
	}
	else
	{
		CTGingredients = "Off"
	}
	--
	OnCategoryList
}

Select.toggleCTGother
{
	if CTGother != "On"
	{
		CTGother = "On"
	}
	else
	{
		CTGother = "Off"
	}
	--
	OnCategoryList
}

Select.toggleCTGuser
{
	if CTGuser != "On"
	{
		CTGuser = "On"
	}
	else
	{
		CTGuser = "Off"
	}
	--
	OnCategoryList
}

Select.allctgon //Turn all categories on
{
	CTGdusty = "On"
	CTGukagaka = "On"
	CTGskeleton = "On"
	CTGspacefi = "On"
	CTGgems = "On"
	CTGshapes = "On"
	if talkedtoS == 1
	{
		CTGingredients = "On"
	}
	//CTGother = "On"
	CTGuser = "On"
	--
	OnCategoryList
}

Select.allctgoff //Turn all categories off
{
	CTGdusty = "Off"
	CTGukagaka = "Off"
	CTGskeleton = "Off"
	CTGspacefi = "Off"
	CTGgems = "Off"
	CTGshapes = "Off"
	CTGingredients = "Off"
	CTGother = "Off"
	CTGuser = "Off"
	--
	OnCategoryList
}

//Ok, here comes the complex stuff. This is the submenu for user categories. We use a loop to check how many categories have been made, then we look at each subarray, check the name and if it's on/off, and display it as a clickable choice.
OnUserCTG 
{
	_totalctg = ARRAYSIZE(UserCategories) //Check how many categories
	_displayctg = "" 
	categorieson = 0
	for _i = 0; _i < _totalctg; _i++
	{
		_tempctg = UserCategories[_i] //Evaluate the category for our current position in the loop
		_categoryname = _tempctg[0,"|"] //Position 0 in the subarray is the name of the category
		_categoryonoff = _tempctg[1,"|"] //Position 1 in the subarray is if the category is on or off
		if _categoryonoff == "" //If somehow it is empty, set it to off
		{
			_categoryonoff = "Off"
			_tempctg[1,"|"] = "Off"
			UserCategories[_i] = _tempctg
		}
		if _categoryonoff == "On" //If it's on, add it to the count of active categories
		{
			categorieson++
		}
		_displayctg += "\q[%(_categoryname),opencategory,%(_i)] \q[(%(_categoryonoff)),OnToggleUserCategory,%(_i)]\n\n[half]" //Add a menu option for the category in question
	}
	--
	"%(wdcb)\_q\![set,autoscroll,disable]\![set,balloontimeout,-1]\*%(medf)-Custom Categories-%(reg)\n\n"
	--
	"%(_displayctg)"
	--
	"\n\![*]\q[Add a category,newcategory]\n\![*]\q[Delete a category,OnRemoveCategory]\n\n\![*]\q[All On,turnallon]\n\![*]\q[All Off,turnalloff]\n\n\![*]\q[Back to categories,OnCategoryList]\e"
}

OnToggleUserCategory //Toggle for user categories
{  
	_currentCTG = TOINT(reference0) //We stored the _i number as reference0 in the loop. So, this tells us which category the user clicked
	_thisCTG = UserCategories[_currentCTG] //Grab the category out of the array
	if _thisCTG[1,"|"] != "On" // Normal toggle stuff here
	{
		_thisCTG[1,"|"] = "On"
	}
	else
	{
		_thisCTG[1,"|"] = "Off"
	}
	UserCategories[_currentCTG] = _thisCTG //Set the change in the subarray into the actual array
	--
	OnUserCTG
}

OnUserCategoryDisplay //Display the category that was clicked on - This is called through OnChoiceSelectEx
{
	wordsadded = ""
	_totalctg = ARRAYSIZE(UserCategories)
	worddisplay = ""
	
	for _i = 0; _i < _totalctg; _i++
	{
		_tempctg = UserCategories[_i]
		if _tempctg[0,"|"] == currentusercategory //We saved what category the user clicked up above
		{
			CurrentOrigCategory = _tempctg
			CTGNum = _i
			_tempctg[1,"|"] = IARRAY //Erases the on/off
			_tempctg[0,"|"] = IARRAY //erases the category name
			_tempctg = REPLACE(_tempctg,"|",",") //Changes the | delimiter to a comma, so we can deal with the subarray like a normal array
			
			_ii = 0
			_categorysize = ARRAYSIZE(_tempctg)
			while _ii < _categorysize //Iterate through every remaining section of the subarray, and display them in menu choices
			{
				worddisplay += "\q[%(_tempctg[_ii]),editword]\n" 
				_ii++
			}
		}
	}
	--
	"%(wdcb)\![set,autoscroll,disable]\_q%(medf)-%(currentusercategory)-%(reg)\n\n"
	--
	"%(worddisplay)"
	--
	"\n\![*]\q[Add a word,OnNewWordInput]\n\![*]\q[Delete a word,OnRemoveWord]\n\![*]\q[Edit category name,editcategory]\n\n\![*]\q[Back to user categories,OnUserCTG]\e"
}

OnChoiceEditWord //From OnChoiceSelectEx
{
	_totalctg = ARRAYSIZE(UserCategories) //How many categories do we have
	for _i = 0; _i < _totalctg; _i++ //Loop to check through all categories
	{
		_tempctg = UserCategories[_i]
		if _tempctg[0,"|"] == currentusercategory //If it's the category that was clicked on
		{
			CurrentOrigCategory = _tempctg //Store the original category so we can make edits safely
			CTGNum = _i //See what number category in the array this is
			_tempctg[0,"|"] = IARRAY //Erase the category name from the subarray so we can see how long it is and display just the words
			_tempctg = REPLACE(_tempctg,"|",",") //Change the | delimiter to commas so it's easier to deal with
			
			_ii = 0
			_categorysize = ARRAYSIZE(_tempctg) //Get the length
			while _ii < _categorysize //Loop to check words in the subarray
			{
				if _tempctg[_ii] == reference0 //If the word is the one that the user clicked on
				{
					currentplace = (_ii + 1) //Get the current placement so we can replace it later
				}
				_ii++
			}
		}
	}
	--
	"\![set,balloontimeout,-1]\*%(wdcb)Editing word: %(reference0)\n\n\![*]\q[Cancel,OnUserCategoryDisplay]\![open,inputbox,OnEditWord]"
}

OnEditWord //Upon editing a word
{
	reference0 = REPLACE(reference0,"|","") //Remove all illegal characters
	reference0 = REPLACE(reference0,"\","")
	reference0 = REPLACE(reference0,",","")
	reference0 = REPLACE(reference0,"/","")
	nametest = reference0 //Store reference0 in a dummy variable
	nametest = REPLACE(nametest," ","")
	if nametest == "" //If it's blank
	{
		"\0%(wdcb)\s[0]\![set,balloontimeout,-1]\*You must enter a word,\w4 please try again.\n\n\![*]\q[Cancel,OnUserCategoryDisplay]\![open,inputbox,OnEditWord,-1]\e"
	}
	else //Otherwise
	{
		CurrentOrigCategory[currentplace,"|"] = reference0 //Replaces the proper word with the new one
		UserCategories[CTGNum] = CurrentOrigCategory //Applies the changes to the full array
		--
		OnUserCategoryDisplay
	}
}

OnNewWordInput //Open the input box to make a new word
{
	"\0\s[0]\![set,balloontimeout,-1]\*\_q%(wdcb)\![set,autoscroll,disable]Type a word.\n\n\![*]\q[Done,wordinputdone]"
	--
	if wordsadded != ""
	{
		"\n\nWords added so far:\n\n%(wordsadded)"
	}
	--
	"\![open,inputbox,OnNewWord,-1]\e"
}

OnNewWord //Creating a new word
{
	reference0 = REPLACE(reference0,"|","") //Remove illegal characters
	reference0 = REPLACE(reference0,"\","")
	reference0 = REPLACE(reference0,",","")
	reference0 = REPLACE(reference0,"/","")
	nametest = reference0 //Put reference0 into a dummy variable so we can test if it's only spaces
	nametest = REPLACE(nametest," ","")
	if nametest == "" //If it's blank
	{
		"\0\s[0]\![set,balloontimeout,-1]\*\_q%(wdcb)\![set,autoscroll,disable]You must enter a word,\w4 please try again.\n\n\![*]\q[Done,wordinputdone]"
	--
	if wordsadded != ""
	{
		"\n\nWords added so far:\n\n%(wordsadded)"
	}
	--
	"\![open,inputbox,OnNewWord,-1]\e"
	}
	else //Otherwise, add it. Even if it's a duplicate.
	{
		CurrentOrigCategory += "|%(reference0)"
		wordsadded += "%(reference0)\n"
		UserCategories[CTGNum] = CurrentOrigCategory
		OnNewWordInput
	}
}

Select.wordinputdone
{
	"\![close,inputbox,OnNewWord]"
	--
	OnUserCategoryDisplay
}

OnRemoveWord //Delete word menu - displays the words same as before, but with a different menu choice
{
	_totalctg = ARRAYSIZE(UserCategories)
	worddisplay = ""
	
	for _i = 0; _i < _totalctg; _i++
	{
		_tempctg = UserCategories[_i]
		if _tempctg[0,"|"] == currentusercategory
		{
			CurrentOrigCategory = _tempctg
			CTGNum = _i
			_tempctg[1,"|"] = IARRAY
			_tempctg[0,"|"] = IARRAY
			_tempctg = REPLACE(_tempctg,"|",",")
			
			_ii = 0
			_categorysize = ARRAYSIZE(_tempctg)
			while _ii < _categorysize
			{
				worddisplay += "\q[%(_tempctg[_ii]),deleteword]\n"
				_ii++
			}
		}
	}
	--
	
	"%(wdcb)\*\![set,balloontimeout,-1]\![set,autoscroll,disable]\_q%(medf)Delete which word?%(reg)\n\n"
	--
	"%(worddisplay)"
	--
	"\n\n\![*]\q[Cancel,OnUserCategoryDisplay]\e"
}

OnChoiceDeleteWord
{
	_totalctg = ARRAYSIZE(UserCategories)
	for _i = 0; _i < _totalctg; _i++
	{
		_tempctg = UserCategories[_i]
		if _tempctg[0,"|"] == currentusercategory
		{
			CurrentOrigCategory = _tempctg
			CTGNum = _i
			_tempctg[0,"|"] = IARRAY
			_tempctg = REPLACE(_tempctg,"|",",")
			
			_ii = 0
			_categorysize = ARRAYSIZE(_tempctg)
			while _ii < _categorysize
			{
				
				if _tempctg[_ii] == reference0
				{
					currentplace = (_ii + 1)
				}
				_ii++
			}
		}
	}
	--
	OnDeleteWord
}

OnDeleteWord //Upon deleting a word
{
	CurrentOrigCategory = REPLACE(CurrentOrigCategory,"|",",") 
	CurrentOrigCategory[currentplace] = IARRAY
	CurrentOrigCategory = REPLACE(CurrentOrigCategory,",","|")
	UserCategories[CTGNum] = CurrentOrigCategory
	--
	OnRemoveWord
}

Select.editcategory //Open a box to rename a category
{
	"\*\![set,balloontimeout,-1]\_q%(wdcb)Renaming category: %(currentusercategory)\n\n\![*]\q[Cancel,EditCTGCancel]\![open,inputbox,OnEditCategory,-1]"
}

OnEditCategory //Same as checking names, check to see if the name is taken or if it's blank
{
	categorynames = ""
	_allLength = ARRAYSIZE(UserCategories)
	_i = 0
	while _i < _allLength
	{
		_tempctg = UserCategories[_i]
		_name = _tempctg[0,"|"]
		categorynames += "%(_name),"
		_i++
	}
	_ii = 0
	samename = 0
	TestThing = ""
	while _ii < _allLength //This goes through every name in the category list to see if what you put in matches any of them exactly
	{
		if categorynames[_ii] == reference0
		{
			samename = 1
		}
		_ii++
	}
	--
	reference0 = REPLACE(reference0,"|","") //Removes illegal characters
	reference0 = REPLACE(reference0,"\","")
	reference0 = REPLACE(reference0,",","")
	reference0 = REPLACE(reference0,"/","")
	nametest = reference0 //Store reference0 in a dummy variable to remove spaces and test if it's blank
	nametest = REPLACE(nametest," ","")
	if nametest == "" //If the user put in nothing
	{
		"\0%(wdcb)\s[0]\![set,balloontimeout,-1]\*\_qYou must enter a name, please try again.\n\n\![*]\q[Cancel,EditCTGCancel]\![open,inputbox,OnEditCategory,-1]\e"
	}
	elseif samename == 0 || reference0 == currentusercategory //If it's a legal name
	{
		for _i = 0; _i < _totalctg; _i++
		{
			_tempctg = UserCategories[_i]
			if _tempctg[0,"|"] == currentusercategory
			{
				CurrentOrigCategory = _tempctg
				CTGNum = _i
				_tempctg[0,"|"] = IARRAY
				_tempctg = REPLACE(_tempctg,"|",",")
			}
		}
		
		CurrentOrigCategory[0,"|"] = reference0 //Save the changed category name into the subarray
		UserCategories[CTGNum] = CurrentOrigCategory //Save the new subarray into the array
		currentusercategory = reference0
		--
		OnUserCategoryDisplay
	}
	else //If the name is taken
	{
		"\0%(wdcb)\s[0]\![set,balloontimeout,-1]\*\_qThe name %(reference0) is already taken, please try again.\n\n\![*]\q[Cancel,EditCTGCancel]\![open,inputbox,OnEditCategory,-1]\e"
	}
}

Select.EditCTGCancel
{
	"\![close,inputbox,OnEditCategory]"
	--
	OnUserCategoryDisplay
}

Select.newcategory //Open the input box to name a new category
{
	"\0\s[0]\![set,balloontimeout,-1]\*\_q%(wdcb)Please pick a name for the new category.\n\n\![*]\q[Cancel,NewCTGCancel]\![open,inputbox,OnNewCategory,-1]"
}

OnNewCategory //Check through every category name, see if this matches any of them
{
	_categorynames = ""
	_alllength = ARRAYSIZE(UserCategories)
	_i = 0
	while _i < _alllength
	{
		_tempctg = UserCategories[_i]
		_categorynames += _tempctg[0,"|"]
		_i++
	}
	--
	reference0 = REPLACE(reference0,"|","") //Removes illegal characters so the user can't mess up the subarrays
	reference0 = REPLACE(reference0,"\","")
	reference0 = REPLACE(reference0,",","")
	reference0 = REPLACE(reference0,"/","")
	_nametest = reference0 //Moves the name into a dummy variable so we can remove spaces and see if it's still empty
	_nametest = REPLACE(_nametest," ","")
	if _nametest == "" //If the name is empty
	{
		"\0%(wdcb)\s[0]\![set,balloontimeout,-1]\*\_qYou must enter a name,\w4 please try again.\n\n\![*]\q[Cancel,NewCTGCancel]\![open,inputbox,OnNewCategory,-1]\e"
	}
	elseif reference0 !_in_ _categorynames //If the name is legal
	{
		UserCategories ,= "%(reference0)|On" //Sets the category to on by default
		--
		OnUserCTG
	}
	else //If the name is taken
	{
		"\0%(wdcb)\s[0]\![set,balloontimeout,-1]\*\_qThat category name is already taken,\w4 please try again.\n\n\![*]\q[Cancel,NewCTGCancel]\![open,inputbox,OnNewCategory,-1]"
	}
}

Select.NewCTGCancel
{
	"\![close,inputbox,OnNewCategory]"
	--
	OnUserCTG
}

OnRemoveCategory //Loop through and display every category, with the menu options set up to delete categories instead
{
	_totalctg = ARRAYSIZE(UserCategories)
	_displayctg = ""
	for _i = 0; _i < _totalctg; _i++
	{
		_tempctg = UserCategories[_i]
		_categoryname = _tempctg[0,"|"]
		_displayctg += "\q[%(_categoryname),deletecategory]\n\n[half]"
	}
	--
	"%(wdcb)\_q\![set,autoscroll,disable]\![set,balloontimeout,-1]\*%(medf)Which category do you want to delete?%(reg)\n\n"
	--
	"%(_displayctg)"
	--
	"\n\n\![*]\q[Cancel,OnUserCTG]\e"
}

OnChoiceDeleteCategory //From OnChoiceSelectEx
{
	_totalctg = ARRAYSIZE(UserCategories)
	for _i = 0; _i < _totalctg; _i++
	{
		_tempctg = UserCategories[_i]
		if _tempctg[0,"|"] == reference0
		{
			CurrentOrigCategory = _tempctg
			CTGNum = _i
			_tempctg[0,"|"] = IARRAY
			_tempctg = REPLACE(_tempctg,"|",",")
			ctgamt = ARRAYSIZE(_tempctg)
			ctgamt-- //Uh. So sometimes, this causes the amount of words in the category to display right... and sometimes it causes it to be one too low. Dunno why. I'll have to look into it later, but it's not super important, so
		}
	}
	--
	"\b2\*\![set,balloontimeout,-1]Are you sure you want to delete '%(reference0)' and the %(ctgamt) word"
	--
	if ctgamt != 1 //adds an S if it should be plural
	{
		"s"
	}
	--
	" inside?\n\n\![*]\q[Yes,OnDeleteCategory]\n\n\![*]\q[No,OnRemoveCategory]"
}

OnDeleteCategory //Upon deleting a category
{
	UserCategories[CTGNum] = IARRAY
	--
	OnRemoveCategory
}

Select.turnallon //This goes through the loop, turning all categories to on
{
	_totalctg = ARRAYSIZE(UserCategories)
	
	for _i = 0; _i < _totalctg; _i++
	{
		_tempctg = UserCategories[_i]
		_tempctg[1,"|"] = "On" //This position is the on/off toggle, so we just set it to On
		UserCategories[_i] = _tempctg
	}
	--
	OnUserCTG
}

Select.turnalloff //This goes through the loop, turning all categories to off
{
	_totalctg = ARRAYSIZE(UserCategories)
	
	for _i = 0; _i < _totalctg; _i++
	{
		_tempctg = UserCategories[_i]
		_tempctg[1,"|"] = "Off" //This position is the on/off toggle, so we just set it to Off
		UserCategories[_i] = _tempctg
	}
	--
	OnUserCTG
}

//-----Changing Cases-----
OnCaseList
{
	if teachUPPER == ""; {teachUPPER = "Off"}
	if teachLOWER == ""; {teachLOWER = "Off"}
	if teachPROPER == ""; {teachPROPER = "Off"}
	if teachNUM == ""; {teachNUM = "Off"}
	if teachPUNCT == ""; {teachPUNCT = "Off"}
	if tooltips == ""; {tooltips = "Off"}
	
	if teachUPPER == "Off" && teachLOWER == "Off" && teachPROPER == "Off" && teachNUM == "Off" && teachPUNCT == "Off"
	{
		teachUPPER = "On"
	}
	"\0%(wdcb)\_q\s[0]Which cases would you like me to use for quizzes and practice?\n\n"
	--
	"\![*]\q[UPPERCASE (%(teachUPPER)),OnToggleUpper]\n/
	\![*]\q[lowercase (%(teachLOWER)),OnToggleLower]\n/
	\![*]\q[Propercase (%(teachPROPER)),OnToggleProper]\n\n/
	\![*]\q[Numbers (%(teachNUM)),OnToggleNumber]\n/
	\![*]\q[Punctuation (%(teachPUNCT)),OnTogglePunct]"
	--
	"\n\n\![*]\q[Back to Wingdings Menu,OnWingdingsMenu]\n\![*]\q[I'm done,cancelnodialogue]\e"
}

OnToggleUpper
{
	if teachUPPER != "On"
	{
		teachUPPER = "On"
	}
	else
	{
		teachUPPER = "Off"
	}
	--
	if reference0 == "ingame"
	{
		OnInGameCases
	}
	else
	{
		OnCaseList
	}
}

OnToggleLower
{
	if teachLOWER != "On"
	{
		teachLOWER = "On"
	}
	else
	{
		teachLOWER = "Off"
	}
	--
	if reference0 == "ingame"
	{
		OnInGameCases
	}
	else
	{
		OnCaseList
	}
}

OnToggleProper
{
	if teachPROPER != "On"
	{
		teachPROPER = "On"
	}
	else
	{
		teachPROPER = "Off"
	}
	--
	if reference0 == "ingame"
	{
		OnInGameCases
	}
	else
	{
		OnCaseList
	}
}

OnToggleNumber
{
	if teachNUM != "On"
	{
		teachNUM = "On"
	}
	else
	{
		teachNUM = "Off"
	}
	--
	if reference0 == "ingame"
	{
		OnInGameCases
	}
	else
	{
		OnCaseList
	}
}

OnTogglePunct
{
	if teachPUNCT != "On"
	{
		teachPUNCT = "On"
	}
	else
	{
		teachPUNCT = "Off"
	}
	--
	if reference0 == "ingame"
	{
		OnInGameCases
	}
	else
	{
		OnCaseList
	}
}

//In game case toggle
OnCaseInGame
{
	currentgame = reference0
	OnInGameCases
}

OnInGameCases
{
	if teachUPPER == ""; {teachUPPER = "Off"}
	if teachLOWER == ""; {teachLOWER = "Off"}
	if teachPROPER == ""; {teachPROPER = "Off"}
	if teachNUM == ""; {teachNUM = "Off"}
	if teachPUNCT == ""; {teachPUNCT = "Off"}
	
	if teachUPPER == "Off" && teachLOWER == "Off" && teachPROPER == "Off" && teachNUM == "Off" && teachPUNCT == "Off"
	{
		teachUPPER = "On"
	}
	"\0%(wdcb)\_q\s[0]Which cases would you like me to use for quizzes and practice?\n\n"
	--
	"\![*]\q[UPPERCASE (%(teachUPPER)),OnToggleUpper,ingame]\n/
	\![*]\q[lowercase (%(teachLOWER)),OnToggleLower,ingame]\n/
	\![*]\q[Propercase (%(teachPROPER)),OnToggleProper,ingame]\n\n/
	\![*]\q[Numbers (%(teachNUM)),OnToggleNumber,ingame]\n/
	\![*]\q[Punctuation (%(teachPUNCT)),OnTogglePunct,ingame]"
	--
	"\n\n\*\![set,balloontimeout,-1]"
	--
	if currentgame == "TranslationWD"
	{
		"\![*]\q[Back to Game,OnTranslationWD]"
	}
	elseif currentgame == "WhosThatWingding"
	{
		"\![*]\q[Back to Game,OnWhosThatWingding]"
	}
	elseif currentgame == "MatchWD"
	{
		"\![*]\q[Back to Game,OnMatchWD]"
	}
	elseif currentgame == "Hangman"
	{
		"\![*]\q[Back to Game,OnPlayHangman]"
	}
	--
	"\e"
}

RandomCase
{
	if teachUPPER == "On"
	{
		"UPPER"
	}
	if teachLOWER == "On"
	{
		"lower"
	}
	if teachPROPER == "On"
	{
		"Proper"
	}
}