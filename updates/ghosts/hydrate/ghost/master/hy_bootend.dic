OnFirstBoot //Dialogue when you first open the ghost
{
	//Initialize all your variables here!
	lastTalk = ""
	passsec = 0
	passmin = 0
	passhour = 0
	nowshell = "Clear"
	talkrate = "every hour"
	aitalkinterval = 3600
	deleteshitai = "OFF"
	todayswaters = 0
	totalwaters = 0
	currentdrinkstreak = 0
	extrasipstoday = 0
	extrasipstotal = 0
	timeouttime = 3000 //5 minutes
	waitingcommuS = IARRAY
	waitingcommuM = IARRAY
	AutoUpdates = ("ON",0)
	nowscale = 100
	
	notif = "None"
	volume = 50
	HourNotifs = "OFF"
	
	booting = 0 //This will be set to 0 after firstboot is complete
	
	"\0\s[0](Thank you for choosing to hydrate.)\w8\n\n(Reminders will be issued every hour;\w4 double click the bottle if you'd like to change the rate or switch shells!)"
}

OnBoot //Normal booting
{
	lastTalk = ""
	passsec = 0
	passmin = 0
	passhour = 0
	todayswaters = 0
	//currentdrinkstreak = 0
	extrasipstoday = 0
	booting = 0
	AutoUpdates[1] = 0
	
	"\1\s[-1]\0\s[0]"
	--
	"\0\s[0](Thank you for choosing to hydrate today.)\w8\n\n"
	--
	if talkrate != "off"
	{
		"(Reminders are set to be issued %(talkrate).)\w8\n\n"
		"(Reminders are set for %(talkrate).)\w8\n\n"
		"(Reminders are set to %(talkrate).)\w8\n\n"
		"(You will be given reminders %(talkrate).)\w8\n\n"
		"(You will be given a reminder %(talkrate).)\w8\n\n"
	}
	else
	{
		"(Reminders are currently off.)\w8\n\n"
	}
	--
	"(You've got this!)"
	"(Take care of yourself!)"
	"(Be good to you!)"
	"(It's ok to miss one,\w4 but try not to miss two in a row!)"
	--
	if AutoUpdates[0] == "ON"
	{
		AutoUpdates[1] = 1
		"\![updatebymyself,checkonly]\e"
	}
	else
	{
		AutoUpdates[1] = 0 //Just in case
		"\e"
	}
}

OnClose
{
	if todayswaters > 0
	{
		_s = "s"; if todayswaters == 1; _s = ""
		"\0\s[0](You took %(todayswaters) sip%(_s) of water today,\w4 well done!)"
	}
	else
	{
		"\0\s[0](Take care!)"
	}
	--
	"\w8\w8\-\e"
}

OnWindowStateRestore //When you bring the ghost back up after minimizing it
{
	"\0\s[0]\e"
}

OnGhostChanging //Changing to another ghost
{
	if reference0 == "Hydrate" //If reloading
	{
		"\0\s[0](Reloading!)\e"
	}
	else
	{
		if todayswaters > 0
		{
			"\0\s[0](You took %(todayswaters) sips of water today,\w4 well done!)\e"
		}
		else
		{
			"\0\s[0](Remind %(reference0) to hydrate too!)\e"
		}
	}
}

OnGhostChanged //After switching
{
	"\1\s[-1]\0\s[0]"
	--
	if reference0 == "Hydrate" //Finished reloading
	{
		"(Finished!)\e"
	}
	else
	{
		OnBoot
	}
}

OnShellChanging //Starting to change the shell
{
	"\![get,property,OnGetCoords,currentghost.scope(0).rect]\e" //This gets the current ghost coordinates so that they don't jump around the screen when they change shells - Oof, doesn't work with the shell change menu
}

OnShellChanged //After the shell has changed
{
	shellchange[7] = reference0
	"\s[-1]\![get,property,OnGetCoords2,currentghost.scope(0).rect]\e"
}

OnGetCoords //This gets the x coordinate
{
	shellchange[0] = reference0[0] //Head height
	shellchange[1] = reference0[3] //Feet height
	shellchange[2] = TOINT(reference0[3]) - TOINT(reference0[1]) //Frame height
}

OnGetCoords2
{
	shellchange[3] = reference0[0] //Head height
	shellchange[4] = reference0[3] //Feet height
	shellchange[5] = TOINT(reference0[3]) - TOINT(reference0[1]) //Frame height
	shellchange[6] = TOINT(shellchange[1]) - TOINT(shellchange[5]) //Should be the feet 
	
	_f = FENUM(SHIORI3FW.ShellPath) //This block of text checks for a file called DressupRules.dic, and if it exists, writes everything in it into its own file and reloads the shiori! That means you can add custom dressup rules to the random dressup generator!!
	_files = SPLIT(_f,",")
	if ASEARCH("DressupRules.dic",_files) != -1
	{
		_pathR = "%(SHIORI3FW.ShellPath)DressupRules.dic"
		_pathW = "hy_dressuprules.dic"
		_oR = FOPEN(_pathR,"r")
		_oW = FOPEN(_pathW,"w")
		--
		for buff = ""; _buff != -1; _buff = FREAD(_pathR)
		{
			_f = FWRITE(_pathW,_buff)
		}
		--
		_f = FCLOSE(_pathR)
		_f = FCLOSE(_pathW)
		--
		"\![reload,shiori]"
	}
	else
	{
		_pathW = "hy_dressuprules.dic"
		_oW = FOPEN(_pathW,"w")
		_f = FWRITE(_pathW,"//No dressup rules to copy")
		_f = FCLOSE(_pathW)
		--
		"\![reload,shiori]"
	}
	--
	_last = nowshell
	nowshell = shellchange[7]
	
	AutoUpdates[4] = 0
	"\![get,property,OnShellAuthor,currentghost.shelllist.current.craftman,currentghost.shelllist.current.craftmanw,currentghost.shelllist.current.craftmanurl]\0\![move,--X=%(shellchange[0]),--Y=%(TOINT(shellchange[6])),--base=primaryscreen]\1\s[-1]\0\s[0]" //Default surfaces, and moves the ghost to where it was before changing shells
	--
	if nowshell == _last //If the shell they changed to is the same as the last one
	{
		"(Reloaded %(SHIORI3FW.ShellName)!)"
	}
	elseif nowshell == "Clear" //If they've switched back to the default
	{
		"(Default water.)"
	}
	else
	{
		"(Now using %(nowshell).)\w8\w8\n\n" //If they're using anything other than the default
		--
		ShellChangeComments
	}
	--
	if AutoUpdates[0] == "ON"
	{
		AutoUpdates[1] = 1
		"\![update,shell,checkonly]"
	}
}

//Optional comments for individual shells
ShellChangeComments
{
	if nowshell == "A bottle of souls"
	{
		"(A delicious treat!)"
		"(Screams of the damned!)"
		"(Set them free!)\n\n\f[height,-2](*Hydrate is not liable for any damages caused as a result of setting the souls free.)"
	}
	elseif nowshell == "Alkohol"
	{
		"(Don't get all your hydration through alcohol!)"
	}
	elseif nowshell == "Ballpoint Pen"
	{
		"(Cheap but effective!)\n\n(For writing, probably not for drinking!)"
		"(Always getting clogged!)"
		"(Easy to lose!)"
		"(Best used on dark backgrounds!)"
	}
	elseif nowshell == "Bishoujo Hydrate"
	{
		"(uwu~!)"
		"(âœ¨>wo)"
	}
	elseif nowshell == "Bleach"
	{
		"(Not for drinking!)"
		"(Not safe for consumption!)"
		"(Probably doesn't taste good,\w4 but don't test that!)"
		"(Don't try this at home!)"
		"(Be careful what you mix it with!)"
	}
	elseif nowshell == "Bowie Bottle"
	{
		"(Pair it with Bowie!)"
		"(Part of a complete ghost set!)"
	}
	elseif nowshell == "Can"
	{
		"(Soda!)"
		"(Pop!)"
		"(Soda pop!)"
	}
	elseif nowshell == "Canned Food"
	{
		"(Beans!)"
	}
	elseif nowshell == "Coffee Cup"
	{
		"(Try the \_a[https://zichqec.github.io/s-the-skeleton/needle]Needle\_a sleeve! It's pointy!)"
		"(Not sponsored!)"
		"(Try all the varieties, for free!)"
	}
	elseif nowshell == "Fishbowl"
	{
		"(Surely the occupant won't mind a few straws!)"
		"(Fish friend!)"
	}
	elseif nowshell == "Geoffrey"
	{
		"(It's Geoffrey!)"
		"(It's Geoffrey.)"
		"(Hypnotizing!)"
	}
	elseif nowshell == "Hydrate Shell Nim"
	{
		"(Pure H2O!)"
		"(New look, same great taste!)"
	}
	elseif nowshell == "Hydrate Shell Template"
	{
		"(Make something neat!)"
		"(Zi spent hours perfecting this amazing lineart!)"
	}
	elseif nowshell == "Ink"
	{
		"(Don't drink ink!)"
		"(Refreshing!)\n\n(If you're a pen!)"
	}
	elseif nowshell == "Jam"
	{
		"(Jam time!)"
		"(Get ready to jam!)"
	}
	elseif nowshell == "Kid's birthday cup"
	{
		"(Happy birthday!)"
		"(\f[height,+20]\f[name,arial]ðŸŽ‰ðŸŽ‰ðŸŽ‰\f[default])"
	}
	elseif nowshell == "Lava in a Cup"
	{
		"(Delicious for volcanoes!)"
		"(Volcano extract!)"
	}
	elseif nowshell == "LOL Mug"
	{
		"(LOL!)"
		"(Lots Of Love!)"
		"(Laughing Out Loud!)"
	}
	elseif nowshell == "Martini Gore"
	{
		"(Don't ask where the eye came from!)"
		"(Where did the eye come from!)"
		"(Perfect for all the vampires in your life!)"
	}
	elseif nowshell == "Mate Cup"
	{
		"(Full of interesting info in the shell readme!)"
		"(Read all about it in the shell readme!)"
	}
	elseif nowshell == "Metal Bottle"
	{
		"(Comes in a variety of designs!)"
		"(Keeps your water cold!)"
		"(Make sure to keep it clean!)"
		"(Reusable is cheaper!)"
		"(Makes a squeaky noise when you take the cap off!)"
		"(Clean it with vinegar if it starts smelling funky!)"
		"(Might not be dishwasher safe!)"
		"(Carry it with you everywhere!)"
		"(Keeps your water hot, if you want!)"
		"(Fits into cupholders!)"
		"(Cats love to lick them!)"
		"(Cool to the touch!)"
	}
	elseif nowshell == "Milk"
	{
		"(Cow juice!)"
		"(Cereal water!)"
		"(Try the space milk, it's out of this world!)"
	}
	elseif nowshell == "Molotov Cocktail"
	{
		"(Don't try this at home!)"
		"(Watch out for glass shards!)"
		"(Fwoosh!)"
	}
	elseif nowshell == "Not Haunted Water-Based Vegetarian Shoe"
	{
		"(Mildewy!)"
		"(Not haunted! Not at all!)"
	}
	elseif nowshell == "Paint tube"
	{
		"(Better used on a canvas!)"
		"(Put the cap back on when you're done!)"
	}
	elseif nowshell == "Poison"
	{
		"(You should probably drink water instead!)"
		"(Water is definitely healthier!)"
		"(Don't drink poison!)"
		"(Not a good choice for hydration, but it sure is pretty!)"
		"(Hydration for your worst enemies!*)\n\n\f[height,-2](*Murder is bad and illegal.)"
	}
	elseif nowshell == "Potion"
	{
		"(Magical effects!*)\n\n\f[height,-2](*Magical effects not guaranteed.)"
		"(Mysterious and strange!)"
		"(Good for regenerating stats, but too precious for general hydration!)"
		"(Pretty colors!)"
	}
	elseif nowshell == "Ramune"
	{
		"(Try all the flavors!)"
		"(Marble not for consumption!)"
	}
	elseif nowshell == "Rilakkuma"
	{
		"(It's bear-y important to be hydrated!)"
	}
	elseif nowshell == "Slimedration"
	{
		"(Squoosh squorsh!)"
		"(Use a firm straw!)"
		"(If you blow bubbles it may scream to let the air out!)\w8\w8\n\n(This is a natural reaction and most definitely not a pain response!)"
	}
	elseif nowshell == "Syringe"
	{
		"(Also doubles as a shell for \_a[https://zichqec.github.io/s-the-skeleton/needle]Needle\_a!)"
		"(Careful handling sharps!)"
		"(Probably don't inject yourself with whatever's in there!)"
	}
	elseif nowshell == "Teacup"
	{
		"(Make sure to drink water, too!)"
		"(Possibly full of caffiene!)"
		"(Hot leaf water!)"
		"(Drink it before it gets too cold!)\n\n(Unless that's your thing.)"
	}
	elseif nowshell == "Test Tubes"
	{
		"(Yum, lab equipment!)"
		"(Don't drink things that come out of test tubes!)"
		"(Someone fit the whole sky in a few little tubes!)"
	}
	elseif nowshell == "TV Aquarium"
	{
		"(Don't touch that dial!)"
		"(High definition fish!)"
	}
	elseif nowshell == "Water Dishes"
	{
		"(Dog water!)"
		"(Cat water!)"
		"(Yum!)"
		"(Refill them often!)"
	}
}

OnShellAuthor
{
	shellauthor = IARRAY
	shellauthor[0] = reference0 //craftman
	if shellauthor[0] == ""; shellauthor[0] = reference1 //Craftman is replaced by craftmanw if craftman is empty
	shellauthor[1] = reference1 //craftmanw
	shellauthor[2] = reference2 //craftmanurl
}



OnUpdateVars
{
	//---1.1.0---
	/*
	totalwaters = 0
	currentdrinkstreak = 0
	extrasipstoday = 0
	extrasipstotal = 0
	timeouttime = 3000 //5 minutes
	waitingcommuS = IARRAY
	waitingcommuM = IARRAY
	AutoUpdates = ("On",0)
	nowscale = 100
	*/
	if ISVAR('totalwaters') == 0; totalwaters = 0
	if ISVAR('currentdrinkstreak') == 0; currentdrinkstreak = 0
	if ISVAR('extrasipstoday') == 0; extrasipstoday = 0
	if ISVAR('extrasipstotal') == 0; extrasipstotal = 0
	if ISVAR('timeouttime') == 0
	{
		if aitalkinterval <= 300 //if it's less than 5 minutes; the default
		{
			timeouttime = aitalkinterval - 60 //make it 1 minute less than what the user set it to
			if timeouttime <= 60; timeouttime = 30 //If it's less than a minute, make it at least 30 seconds
		}
		else
		{
			timeouttime = 300 //set it to 5 minutes, the default
		}
		timeouttime *= 1000
	}
	if ISVAR('waitingcommuS') == 0; waitingcommuS = IARRAY
	if ISVAR('waitingcommuM') == 0; waitingcommuM = IARRAY
	if ISVAR('AutoUpdates') == 0; AutoUpdates = ("ON",0,,0,0,0)
	if ISVAR('nowscale') == 0; nowscale = 100
	
	if !ISVAR("notif"); notif = "None"
	if !ISVAR("volume"); volume = 50
	if !ISVAR("HourNotifs"); HourNotifs = "OFF"
}
/*
OnNotifyDressupInfo
{
	availabledressups = IARRAY //This one is to display the dressup menu
	currentdressups = IARRAY //This one is so we can display which dressups are currently in use
	foreach reference; _dressup //if you just write reference, you get all the references, apparently? Which is super useful
	{
		//Ok, so here's the deal. When it lists the dressups, the amount of options that can be specified _varies._ It can be empty, 1, 2, or 3. To the best of my knowledge. SO. This inner loop starts at 3 (because elements 0 1 and 2 are static), checks to see if the next element has a keyword, and skips it if it does. Then when it finds the on/off indicator, it breaks the loop. IT DIDNT HAVE TO BE THIS WAY.
		_onoff = 0
		_must = 0
		_mult = 0
		for _i = 3; _i < ARRAYSIZE(_dressup); _i++
		{
			if _dressup[_i] == "default" || _dressup[_i] == ""; continue
			elseif _dressup[_i] == "mustselect" {_must = 1; continue}
			elseif _dressup[_i] == "multiple" {_mult = 1; continue}
			else; _onoff = _dressup[_i]; break
		}
		_toadd = _dressup[1] + "|" + _dressup[2]
		if _must == 1; _toadd += "|mustselect"
		if _mult == 1; _toadd += "|multiple"
		availabledressups ,= _toadd
		if _onoff == 1; currentdressups ,= _dressup[1] + "|" + _dressup[2]
	}
}
*/

//Character ID, category name, part name, option, valid / invalid 0, thumbnail path
OnNotifyDressupInfo
{
	availabledressups = IARRAY //This one is to display the dressup menu
	currentdressups = IARRAY //This one is so we can display which dressups are currently in use
	dressupcategories = IARRAY
	
	//Has to be reference.raw because parts of this are delimited with C_BYTE1
	foreach reference.raw; _dressup
	{
		_dressup = SPLIT(_dressup,C_BYTE1)
		
		_toadd = _dressup[1] + C_BYTE1 + _dressup[2]
		if _dressup[4] == 1; currentdressups ,= _toadd
		
		if ASUB(_dressup[1],dressupcategories) == -1; dressupcategories ,= _dressup[1]
		
		if _dressup[3] != ""; _toadd += C_BYTE1 + _dressup[3]
		availabledressups ,= _toadd
	}
}