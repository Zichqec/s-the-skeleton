//----Drag and Drop----

OnInstallBegin
{
	"\0\s[0](Installing...)\e"
}

OnInstallComplete //Installing something ghost related
{
	if reference0 == "ghost"
	{
		"\0\s[0](Installed %(reference1).\w8\w8 Do you want to bring them here?)\n\n"
		--
		"\q[Change to %(reference1),ChangeToGhost]\n/
		\q[Call %(reference1),CallGhost]\n/
		\q[No thanks,cancelnodialogue]\e"
	}
	else
	{
		"\0\s[0](Installed %(reference1).)\e"
	}
}

Select.ChangeToGhost
{
	"\![change,ghost,lastinstalled]"
}

Select.CallGhost
{
	"\![call,ghost,lastinstalled]"
}

OnInstallFailure //If the install fails
{
	"\0\s[0](The install failed.\w8\w8\n\n"
	--
	if reference0 == "unsupported"
	{
		"The file isn't supported."
	}
	elseif reference0 == "extraction"
	{
		"It couldn't be extracted."
	}
	--
	")\e"
}

OnInstallRefuse
{
	"\0\s[0](Cannot install, this is meant for %(reference0).)\e"
}

OnUpdatedataCreating //Creating an updates2.dau
{
	"\0\s[0](Creating an updates2.dau file.)\e"
}

OnUpdatedataCreated //Finished creating
{
	"\0\s[0](Finished making the updates2.dau.)\e"
}

OnNarCreating //Creating a .nar
{
	"\0\s[0](Creating a .nar file.)\w8\e"
}

OnNarCreated //Finished creating
{
	"\0\s[0](Finished making the .nar file.)\e"
}

//----Uninstalling----

OnVanishSelecting //Bringing up the uninstall option
{
	"\0\s[0](Do you want to uninstall?)\e"
}

OnVanishSelected //Deciding to uninstall
{
	"\0\s[0](Take care of yourself, user!)\w8\w8\e"
}

OnVanishCancel //Changing your mind
{
	
}

OnVanished //When another ghost has been uninstalled and it switches to this ghost
{
	"\0\s[0](%(reference0) wasn't hydrated enough.)\e"
}

//----Network update---

OnUpdateCheckComplete //When the ghost finishes checking for updates
{
	if reference0 == "none" //If there are no new files
	{
		if AutoUpdates[1] != 1; "\0\s[0](There are no new files.)\e" //This if stops the dialogue from displaying if this check was performed automatically.
	}
	else
	{
		if AutoUpdates[1] == 1 //If this was an automatic check (always true but shrug)
		{
			AutoUpdates[1] = 1 //Sets it so it won't check again until at least midnight
			if reference0 == "none" //If there are no new files
			{
				if reference3 == "ghost"; AutoUpdates[3] = 0
				elseif reference3 == "shell"; AutoUpdates[4] = 0
				elseif reference3 == "balloon"; AutoUpdates[5] = 0
			}
			else
			{
				if reference3 == "ghost"; AutoUpdates[3] = 1
				elseif reference3 == "shell"; AutoUpdates[4] = 1
				elseif reference3 == "balloon"; AutoUpdates[5] = 1
			}
			--
			if reference3 == "ghost"; "\![update,shell,checkonly]"
			elseif reference3 == "shell"; "\![update,balloon,checkonly]"
			else; "\e Update Check Complete"
		}
		/*
		--
		"\0\s[0](An update is available"
		--
		if reference3 == "shell"; "for the %(nowshell) shell"
		elseif reference3 == "balloon"; "for the %(SHIORI3FW.BalloonName) balloon"
		--
		". Do you want to update now?)\n\n\![*]\q[Update now,OnStartUpdate,%(reference3)]\n\![*]\q[No thanks,cancelnodialogue]\e"
		*/
	}
}

OnStartUpdate
{
	if reference0 == "ghost"
	{
		"\![updatebymyself]"
	}
	else
	{
		_cmd = ""
		if AutoUpdates[3] == 1; _cmd += "ghost+"
		if AutoUpdates[4] == 1; _cmd += "shell+"
		if AutoUpdates[5] == 1; _cmd += "balloon+"
		_cmd = ERASE(_cmd,(STRLEN(_cmd) - 1),1)
		"\![update,%(_cmd)]"
	}
}

OnUpdateBegin //Starting to actually update
{
	"\0\s[0](Beginning update.)\w8\w8\e"
}

OnUpdateReady
{
	reference0++ //Number of files starts from 0, so this displays the correct amount
	
	"\0\s[0](There are %(reference0) new files.)\w8\w8\e"
}

//When the update finishes. Don't forget to initialize any new variables you set, I'd recommend making a variable for each version you release, check if that variable is blank, and if it is then initialize variables for that update. That way no matter what version people update from, they get all the necessary variables.
OnUpdateComplete
{
	OnUpdateVars
	AutoUpdates[1] = 0
	if reference0 == "none"
	{
		"\0\s[0](There are no new files.)\e"
	}
	else
	{
		"\0\s[0](Update complete.)"
		--
		"\n\n\![*]\q[Show changelog,OnChangeLog]\n\![*]\q[Ok,NoChangelog]\e"
	}
}

ghostver
{
	"1.2.0"
}

OnChangeLog : all
{
	"\![set,autoscroll,disable]\_q\b2"
	
	"\f[align,center]— Version 1.2.1 —\n\f[align,default]\n"
	
	"• Added unique switch dialogues for all currently known shells.\n\n"
	"• Added an option to swap to a random shell.\n\n"
	"• Changing shells will now check for shell updates if you have auto update checks on.\n\n"
	"• Fixed the auto updates system, it now does what it says it does!\n\n"
	"• Fixed a bug where the shell would not be placed correctly when changing shells.\n\n"
	"• Fixed a bug where if you installed another ghost, the buttons to change to/call the other ghost had their labels swapped.\n\n"
	"• Fixed some minor formatting issues.\n\n"
	"• Changed the right click menu to include functions I had previously excluded.\n\n"
	"• Changed the slider input when changing the reminder rate back to a normal input box. This should allow finer control, independent of balloon. Also you can set your reminders to absurd lengths now."
	
	"\n\n"
	
	"\f[align,center]— Version 1.2.0 —\n\f[align,default]\n"
	
	"• You can now choose to have a sound play when a reminder pops up! Choose from 6 defaults, or set your own custom sound.\n\n"
	"• Added pause mode; pause your drink reminders when you step away from your computer, without losing your drink streak!\n\n"
	"• Hydrate's auto update checks will now automatically check for updates to the current shell and balloon as well.\n\n"
	"• Added an option to pick randomly from available designs.\n\n"
	"• Added an option to toggle off hour notifications.\n\n"
	"• Added a few new dialogues.\n\n"
	"• Reorganized the config menu.\n\n"
	"• Prettied up some of the other menus a little.\n\n"
	"• Updated to YAYAtc571-3.\n\n"
	"• Updates to some of the old code."
	
	"\n\n\n"
	
	
	if reference0 == "FromMenu";"\![*]\q[Back to Config,OnConfigMenu]\n" //Checks to see if the user came here from the functions menu
	"\![*]\q[Done,cancelnodialogue]\e"
}

OnUpdate.OnDownloadBegin //Taken from the GT template because I see no reason to redo this and probably break it
{
	"\_q(Ghost update: downloading %(reference0)...)\n\n"
	--
	_Update_Process = TOINT(reference1) + 1
	_Update_Total = TOINT(reference2) + 1
	_Update_Remaining = _Update_Total - _Update_Process

	//defining starting points
	_PointA = 1
	_PointB = 1

	//defining text buffers beforehand, otherwise they don't display right
	_txt = ""

	//loop calculates how many check boxes to display based on the variables above

	while _PointA <= _Update_Process
	{
		_txt += "O"
		_PointA++
	}
	//see above except for blank boxes
	while _PointB <= _Update_Remaining
	{
		_txt += "o"
		_PointB++
	}
	--
	//using the text buffers to display the correct number of boxes
	"%(_txt)\n\n(%(_Update_Process) of %(_Update_Total))"
	--
	"\e"
}

OnUpdate.OnMD5CompareFailure
{
	"\0\s[0]\n\n(The MD5 values don't match.)\w8\w8\e"
}

OnUpdateFailure //If the update fails
{
	if reference0 == "timeout" //If it timed out
	{
		"\0\s[0](The connection timed out.)\e"
	}
	elseif reference0 == "md5 miss" //If the update files have not been uploaded correctly and don't match the updates2.dau
	{
		"(The MD5 values don't match.\w8\w8 You should contact Zichqec and let her know.)\e"
	}
	elseif reference0 == "artificial" //If the user cancels the update by double clicking the balloon
	{
		"\0\s[0](Cancelled update.)\e"
	}
	else
	{
		"\0\s[0](Error: '%(reference0)'.)\e"
	}
}

/*OnUpdateCheckFailure //Similar to above, but for if the ghost was just checking and not updating
{
	if reference0 == "timeout" //If it timed out
	{
		"\0\s[0](The connection timed out.)\e"
	}
	else
	{
		"\0\s[0](Error:\w4 '%(reference0)'.)\e"
	}
}*/

OnUpdateOtherBegin
{
	if reference3 == "balloon"
	{
		"(Checking for updates to the current balloon, %(SHIORI3FW.BalloonName).)"
	}
	elseif reference3 == "shell"
	{
		"(Checking for updates to the current shell, %(nowshell).)"
	}
	else
	{
		"(Beginning %(reference3) update.)"
	}
	--
	"\w8\e"
}

OnUpdateOtherReady
{
	reference0++
	"\0\s[0](There are %(reference0) new files.)\w8\w8\e"
}

OnUpdateOtherComplete
{
	AutoUpdates[1] = 0
	if reference0 == "none"
	{
		"\0\s[0](No new files for the current %(reference3) to update with.)\e"
	}
	else
	{
		"\0\s[0](Update complete!)\e"
	}
	
}

OnUpdateOther.OnDownloadBegin
{
	"\_q(%(reference3) update: downloading %(reference0)...)\n\n"
	--
	_Update_Process = TOINT(reference1) + 1
	_Update_Total = TOINT(reference2) + 1
	_Update_Remaining = _Update_Total - _Update_Process

	//defining starting points
	_PointA = 1
	_PointB = 1

	//defining text buffers beforehand, otherwise they don't display right
	_txt = ""

	//loop calculates how many check boxes to display based on the variables above

	while _PointA <= _Update_Process
	{
		_txt += "O"
		_PointA++
	}
	//see above except for blank boxes
	while _PointB <= _Update_Remaining
	{
		_txt += "o"
		_PointB++
	}
	--
	//using the text buffers to display the correct number of boxes
	"%(_txt)\n\n(%(_Update_Process) of %(_Update_Total))"
	--
	"\e"
}

OnUpdateOtherFailure
{
	"\0(%(reference3) update failed: '%(reference0)'.)\e"
}

OnDisplayChange
{
	displaybpp = reference0
 	displaywidth = reference1
	displayheight = reference2
}

OnShellScaling //reference0 is the new size, reference1 is the previous. Sadly, you can't check for the Y scale.
{
	nowscale = reference0
	
	"\0\s[0](%(reference0)% hydration.)\e"
}

OnSurfaceRestore
{
	"\0\s[0]"
}